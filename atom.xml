<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yuluo</title>
  
  <subtitle>The home of yuluo!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="yuluo-ding.github.io/"/>
  <updated>2019-12-27T07:11:09.618Z</updated>
  <id>yuluo-ding.github.io/</id>
  
  <author>
    <name>Luo Yu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决macOS端口被占用</title>
    <link href="yuluo-ding.github.io/2019/12/26/%E8%A7%A3%E5%86%B3macOS%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/"/>
    <id>yuluo-ding.github.io/2019/12/26/解决macOS端口被占用/</id>
    <published>2019-12-26T15:18:54.000Z</published>
    <updated>2019-12-27T07:11:09.618Z</updated>
    
    <content type="html"><![CDATA[<p>在部署和测试hexo的时候，经常出现一下提示：</p><p><code>Error: listen EADDRINUSE: address already in use :::4000</code></p><p>这是说明4000端口呗占用了，之前讲了Windows下怎么解决，这次说明下macOS下怎么解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i:port # port为对应的端口号</span><br></pre></td></tr></table></figure><a id="more"></a><p>之后出现如下提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COMMAND   PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">node    10906 username   42u  IPv6 0xcd611b6cd0d363df      0t0  TCP *:terabase (LISTEN)</span><br></pre></td></tr></table></figure><p>找到PID，然后杀掉该进程就可以</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kill -9 PID #上面显示的PID</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在部署和测试hexo的时候，经常出现一下提示：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Error: listen EADDRINUSE: address already in use :::4000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是说明4000端口呗占用了，之前讲了Windows下怎么解决，这次说明下macOS下怎么解决&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo lsof -i:port # port为对应的端口号&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="mac OS" scheme="yuluo-ding.github.io/categories/mac-OS/"/>
    
    
      <category term="macOS" scheme="yuluo-ding.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>解决1080 端口被占用</title>
    <link href="yuluo-ding.github.io/2019/12/24/%E8%A7%A3%E5%86%B31080-%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/"/>
    <id>yuluo-ding.github.io/2019/12/24/解决1080-端口被占用/</id>
    <published>2019-12-24T08:40:48.000Z</published>
    <updated>2019-12-25T07:14:43.741Z</updated>
    
    <content type="html"><![CDATA[<p>在用Windows的时候，或者一些特殊软件的时候，会提示端口被占用了，例如1080端口。</p><p>有以下几个解决办法：</p><ol><li><p>用cmd命令查看是哪个应用占用了</p><p>打开cmd，然后<code>netstat -aon|findstr &quot;1080&quot;</code>，通过最后一列得到该应用的PID，</p><p>然后根据PID找出是哪个应用，<code>tasklist|findstr PID</code> ，</p><a id="more"></a><p>最后用任务管理器kill该应用即可。</p></li><li><p>使用CurrPorts软件来查看</p><p><a href="http://www.nirsoft.net/utils/cports.html#DownloadLinks">下载地址</a></p><p>下载后直接解压运行</p><p>找到被占用的端口</p><p>右键，选择 “Close Selected TCP Connections”</p></li><li><p>修改要用的端口</p><p>例如在目录下找到<code>gui-config.json</code>文件，把其中的<code>&quot;localPort&quot; : 1080,</code>换成<code>&quot;localPort&quot; : 1090,</code>或者其余的端口，然后保存文件，重启应用。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用Windows的时候，或者一些特殊软件的时候，会提示端口被占用了，例如1080端口。&lt;/p&gt;
&lt;p&gt;有以下几个解决办法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;用cmd命令查看是哪个应用占用了&lt;/p&gt;
&lt;p&gt;打开cmd，然后&lt;code&gt;netstat -aon|findstr &amp;quot;1080&amp;quot;&lt;/code&gt;，通过最后一列得到该应用的PID，&lt;/p&gt;
&lt;p&gt;然后根据PID找出是哪个应用，&lt;code&gt;tasklist|findstr PID&lt;/code&gt; ，&lt;/p&gt;
    
    </summary>
    
      <category term="Windows" scheme="yuluo-ding.github.io/categories/Windows/"/>
    
    
      <category term="端口" scheme="yuluo-ding.github.io/tags/%E7%AB%AF%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Linux tar</title>
    <link href="yuluo-ding.github.io/2019/12/10/Linux-tar/"/>
    <id>yuluo-ding.github.io/2019/12/10/Linux-tar/</id>
    <published>2019-12-10T05:13:58.000Z</published>
    <updated>2019-12-25T07:14:33.849Z</updated>
    
    <content type="html"><![CDATA[<p>简单的说：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#压缩</span></span><br><span class="line">tar -zcvf ***.tar.gz</span><br><span class="line">tar -jcvf ***.tar.bz2</span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar -zxvf ***.tar.gz</span><br><span class="line">tar -jxvf ***.tar.bz2</span><br></pre></td></tr></table></figure><a id="more"></a><p>tar [-cxtzjvfpPN] 文件与目录 ….</p><p>常用参数：</p><p>-c ：建立一个压缩文件的参数指令(create 的意思)；</p><p>-x ：解开一个压缩文件的参数指令！</p><p>-t ：查看 tarfile 里面的文件！</p><p>Ps: 特别注意，在参数的下达中， c/x/t 仅能存在一个,不可同时存在.</p><p>-z ：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩？</p><p>-j ：是否同时具有 bzip2 的属性？亦即是否需要用 bzip2 压缩？</p><p>-v ：压缩的过程中显示文件！这个常用，但不建议用在背景执行过程！</p><p>-f ：使用档名，请留意，在 f 之后要立即接档名</p><p>-p ：使用原文件的原来属性（属性不会依据使用者而变）</p><p>-P ：可以使用绝对路径来压缩！</p><p>-N ：比后面接的日期(yyyy/mm/dd)还要新的才会被打包进新建的文件中！</p><p>–exclude FILE：在压缩的过程中，不要将 FILE 打包！</p><p>参考 ：<a href="https://www.cnblogs.com/52linux/archive/2012/03/04/2379738.html"><a href="https://www.cnblogs.com/52linux/archive/2012/03/04/2379738.html">linux tar (打包.压缩.解压缩)命令说明 | tar如何解压文件到指定的目录？</a></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的说：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#压缩&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -zcvf ***.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -jcvf ***.tar.bz2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#解压&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -zxvf ***.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -jxvf ***.tar.bz2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="yuluo-ding.github.io/categories/Linux/"/>
    
    
      <category term="tar" scheme="yuluo-ding.github.io/tags/tar/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 ping baidu.com 报错name or service not know</title>
    <link href="yuluo-ding.github.io/2019/12/03/CentOS-7-ping-baidu-com-%E6%8A%A5%E9%94%99name-or-service-not-know/"/>
    <id>yuluo-ding.github.io/2019/12/03/CentOS-7-ping-baidu-com-报错name-or-service-not-know/</id>
    <published>2019-12-03T08:15:41.000Z</published>
    <updated>2019-12-25T07:14:53.159Z</updated>
    
    <content type="html"><![CDATA[<p>在用 VirtualBox 安装了CentOS 7 的虚拟机之后，尝试测试用<code>ping baidu.com</code>来测试网络的连接性，提示<code>name or service not know</code>这个错误，解决办法如下：</p><ol><li>首先在<code>/etc/sysonfit/network-scripts</code>的路径下找到网卡的配置文件</li><li>用vi编辑配置文件，例如<code>vi ifcfg-eth0</code>，把其中的<code>ONBOOT=NO</code>改成<code>ONBOOT=yes</code></li><li>重启网卡<code>systemctl restart network</code></li></ol><a id="more"></a><p>如果以上还不行，则按照如下步骤：</p><ol><li><p>添加DNS服务器：<code>vi /etc/resolv.conf</code></p></li><li><p>添加<code>nameserver 114.114.114.114</code></p></li><li><p>保存该配置文件，重启网络服务<code>systemctl restart network</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用 VirtualBox 安装了CentOS 7 的虚拟机之后，尝试测试用&lt;code&gt;ping baidu.com&lt;/code&gt;来测试网络的连接性，提示&lt;code&gt;name or service not know&lt;/code&gt;这个错误，解决办法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先在&lt;code&gt;/etc/sysonfit/network-scripts&lt;/code&gt;的路径下找到网卡的配置文件&lt;/li&gt;
&lt;li&gt;用vi编辑配置文件，例如&lt;code&gt;vi ifcfg-eth0&lt;/code&gt;，把其中的&lt;code&gt;ONBOOT=NO&lt;/code&gt;改成&lt;code&gt;ONBOOT=yes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启网卡&lt;code&gt;systemctl restart network&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Linux" scheme="yuluo-ding.github.io/categories/Linux/"/>
    
    
      <category term="CentOS 7" scheme="yuluo-ding.github.io/tags/CentOS-7/"/>
    
  </entry>
  
  <entry>
    <title>Python 读写CSV文档</title>
    <link href="yuluo-ding.github.io/2019/10/25/Python-%E8%AF%BB%E5%86%99CSV%E6%96%87%E6%A1%A3/"/>
    <id>yuluo-ding.github.io/2019/10/25/Python-读写CSV文档/</id>
    <published>2019-10-25T06:51:46.000Z</published>
    <updated>2019-12-25T07:15:11.066Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>逗号分隔值</strong>（Comma-Separated Values，<strong>CSV</strong>，有时也称为<strong>字符分隔值</strong>，因为分隔字符也可以不是逗号），其文件以纯文本形式存储表格数据（数字和文本）。纯文本意味着该文件是一个<a href="https://baike.baidu.com/item/字符/4768913">字符</a>序列，不含必须像二进制数字那样被解读的数据。CSV文件由任意数目的记录组成，记录间以某种换行符分隔；每条记录由<a href="https://baike.baidu.com/item/字段/2885972">字段</a>组成，字段间的分隔符是其它字符或字符串，最常见的是逗号或<a href="https://baike.baidu.com/item/制表符/7337607">制表符</a>。通常，所有记录都有完全相同的字段序列。通常都是纯文本文件。建议使用WORDPAD或是记事本来开启，再则先另存新档后用EXCEL开启，也是方法之一。</p></blockquote><a id="more"></a><p>直接创建CSV文件有两种通用的办法：</p><ol><li>直接用Excel新建文件，保存为<code>.csv</code>格式的文件即可</li><li>用文本编辑器，例如Sublime Text新建文件，保存为<code>.csv</code>格式的文件即可</li></ol><p>每一行的数据是由<code>,</code>分隔</p><h4 id="Python-处理CSV文档"><a href="#Python-处理CSV文档" class="headerlink" title="Python 处理CSV文档"></a>Python 处理CSV文档</h4><h5 id="读取CSV文档"><a href="#读取CSV文档" class="headerlink" title="读取CSV文档"></a>读取CSV文档</h5><p>利用Python 的CSV 库来处理对应的文档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件至字典</span></span><br><span class="line">csv_file = open(<span class="string">"test.csv"</span>, <span class="string">"r"</span>)</span><br><span class="line">reader = csv.reader(csv_file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立字典</span></span><br><span class="line">result = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> reader:</span><br><span class="line">    result[item[<span class="number">0</span>]] = item[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">csv_file.close()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>每行数据会有一个属性：<code>line_num</code>表示行数</p><p>在遍历的时候，每一行就是一个<code>list</code>,</p><h5 id="写入CSV文档"><a href="#写入CSV文档" class="headerlink" title="写入CSV文档"></a>写入CSV文档</h5><p>要把数据写入CSV 的文件，可以直接把list格式的数据写入，但是需要注意的是要使用<code>writerow</code>，否者不会自动换行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件头，一般就是数据名</span></span><br><span class="line">fileHeader = [<span class="string">"name"</span>, <span class="string">"score"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设我们要写入的是以下两行数据</span></span><br><span class="line">d1 = [<span class="string">"Wang"</span>, <span class="string">"100"</span>]</span><br><span class="line">d2 = [<span class="string">"Li"</span>, <span class="string">"80"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">csv_file = open(<span class="string">"test.csv"</span>, <span class="string">"w"</span>)</span><br><span class="line">writer = csv.writer(csvFile)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入的内容都是以列表的形式传入函数</span></span><br><span class="line">writer.writerow(fileHeader)</span><br><span class="line">writer.writerow(d1)</span><br><span class="line">writer.writerow(d1)</span><br><span class="line"></span><br><span class="line">csv_file.close()</span><br></pre></td></tr></table></figure><p>也可以直接使用<code>writerows</code>，一次性把数据放入一个list里面直接写入。</p><h5 id="DictReader"><a href="#DictReader" class="headerlink" title="DictReader"></a>DictReader</h5><p>可以直接把数据读取为字典的形式，第一行一般是文件的内容描述，自动作为字典的key值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csv_file = csv.DictReader(csv_file)</span><br></pre></td></tr></table></figure><h5 id="DictWriter"><a href="#DictWriter" class="headerlink" title="DictWriter"></a>DictWriter</h5><p>以字典的形式把数据写入文本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csv_file = csv.DictWriter(csv_file, fileheader)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;逗号分隔值&lt;/strong&gt;（Comma-Separated Values，&lt;strong&gt;CSV&lt;/strong&gt;，有时也称为&lt;strong&gt;字符分隔值&lt;/strong&gt;，因为分隔字符也可以不是逗号），其文件以纯文本形式存储表格数据（数字和文本）。纯文本意味着该文件是一个&lt;a href=&quot;https://baike.baidu.com/item/字符/4768913&quot;&gt;字符&lt;/a&gt;序列，不含必须像二进制数字那样被解读的数据。CSV文件由任意数目的记录组成，记录间以某种换行符分隔；每条记录由&lt;a href=&quot;https://baike.baidu.com/item/字段/2885972&quot;&gt;字段&lt;/a&gt;组成，字段间的分隔符是其它字符或字符串，最常见的是逗号或&lt;a href=&quot;https://baike.baidu.com/item/制表符/7337607&quot;&gt;制表符&lt;/a&gt;。通常，所有记录都有完全相同的字段序列。通常都是纯文本文件。建议使用WORDPAD或是记事本来开启，再则先另存新档后用EXCEL开启，也是方法之一。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="yuluo-ding.github.io/categories/Python/"/>
    
    
      <category term="CSV" scheme="yuluo-ding.github.io/tags/CSV/"/>
    
  </entry>
  
  <entry>
    <title>小米6 刷机记录</title>
    <link href="yuluo-ding.github.io/2019/10/23/%E5%B0%8F%E7%B1%B36-%E5%88%B7%E6%9C%BA%E8%AE%B0%E5%BD%95/"/>
    <id>yuluo-ding.github.io/2019/10/23/小米6-刷机记录/</id>
    <published>2019-10-23T08:45:13.000Z</published>
    <updated>2019-12-25T07:15:18.663Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小米6刷机记录"><a href="#小米6刷机记录" class="headerlink" title="小米6刷机记录"></a>小米6刷机记录</h3><ul><li>adb/fastboot工具：Minimal ADB and Fastboot</li><li>刷之前的MIUI为：MIUI的稳定版</li><li>TWRP：官网上小米6的3.2.1</li><li>安装完成后刷入了基于原生Android开源项目的ROM包（基于android 8.1.0）</li></ul><a id="more"></a><h3 id="准备好adb-fastboot工具"><a href="#准备好adb-fastboot工具" class="headerlink" title="准备好adb/fastboot工具"></a>准备好adb/fastboot工具</h3><p><a href="https://developer.android.com/studio/releases/platform-tools">Google官网地址</a><br><a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">ADB和fastboot for Windows</a><br><a href="https://dl.google.com/android/repository/platform-tools-latest-darwin.zip">ADB和fastboot for macOS</a></p><h3 id="下载TWRP"><a href="#下载TWRP" class="headerlink" title="下载TWRP"></a>下载TWRP</h3><p>在<a href="http://link.zhihu.com/?target=https%3A//twrp.me/Devices/">TWRP设备列表</a>找到对应的设备，然后选择一个区域下载img文件到本地</p><h3 id="刷机步骤"><a href="#刷机步骤" class="headerlink" title="刷机步骤"></a>刷机步骤</h3><ol><li><p>保证手机已经打开USB调试模式<br> 用<code>adb devices</code>能在输出中看到设备记录就算成功</p></li><li><p>用数据线连接手机和电脑，打开终端或者进入ADB目录文件下</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br><span class="line">adb reboot bootloader</span><br><span class="line">fastboot flash recovery twrp.img</span><br><span class="line">fastboot boot twrp.img # 此行命令可以进TWRP的recovery，但是如果没有刷ROM就重启，那么recovery就会被覆盖</span><br></pre></td></tr></table></figure></li><li><p>把ROM推送到手机中，刷ROM<br> <code>adb push *.zip /sdcard</code><br> 然后在手机中操作，先三清，然后选择该ROM刷入</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小米6刷机记录&quot;&gt;&lt;a href=&quot;#小米6刷机记录&quot; class=&quot;headerlink&quot; title=&quot;小米6刷机记录&quot;&gt;&lt;/a&gt;小米6刷机记录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;adb/fastboot工具：Minimal ADB and Fastboot&lt;/li&gt;
&lt;li&gt;刷之前的MIUI为：MIUI的稳定版&lt;/li&gt;
&lt;li&gt;TWRP：官网上小米6的3.2.1&lt;/li&gt;
&lt;li&gt;安装完成后刷入了基于原生Android开源项目的ROM包（基于android 8.1.0）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="yuluo-ding.github.io/categories/Android/"/>
    
    
      <category term="小米 6" scheme="yuluo-ding.github.io/tags/%E5%B0%8F%E7%B1%B3-6/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18 设置静态IP</title>
    <link href="yuluo-ding.github.io/2019/10/12/Ubuntu18-%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP/"/>
    <id>yuluo-ding.github.io/2019/10/12/Ubuntu18-设置静态IP/</id>
    <published>2019-10-12T02:38:07.000Z</published>
    <updated>2019-12-25T07:15:02.721Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 18 的网络管理程序变成了netplan，所以配置方式也跟16不一样了。</p><p>现在的网卡配置文件是：</p><p><code>/etc/netplan/50-cloud-init.yaml</code></p><p>采用了YAML的文件格式，设置静态IP的格式如下：</p><a id="more"></a><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">    <span class="attr">ethernets:</span></span><br><span class="line">        <span class="attr">enp0s3:</span></span><br><span class="line">            <span class="attr">addresses:</span> <span class="string">[192.168.1.100/24]</span></span><br><span class="line">            <span class="attr">dhcp4:</span> <span class="literal">no</span></span><br><span class="line">            <span class="attr">dhcp6:</span> <span class="literal">no</span></span><br><span class="line">            <span class="attr">gateway4:</span>  <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">            <span class="attr">nameservers:</span></span><br><span class="line">                <span class="attr">addresses:</span> <span class="string">[8.8.8.8,</span> <span class="number">9.9</span><span class="number">.9</span><span class="number">.9</span><span class="string">]</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>保存之后，利用<code>netplan apply</code>生效</p><p><code>ifconfig</code>查看是否是新的IP地址</p><p>PS：</p><p>基于YAML的格式要求，每一行的<code>:</code>要有空格，否则在重启的时候会报错。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu 18 的网络管理程序变成了netplan，所以配置方式也跟16不一样了。&lt;/p&gt;
&lt;p&gt;现在的网卡配置文件是：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/netplan/50-cloud-init.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;采用了YAML的文件格式，设置静态IP的格式如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="yuluo-ding.github.io/categories/Linux/"/>
    
    
      <category term="Ubuntu18" scheme="yuluo-ding.github.io/tags/Ubuntu18/"/>
    
  </entry>
  
  <entry>
    <title>Linux查找并杀死多个进程</title>
    <link href="yuluo-ding.github.io/2019/09/27/Linux%E6%9F%A5%E6%89%BE%E5%B9%B6%E6%9D%80%E6%AD%BB%E5%A4%9A%E4%B8%AA%E8%BF%9B%E7%A8%8B/"/>
    <id>yuluo-ding.github.io/2019/09/27/Linux查找并杀死多个进程/</id>
    <published>2019-09-27T09:27:34.000Z</published>
    <updated>2019-09-27T09:30:59.337Z</updated>
    
    <content type="html"><![CDATA[<p><code>ps -ef|grep python|grep -v grep|cut -c 9-15|xargs kill -9</code></p><p><code>ps -ef</code>查看所有进程</p><p><code>grep python</code>塞选出含有python的进程</p><p><code>grep -v grep</code>排除最上面那个命令的进程</p><p><code>cut -c 9-15</code>是截取输入行的第9个字符到第15个字符，而这正好是进程号PID</p><p><code>xargs kill -9</code>中的xargs命令是用来把前面命令的输出结果（PID）作为“kill -9”命令的参数，并执行该命令</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;ps -ef|grep python|grep -v grep|cut -c 9-15|xargs kill -9&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ps -ef&lt;/code&gt;查看所有进程&lt;/p&gt;
&lt;p&gt;&lt;code&gt;grep python&lt;/code&gt;塞选
      
    
    </summary>
    
      <category term="Linux" scheme="yuluo-ding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="yuluo-ding.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>让Chrome显示www和https</title>
    <link href="yuluo-ding.github.io/2019/09/23/%E8%AE%A9Chrome%E6%98%BE%E7%A4%BAwww%E5%92%8Chttps/"/>
    <id>yuluo-ding.github.io/2019/09/23/让Chrome显示www和https/</id>
    <published>2019-09-23T02:42:29.000Z</published>
    <updated>2019-09-23T02:46:42.385Z</updated>
    
    <content type="html"><![CDATA[<p>新版的Chrome 77又把<code>www</code>和<code>https</code>给隐藏了，日常搞事啊，恢复显示的步骤如下</p><p>在浏览器的地址栏输入以下两个命令：</p><ol><li><code>chrome://flags/#omnibox-ui-hide-steady-state-url-scheme</code>，然后选择disabled</li><li><code>chrome://flags/#omnibox-ui-hide-steady-state-url-trivial-subdomains</code>，然后选择disabled</li><li>重启Chrome浏览器</li></ol><p>重新打开网站，应该就能恢复了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新版的Chrome 77又把&lt;code&gt;www&lt;/code&gt;和&lt;code&gt;https&lt;/code&gt;给隐藏了，日常搞事啊，恢复显示的步骤如下&lt;/p&gt;
&lt;p&gt;在浏览器的地址栏输入以下两个命令：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;chrome://flags/#omnibox
      
    
    </summary>
    
      <category term="Google" scheme="yuluo-ding.github.io/categories/Google/"/>
    
    
      <category term="Chrome" scheme="yuluo-ding.github.io/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>在Android Pie中安装Xposed</title>
    <link href="yuluo-ding.github.io/2019/09/10/%E5%9C%A8Android-Pie%E4%B8%AD%E5%AE%89%E8%A3%85Xposed/"/>
    <id>yuluo-ding.github.io/2019/09/10/在Android-Pie中安装Xposed/</id>
    <published>2019-09-10T05:58:06.000Z</published>
    <updated>2020-01-06T01:56:42.726Z</updated>
    
    <content type="html"><![CDATA[<p>如今重新命名的Android 10都已经发布了，但是针对Android Pie的Xpsoed官方版还是没有发布，据说作者去Apple工作去了？但是开源社区的好处就是有人能够实现同样的效果。</p><p>这个是Elder Driver开发的非官方端口，Xposed for Android Pie。它被命名为<code>EDXposed</code>， 还需要额外安装<code>Riru Core</code>，具体步骤如下。</p><a id="more"></a><ul><li>下载 <a href="https://github.com/RikkaApps/Riru/releases">Riru Core</a>压缩包，放入手机</li><li>下载 <a href="https://github.com/ElderDrivers/EdXposed/releases">EdXposed</a>压缩包，可以选择YAHFA，放入手机</li><li>下载 <a href="https://github.com/ElderDrivers/EdXposedManager/releases">XposedInstaller</a>的apk，并且安装</li></ul><p>PS：由于Magisk的官方没有合并一些PR，导致需要使用第三方的<a href="https://github.com/solohsu/magisk_files">Magisk</a>，下载并且在Recovery中刷入系统。</p><p>打开<code>Magisk manager</code>， 打开多功能菜单，选择模块，然后点击添加按钮，分别刷入上文下载的两个压缩包。</p><p>重启手机激活以上两个模块，然后打开<code>EdXposed Manager</code>，看到已经激活了。</p><p>如果没有，请卸载，重新尝试以上步骤。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如今重新命名的Android 10都已经发布了，但是针对Android Pie的Xpsoed官方版还是没有发布，据说作者去Apple工作去了？但是开源社区的好处就是有人能够实现同样的效果。&lt;/p&gt;
&lt;p&gt;这个是Elder Driver开发的非官方端口，Xposed for Android Pie。它被命名为&lt;code&gt;EDXposed&lt;/code&gt;， 还需要额外安装&lt;code&gt;Riru Core&lt;/code&gt;，具体步骤如下。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="yuluo-ding.github.io/categories/Android/"/>
    
    
      <category term="Xposed" scheme="yuluo-ding.github.io/tags/Xposed/"/>
    
  </entry>
  
  <entry>
    <title>在浏览器中看其他国家/地区的Google Play排名</title>
    <link href="yuluo-ding.github.io/2019/08/22/%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9C%8B%E5%85%B6%E4%BB%96%E5%9B%BD%E5%AE%B6-%E5%9C%B0%E5%8C%BA%E7%9A%84Google-Play%E6%8E%92%E5%90%8D/"/>
    <id>yuluo-ding.github.io/2019/08/22/在浏览器中看其他国家-地区的Google-Play排名/</id>
    <published>2019-08-22T06:53:35.000Z</published>
    <updated>2020-01-21T00:54:07.366Z</updated>
    
    <content type="html"><![CDATA[<p><strong>更新：该接口已经被Google封了。</strong></p><p>在Google Play的网页版中，我们能看到当前国家或者地区的，不同分类的应用排名，但是想看其他地区的就有问题了。以下是解决办法，直接在URL中使用固定参数</p><blockquote><p><a href="https://play.google.com/store/apps/category/BUSINESS/collection/topselling_free?gl=ru">https://play.google.com/store/apps/category/BUSINESS/collection/topselling_free?gl=ru</a></p></blockquote><p>其中，<code>BUSINESS</code>是分类，<code>gl=ru</code>是国家的代号</p><p>只要按照这个规则，直接在浏览器中访问特定的URL就那个看到对应的应用排名</p><a id="more"></a><p>举例国家代码：</p><ul><li><a href="https://play.google.com/?gl=al">https://play.google.com/?gl=al</a> Albania</li><li><a href="https://play.google.com/?gl=dz">https://play.google.com/?gl=dz</a> Algeria</li><li><a href="https://play.google.com/?gl=ao">https://play.google.com/?gl=ao</a> Angola</li><li><a href="https://play.google.com/?gl=ag">https://play.google.com/?gl=ag</a> Antigua and Barbuda</li><li><a href="https://play.google.com/?gl=ar">https://play.google.com/?gl=ar</a> Argentina</li><li><a href="https://play.google.com/?gl=am">https://play.google.com/?gl=am</a> Armenia</li><li><a href="https://play.google.com/?gl=aw">https://play.google.com/?gl=aw</a> Aruba</li><li><a href="https://play.google.com/?gl=au">https://play.google.com/?gl=au</a> Australia</li><li><a href="https://play.google.com/?gl=at">https://play.google.com/?gl=at</a> Austria</li><li><a href="https://play.google.com/?gl=az">https://play.google.com/?gl=az</a> Azerbaijan</li><li><a href="https://play.google.com/?gl=bs">https://play.google.com/?gl=bs</a> Bahamas</li><li><a href="https://play.google.com/?gl=bh">https://play.google.com/?gl=bh</a> Bahrain</li><li><a href="https://play.google.com/?gl=bd">https://play.google.com/?gl=bd</a> Bangladesh</li><li><a href="https://play.google.com/?gl=by">https://play.google.com/?gl=by</a> Belarus</li><li><a href="https://play.google.com/?gl=be">https://play.google.com/?gl=be</a> Belgium</li><li><a href="https://play.google.com/?gl=bz">https://play.google.com/?gl=bz</a> Belize</li><li><a href="https://play.google.com/?gl=bj">https://play.google.com/?gl=bj</a> Benin</li><li><a href="https://play.google.com/?gl=bo">https://play.google.com/?gl=bo</a> Bolivia</li><li><a href="https://play.google.com/?gl=ba">https://play.google.com/?gl=ba</a> Bosnia and Herzegovina</li><li><a href="https://play.google.com/?gl=bw">https://play.google.com/?gl=bw</a> Botswana</li><li><a href="https://play.google.com/?gl=br">https://play.google.com/?gl=br</a> Brazil</li><li><a href="https://play.google.com/?gl=bg">https://play.google.com/?gl=bg</a> Bulgaria</li><li><a href="https://play.google.com/?gl=bf">https://play.google.com/?gl=bf</a> Burkina</li><li><a href="https://play.google.com/?gl=kh">https://play.google.com/?gl=kh</a> Cambodia</li><li><a href="https://play.google.com/?gl=cm">https://play.google.com/?gl=cm</a> Cameroon</li><li><a href="https://play.google.com/?gl=ca">https://play.google.com/?gl=ca</a> Canada</li><li><a href="https://play.google.com/?gl=cv">https://play.google.com/?gl=cv</a> Cape Verde</li><li><a href="https://play.google.com/?gl=cl">https://play.google.com/?gl=cl</a> Chile</li><li><a href="https://play.google.com/?gl=co">https://play.google.com/?gl=co</a> Colombia</li><li><a href="https://play.google.com/?gl=cr">https://play.google.com/?gl=cr</a> Costa Rica</li><li><a href="https://play.google.com/?gl=ci">https://play.google.com/?gl=ci</a> Cote d’ Ivore</li><li><a href="https://play.google.com/?gl=hr">https://play.google.com/?gl=hr</a> Croatia</li><li><a href="https://play.google.com/?gl=cy">https://play.google.com/?gl=cy</a> Cyprus</li><li><a href="https://play.google.com/?gl=cz">https://play.google.com/?gl=cz</a> Czech Republic</li><li><a href="https://play.google.com/?gl=dk">https://play.google.com/?gl=dk</a> Denmark</li><li><a href="https://play.google.com/?gl=do">https://play.google.com/?gl=do</a> Dominican Republic</li><li><a href="https://play.google.com/?gl=ec">https://play.google.com/?gl=ec</a> Ecuador</li><li><a href="https://play.google.com/?gl=eg">https://play.google.com/?gl=eg</a> Egypt</li><li><a href="https://play.google.com/?gl=sv">https://play.google.com/?gl=sv</a> El Salvador</li><li><a href="https://play.google.com/?gl=ee">https://play.google.com/?gl=ee</a> Estonia</li><li><a href="https://play.google.com/?gl=fj">https://play.google.com/?gl=fj</a> Fiji</li><li><a href="https://play.google.com/?gl=fi">https://play.google.com/?gl=fi</a> Finland</li><li><a href="https://play.google.com/?gl=fr">https://play.google.com/?gl=fr</a> France</li><li><a href="https://play.google.com/?gl=ga">https://play.google.com/?gl=ga</a> Gabon</li><li><a href="https://play.google.com/?gl=de">https://play.google.com/?gl=de</a> Germany</li><li><a href="https://play.google.com/?gl=gh">https://play.google.com/?gl=gh</a> Ghana</li><li><a href="https://play.google.com/?gl=gr">https://play.google.com/?gl=gr</a> Greece</li><li><a href="https://play.google.com/?gl=gt">https://play.google.com/?gl=gt</a> Guatemala</li><li><a href="https://play.google.com/?gl=gw">https://play.google.com/?gl=gw</a> Guinea-Bissau</li><li><a href="https://play.google.com/?gl=ht">https://play.google.com/?gl=ht</a> Haiti</li><li><a href="https://play.google.com/?gl=hn">https://play.google.com/?gl=hn</a> Honduras</li><li><a href="https://play.google.com/?gl=hk">https://play.google.com/?gl=hk</a> Hong Kong</li><li><a href="https://play.google.com/?gl=hu">https://play.google.com/?gl=hu</a> Hungary</li><li><a href="https://play.google.com/?gl=is">https://play.google.com/?gl=is</a> Iceland</li><li><a href="https://play.google.com/?gl=in">https://play.google.com/?gl=in</a> India</li><li><a href="https://play.google.com/?gl=id">https://play.google.com/?gl=id</a> Indonesia</li><li><a href="https://play.google.com/?gl=ie">https://play.google.com/?gl=ie</a> Ireland</li><li><a href="https://play.google.com/?gl=il">https://play.google.com/?gl=il</a> Israel</li><li><a href="https://play.google.com/?gl=it">https://play.google.com/?gl=it</a> Italy</li><li><a href="https://play.google.com/?gl=jm">https://play.google.com/?gl=jm</a> Jamaica</li><li><a href="https://play.google.com/?gl=jp">https://play.google.com/?gl=jp</a> Japan</li><li><a href="https://play.google.com/?gl=jo">https://play.google.com/?gl=jo</a> Jordan</li><li><a href="https://play.google.com/?gl=kz">https://play.google.com/?gl=kz</a> Kazakhstan</li><li><a href="https://play.google.com/?gl=ke">https://play.google.com/?gl=ke</a> Kenya</li><li><a href="https://play.google.com/?gl=kw">https://play.google.com/?gl=kw</a> Kuwait</li><li><a href="https://play.google.com/?gl=kg">https://play.google.com/?gl=kg</a> Kyrgyzstan</li><li><a href="https://play.google.com/?gl=la">https://play.google.com/?gl=la</a> Laos</li><li><a href="https://play.google.com/?gl=lv">https://play.google.com/?gl=lv</a> Latvia</li><li><a href="https://play.google.com/?gl=lb">https://play.google.com/?gl=lb</a> Lebanon</li><li><a href="https://play.google.com/?gl=li">https://play.google.com/?gl=li</a> Liechtenstein</li><li><a href="https://play.google.com/?gl=lt">https://play.google.com/?gl=lt</a> Lithuania</li><li><a href="https://play.google.com/?gl=lu">https://play.google.com/?gl=lu</a> Luxembourg</li><li><a href="https://play.google.com/?gl=mk">https://play.google.com/?gl=mk</a> Macedonia</li><li><a href="https://play.google.com/?gl=my">https://play.google.com/?gl=my</a> Malaysia</li><li><a href="https://play.google.com/?gl=ml">https://play.google.com/?gl=ml</a> Mali</li><li><a href="https://play.google.com/?gl=mt">https://play.google.com/?gl=mt</a> Malta</li><li><a href="https://play.google.com/?gl=mu">https://play.google.com/?gl=mu</a> Mauritius</li><li><a href="https://play.google.com/?gl=mx">https://play.google.com/?gl=mx</a> Mexico</li><li><a href="https://play.google.com/?gl=md">https://play.google.com/?gl=md</a> Moldova</li><li><a href="https://play.google.com/?gl=ma">https://play.google.com/?gl=ma</a> Morocco</li><li><a href="https://play.google.com/?gl=mz">https://play.google.com/?gl=mz</a> Mozambique</li><li><a href="https://play.google.com/?gl=na">https://play.google.com/?gl=na</a> Namibia</li><li><a href="https://play.google.com/?gl=np">https://play.google.com/?gl=np</a> Nepal</li><li><a href="https://play.google.com/?gl=nl">https://play.google.com/?gl=nl</a> Netherlands</li><li><a href="https://play.google.com/?gl=an">https://play.google.com/?gl=an</a> Netherlands Antilles</li><li><a href="https://play.google.com/?gl=nz">https://play.google.com/?gl=nz</a> New Zealand</li><li><a href="https://play.google.com/?gl=ni">https://play.google.com/?gl=ni</a> Nicaragua</li><li><a href="https://play.google.com/?gl=ne">https://play.google.com/?gl=ne</a> Niger</li><li><a href="https://play.google.com/?gl=ng">https://play.google.com/?gl=ng</a> Nigeria</li><li><a href="https://play.google.com/?gl=no">https://play.google.com/?gl=no</a> Norway</li><li><a href="https://play.google.com/?gl=om">https://play.google.com/?gl=om</a> Oman</li><li><a href="https://play.google.com/?gl=pk">https://play.google.com/?gl=pk</a> Pakistan</li><li><a href="https://play.google.com/?gl=pa">https://play.google.com/?gl=pa</a> Panama</li><li><a href="https://play.google.com/?gl=pg">https://play.google.com/?gl=pg</a> Papua New Guinea</li><li><a href="https://play.google.com/?gl=py">https://play.google.com/?gl=py</a> Paraguay</li><li><a href="https://play.google.com/?gl=pe">https://play.google.com/?gl=pe</a> Peru</li><li><a href="https://play.google.com/?gl=ph">https://play.google.com/?gl=ph</a> Philippines</li><li><a href="https://play.google.com/?gl=pl">https://play.google.com/?gl=pl</a> Poland</li><li><a href="https://play.google.com/?gl=pt">https://play.google.com/?gl=pt</a> Portugal</li><li><a href="https://play.google.com/?gl=qa">https://play.google.com/?gl=qa</a> Qatar</li><li><a href="https://play.google.com/?gl=ro">https://play.google.com/?gl=ro</a> Romania</li><li><a href="https://play.google.com/?gl=ru">https://play.google.com/?gl=ru</a> Russia</li><li><a href="https://play.google.com/?gl=rw">https://play.google.com/?gl=rw</a> Rwanda</li><li><a href="https://play.google.com/?gl=sa">https://play.google.com/?gl=sa</a> Saudi Arabia</li><li><a href="https://play.google.com/?gl=sn">https://play.google.com/?gl=sn</a> Senegal</li><li><a href="https://play.google.com/?gl=rs">https://play.google.com/?gl=rs</a> Serbia</li><li><a href="https://play.google.com/?gl=sg">https://play.google.com/?gl=sg</a> Singapore</li><li><a href="https://play.google.com/?gl=sk">https://play.google.com/?gl=sk</a> Slovakia</li><li><a href="https://play.google.com/?gl=si">https://play.google.com/?gl=si</a> Slovenia</li><li><a href="https://play.google.com/?gl=za">https://play.google.com/?gl=za</a> South Africa</li><li><a href="https://play.google.com/?gl=kr">https://play.google.com/?gl=kr</a> South Korea</li><li><a href="https://play.google.com/?gl=es">https://play.google.com/?gl=es</a> Spain</li><li><a href="https://play.google.com/?gl=lk">https://play.google.com/?gl=lk</a> Sri Lanka</li><li><a href="https://play.google.com/?gl=se">https://play.google.com/?gl=se</a> Sweden</li><li><a href="https://play.google.com/?gl=ch">https://play.google.com/?gl=ch</a> Switzerland</li><li><a href="https://play.google.com/?gl=tw">https://play.google.com/?gl=tw</a> Taiwan</li><li><a href="https://play.google.com/?gl=tj">https://play.google.com/?gl=tj</a> Tajikistan</li><li><a href="https://play.google.com/?gl=tz">https://play.google.com/?gl=tz</a> Tanzania</li><li><a href="https://play.google.com/?gl=th">https://play.google.com/?gl=th</a> Thailand</li><li><a href="https://play.google.com/?gl=tg">https://play.google.com/?gl=tg</a> Togo</li><li><a href="https://play.google.com/?gl=tt">https://play.google.com/?gl=tt</a> Trinidad and Tobago</li><li><a href="https://play.google.com/?gl=tn">https://play.google.com/?gl=tn</a> Tunisia</li><li><a href="https://play.google.com/?gl=tr">https://play.google.com/?gl=tr</a> Turkey</li><li><a href="https://play.google.com/?gl=tm">https://play.google.com/?gl=tm</a> Turkmenistan</li><li><a href="https://play.google.com/?gl=ug">https://play.google.com/?gl=ug</a> Uganda</li><li><a href="https://play.google.com/?gl=ua">https://play.google.com/?gl=ua</a> Ukraine</li><li><a href="https://play.google.com/?gl=ae">https://play.google.com/?gl=ae</a> United Arab Emirates</li><li><a href="https://play.google.com/?gl=gb">https://play.google.com/?gl=gb</a> United Kingdom</li><li><a href="https://play.google.com/?gl=us">https://play.google.com/?gl=us</a> United States (including Puerto Rico, American Samoa, Guam, Marshall Islands, Northern Mariana Islands, Palau and US Virgin Islands)</li><li><a href="https://play.google.com/?gl=uy">https://play.google.com/?gl=uy</a> Uruguay</li><li><a href="https://play.google.com/?gl=uz">https://play.google.com/?gl=uz</a> Uzbekistan</li><li><a href="https://play.google.com/?gl=ve">https://play.google.com/?gl=ve</a> Venezuela</li><li><a href="https://play.google.com/?gl=vn">https://play.google.com/?gl=vn</a> Vietnam</li><li><a href="https://play.google.com/?gl=ye">https://play.google.com/?gl=ye</a> Yemen</li><li><a href="https://play.google.com/?gl=zm">https://play.google.com/?gl=zm</a> Zambia</li><li><a href="https://play.google.com/?gl=zw">https://play.google.com/?gl=zw</a> Zimbabwe</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;更新：该接口已经被Google封了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Google Play的网页版中，我们能看到当前国家或者地区的，不同分类的应用排名，但是想看其他地区的就有问题了。以下是解决办法，直接在URL中使用固定参数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://play.google.com/store/apps/category/BUSINESS/collection/topselling_free?gl=ru&quot;&gt;https://play.google.com/store/apps/category/BUSINESS/collection/topselling_free?gl=ru&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中，&lt;code&gt;BUSINESS&lt;/code&gt;是分类，&lt;code&gt;gl=ru&lt;/code&gt;是国家的代号&lt;/p&gt;
&lt;p&gt;只要按照这个规则，直接在浏览器中访问特定的URL就那个看到对应的应用排名&lt;/p&gt;
    
    </summary>
    
      <category term="Google" scheme="yuluo-ding.github.io/categories/Google/"/>
    
    
      <category term="Google Play" scheme="yuluo-ding.github.io/tags/Google-Play/"/>
    
  </entry>
  
  <entry>
    <title>Python 字符串和常用数据结构</title>
    <link href="yuluo-ding.github.io/2019/07/29/Python-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>yuluo-ding.github.io/2019/07/29/Python-字符串和常用数据结构/</id>
    <published>2019-07-29T14:31:18.000Z</published>
    <updated>2019-12-25T07:16:11.154Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/07.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.md">Python中常用的字符串：</a></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    str1 = <span class="string">'hello, world!'</span></span><br><span class="line">    <span class="comment"># 通过len函数计算字符串的长度</span></span><br><span class="line">    print(len(str1))  <span class="comment"># 13</span></span><br><span class="line">    <span class="comment"># 获得字符串首字母大写的拷贝</span></span><br><span class="line">    print(str1.capitalize())  <span class="comment"># Hello, world!</span></span><br><span class="line">    <span class="comment"># 获得字符串变大写后的拷贝</span></span><br><span class="line">    print(str1.upper())  <span class="comment"># HELLO, WORLD!</span></span><br><span class="line">    <span class="comment"># 从字符串中查找子串所在位置</span></span><br><span class="line">    print(str1.find(<span class="string">'or'</span>))  <span class="comment"># 8</span></span><br><span class="line">    print(str1.find(<span class="string">'shit'</span>))  <span class="comment"># -1</span></span><br><span class="line">    <span class="comment"># 与find类似但找不到子串时会引发异常</span></span><br><span class="line">    <span class="comment"># print(str1.index('or'))</span></span><br><span class="line">    <span class="comment"># print(str1.index('shit'))</span></span><br><span class="line">    <span class="comment"># 检查字符串是否以指定的字符串开头</span></span><br><span class="line">    print(str1.startswith(<span class="string">'He'</span>))  <span class="comment"># False</span></span><br><span class="line">    print(str1.startswith(<span class="string">'hel'</span>))  <span class="comment"># True</span></span><br><span class="line">    <span class="comment"># 检查字符串是否以指定的字符串结尾</span></span><br><span class="line">    print(str1.endswith(<span class="string">'!'</span>))  <span class="comment"># True</span></span><br><span class="line">    <span class="comment"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span></span><br><span class="line">    print(str1.center(<span class="number">50</span>, <span class="string">'*'</span>))</span><br><span class="line">    <span class="comment"># 将字符串以指定的宽度靠右放置左侧填充指定的字符</span></span><br><span class="line">    print(str1.rjust(<span class="number">50</span>, <span class="string">' '</span>))</span><br><span class="line">    str2 = <span class="string">'abc123456'</span></span><br><span class="line">    <span class="comment"># 从字符串中取出指定位置的字符(下标运算)</span></span><br><span class="line">    print(str2[<span class="number">2</span>])  <span class="comment"># c</span></span><br><span class="line">    <span class="comment"># 字符串切片(从指定的开始索引到指定的结束索引)</span></span><br><span class="line">    print(str2[<span class="number">2</span>:<span class="number">5</span>])  <span class="comment"># c12</span></span><br><span class="line">    print(str2[<span class="number">2</span>:])  <span class="comment"># c123456</span></span><br><span class="line">    print(str2[<span class="number">2</span>::<span class="number">2</span>])  <span class="comment"># c246</span></span><br><span class="line">    print(str2[::<span class="number">2</span>])  <span class="comment"># ac246</span></span><br><span class="line">    print(str2[::<span class="number">-1</span>])  <span class="comment"># 654321cba</span></span><br><span class="line">    print(str2[<span class="number">-3</span>:<span class="number">-1</span>])  <span class="comment"># 45</span></span><br><span class="line">    <span class="comment"># 检查字符串是否由数字构成</span></span><br><span class="line">    print(str2.isdigit())  <span class="comment"># False</span></span><br><span class="line">    <span class="comment"># 检查字符串是否以字母构成</span></span><br><span class="line">    print(str2.isalpha())  <span class="comment"># False</span></span><br><span class="line">    <span class="comment"># 检查字符串是否以数字和字母构成</span></span><br><span class="line">    print(str2.isalnum())  <span class="comment"># True</span></span><br><span class="line">    str3 = <span class="string">'  jackfrued@126.com '</span></span><br><span class="line">    print(str3)</span><br><span class="line">    <span class="comment"># 获得字符串修剪左右两侧空格的拷贝</span></span><br><span class="line">    print(str3.strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/07.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.md&quot;&gt;Python中常用的字符串：&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="yuluo-ding.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="yuluo-ding.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>解决macOS声音的问题</title>
    <link href="yuluo-ding.github.io/2019/07/18/%E8%A7%A3%E5%86%B3macOS%E5%A3%B0%E9%9F%B3%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>yuluo-ding.github.io/2019/07/18/解决macOS声音的问题/</id>
    <published>2019-07-18T14:50:47.000Z</published>
    <updated>2019-12-25T07:16:31.700Z</updated>
    
    <content type="html"><![CDATA[<p>macOS系统有时会莫名其妙无法工作，在新添音频设备、唤醒或者更新操作系统后，都可能会遇到音频错误。</p><p>在调整了音量大小或者静音无法解决之后，按照如下步骤尝试，应该可以解决。</p><h3 id="检查硬件"><a href="#检查硬件" class="headerlink" title="检查硬件"></a>检查硬件</h3><p>确保系统没有静音，以及声音出问题之前没遇到磕碰之类的。</p><h3 id="选择正确音频"><a href="#选择正确音频" class="headerlink" title="选择正确音频"></a>选择正确音频</h3><a id="more"></a><p>插入耳机之后听不到耳机，可能是新音频设备时选择了错误的输出设备。、</p><p>System Preferences ——&gt; Sound ——&gt; Output</p><p>选择正确的输出设备，尝试切换之后再重新选择正确的输出设备。</p><h3 id="重置音频核心"><a href="#重置音频核心" class="headerlink" title="重置音频核心"></a>重置音频核心</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo killall coreaudiod</span><br></pre></td></tr></table></figure><h3 id="重启大法"><a href="#重启大法" class="headerlink" title="重启大法"></a>重启大法</h3><p>直接<strong>重启</strong>电脑，然后尝试听声音。</p><h3 id="重置Mac上的NVRAM或PRAM"><a href="#重置Mac上的NVRAM或PRAM" class="headerlink" title="重置Mac上的NVRAM或PRAM"></a>重置Mac上的NVRAM或PRAM</h3><p>这个方法是Apple官方的案例，<a href="https://support.apple.com/zh-cn/HT204063">重置Mac上的NVRAM</a></p><p>以上几种方法如果还是不能解决，那就判断是不是需要去售后做一个检测了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;macOS系统有时会莫名其妙无法工作，在新添音频设备、唤醒或者更新操作系统后，都可能会遇到音频错误。&lt;/p&gt;
&lt;p&gt;在调整了音量大小或者静音无法解决之后，按照如下步骤尝试，应该可以解决。&lt;/p&gt;
&lt;h3 id=&quot;检查硬件&quot;&gt;&lt;a href=&quot;#检查硬件&quot; class=&quot;headerlink&quot; title=&quot;检查硬件&quot;&gt;&lt;/a&gt;检查硬件&lt;/h3&gt;&lt;p&gt;确保系统没有静音，以及声音出问题之前没遇到磕碰之类的。&lt;/p&gt;
&lt;h3 id=&quot;选择正确音频&quot;&gt;&lt;a href=&quot;#选择正确音频&quot; class=&quot;headerlink&quot; title=&quot;选择正确音频&quot;&gt;&lt;/a&gt;选择正确音频&lt;/h3&gt;
    
    </summary>
    
      <category term="Apple" scheme="yuluo-ding.github.io/categories/Apple/"/>
    
    
      <category term="macOS" scheme="yuluo-ding.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7下安装Python3.7</title>
    <link href="yuluo-ding.github.io/2019/07/03/CentOS-7%E4%B8%8B%E5%AE%89%E8%A3%85Python3-7/"/>
    <id>yuluo-ding.github.io/2019/07/03/CentOS-7下安装Python3-7/</id>
    <published>2019-07-03T01:11:16.000Z</published>
    <updated>2020-01-02T14:51:15.907Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS 7只有默认的Python2，并没有Python3，为了不影响使用，做个安装记录。</p><h3 id="编译安装Python-3-相关的包"><a href="#编译安装Python-3-相关的包" class="headerlink" title="编译安装Python 3 相关的包"></a>编译安装Python 3 相关的包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make libffi-devel</span><br></pre></td></tr></table></figure><p>这里面有一个包很关键<code>libffi-devel</code>，因为只有3.7才会用到这个包，如果不安装这个包的话，在 make 阶段会出现如下的报错：</p><a id="more"></a><blockquote><h1 id="ModuleNotFoundError-No-module-named-‘-ctypes’"><a href="#ModuleNotFoundError-No-module-named-‘-ctypes’" class="headerlink" title="ModuleNotFoundError: No module named ‘_ctypes’"></a>ModuleNotFoundError: No module named ‘_ctypes’</h1></blockquote><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>CentOS 默认没有<code>wget</code>，需要下载安装下，并且添加一个扩展源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line"><span class="meta">#</span><span class="bash">运行这个命令添加epel扩展源 </span></span><br><span class="line">yum -y install epel-release</span><br></pre></td></tr></table></figure><p> 下载，解压，安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir py &amp;&amp; cd py</span><br><span class="line">wget https://www.python.org/ftp/python/3.7.1/Python-3.7.1.tgz</span><br><span class="line">tar -zxvf Python-3.7.1.tgz </span><br><span class="line">cd Python-3.7.1</span><br><span class="line">./configure -prefix=/usr/local/python3</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="添加软链接"><a href="#添加软链接" class="headerlink" title="添加软链接"></a>添加软链接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加python3的软链接 </span></span><br><span class="line">ln -s /usr/local/python3/bin/python3.7 /usr/bin/python3</span><br><span class="line"><span class="meta">#</span><span class="bash">添加 pip3 的软链接 </span></span><br><span class="line">ln -s /usr/local/python3/bin/pip3.7 /usr/bin/pip3</span><br><span class="line"><span class="meta">#</span><span class="bash">测试是否安装成功了 </span></span><br><span class="line">python3 -V</span><br><span class="line"><span class="meta">#</span><span class="bash"> Python 3.7.1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS 7只有默认的Python2，并没有Python3，为了不影响使用，做个安装记录。&lt;/p&gt;
&lt;h3 id=&quot;编译安装Python-3-相关的包&quot;&gt;&lt;a href=&quot;#编译安装Python-3-相关的包&quot; class=&quot;headerlink&quot; title=&quot;编译安装Python 3 相关的包&quot;&gt;&lt;/a&gt;编译安装Python 3 相关的包&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make libffi-devel&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里面有一个包很关键&lt;code&gt;libffi-devel&lt;/code&gt;，因为只有3.7才会用到这个包，如果不安装这个包的话，在 make 阶段会出现如下的报错：&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="yuluo-ding.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="yuluo-ding.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>No toolchains found in the NDK toolchains folder for ABI with prefix:mips64el-linux-android</title>
    <link href="yuluo-ding.github.io/2019/01/10/No-toolchains-found-in-the-NDK-toolchains-folder-for-ABI-with-prefix-mips64el-linux-android/"/>
    <id>yuluo-ding.github.io/2019/01/10/No-toolchains-found-in-the-NDK-toolchains-folder-for-ABI-with-prefix-mips64el-linux-android/</id>
    <published>2019-01-10T13:58:55.000Z</published>
    <updated>2019-01-10T14:04:55.401Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Android Studio编译Demo的时候, 提示<code>No toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android</code>错误</p><p>这个其实是Android的SDK里面缺少一个编译工具</p><p>解决办法:</p><p>从<a href="https://developer.android.com/ndk/downloads/?hl=zh-en">NDK</a>下载对应平台的NDK</p><p>解压, 找到<code>ndk-bundle</code>成长文件夹, 找到<code>toolchains</code>下的mips类似的文件夹</p><p>最后把上面的文件夹复制到对应SDK的<code>android-sdk-&gt;ndk-bundle-&gt;toolchains</code>下面.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用Android Studio编译Demo的时候, 提示&lt;code&gt;No toolchains found in the NDK toolchains folder for ABI with prefix: mips64el-linux-android&lt;/code&gt;错误
      
    
    </summary>
    
      <category term="Android" scheme="yuluo-ding.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="yuluo-ding.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Windows手动添加开机启动项</title>
    <link href="yuluo-ding.github.io/2018/12/12/Windows%E6%89%8B%E5%8A%A8%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E9%A1%B9/"/>
    <id>yuluo-ding.github.io/2018/12/12/Windows手动添加开机启动项/</id>
    <published>2018-12-12T14:35:52.000Z</published>
    <updated>2019-01-06T15:19:03.456Z</updated>
    
    <content type="html"><![CDATA[<p>有时安装了绿色的应用, 想要自启动. 有以下三种方式.</p><ul><li><p>方法1.<br>添加程序完整路径到注册表<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code>下<br>或者添加到<code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</code>下</p></li><li><p>方法2.<br>将一个.lnk文件添加到<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup</code>目录下</p></li><li><p>方法3.</p><p>使用命令行命令如以下格式（此例为添加TTPlayer.exe为开机启动项）：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v TTplayerLaunch /t REG_EXPAND_SZ /d "D:\Program Files\TTPlayer\TTPlayer.exe"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时安装了绿色的应用, 想要自启动. 有以下三种方式.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法1.&lt;br&gt;添加程序完整路径到注册表&lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run&lt;/c
      
    
    </summary>
    
      <category term="Windows" scheme="yuluo-ding.github.io/categories/Windows/"/>
    
    
      <category term="windows" scheme="yuluo-ding.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>使用Python的paramiko模块</title>
    <link href="yuluo-ding.github.io/2018/11/26/%E4%BD%BF%E7%94%A8Python%E7%9A%84paramiko%E6%A8%A1%E5%9D%97/"/>
    <id>yuluo-ding.github.io/2018/11/26/使用Python的paramiko模块/</id>
    <published>2018-11-26T14:25:04.000Z</published>
    <updated>2019-12-25T07:17:08.597Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>使用paramiko模块， 在Python的环境下实现 SSH 下的一些操作.</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>直接使用pip安装即可.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install paramiko</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许连接不在know_hosts文件中的主机。</span></span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">ssh.connect(ip,  port, username, password)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行shell命令</span></span><br><span class="line">ssh.exec_command(<span class="string">'ls'</span>)</span><br></pre></td></tr></table></figure><p>API文档:<a href="https://paramiko-docs.readthedocs.io/en/2.4/api/client.html">https://paramiko-docs.readthedocs.io/en/2.4/api/client.html</a></p><h3 id="SFTP"><a href="#SFTP" class="headerlink" title="SFTP"></a>SFTP</h3><p>通过paramiko模块可以实现SCP的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#在新建好ssh链接对象之后, 新建一个链接对象.</span></span><br><span class="line">sftp = ssh.open_sftp()</span><br><span class="line"></span><br><span class="line"><span class="comment">#上传文件</span></span><br><span class="line">sftp.put(local_file, remote_file)</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载文件</span></span><br><span class="line">sftp.get(remote_file, local_file)</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出目录</span></span><br><span class="line">sftp.listdir()<span class="comment">#默认当前目录</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;使用paramiko模块， 在Python的环境下实现 SSH 下的一些操作.&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;直接使用pip安装即可.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install paramiko&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Python" scheme="yuluo-ding.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="yuluo-ding.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Android各国分发渠道</title>
    <link href="yuluo-ding.github.io/2018/11/05/Android%E5%90%84%E5%9B%BD%E5%88%86%E5%8F%91%E6%B8%A0%E9%81%93/"/>
    <id>yuluo-ding.github.io/2018/11/05/Android各国分发渠道/</id>
    <published>2018-11-05T14:57:55.000Z</published>
    <updated>2019-12-25T07:17:19.449Z</updated>
    
    <content type="html"><![CDATA[<p>绝大多数国家，主要市场是Google Play，部分国家有一些第三方市场。<br>通用的商店：Aptoide、Mobango、Mobogenie</p><h5 id="美洲"><a href="#美洲" class="headerlink" title="美洲"></a>美洲</h5><p>美国： Google Play （主要）<br>​             Amazon Appstore</p><a id="more"></a><p>​             GetJar<br>​             AppBrain<br>​             SlideME (slide Me会在超过两千万的不同的OEM APP STORE上预安装)</p><p>巴西： 1.Mobo Robo market MoboRobo - The Android Smartphone PC Manager. Free for Life!<br>​             2.F-Droid F-Droid | Free and Open Source Android App Repository</p><p>墨西哥 Google Play<br>阿根廷 Google Play<br>哥伦比亚 Google Play<br>加拿大 Google Play</p><h5 id="亚洲"><a href="#亚洲" class="headerlink" title="亚洲"></a>亚洲</h5><p>印度 Google Play<br>泰国 Google Play<br>越南 越南大部分Market并不提供自己的下载，而是直接指向Google Play链接</p><p>印尼： 1. Jalan Tikus<br>​             2. Gudang Aplikasi<br>​             3.TemanDev<br>​             4. WePlay</p><p>韩国：SK T-Store,<br>​            Naver NStore,<br>​            APPZIL,olleh Market<br>​            Sumsang Apps会在超过1亿的Galaxy智能机上预安装</p><h5 id="欧洲"><a href="#欧洲" class="headerlink" title="欧洲"></a>欧洲</h5><p>俄罗斯： 1.Yandex: Yandex.Store<br>​                 2. Androidpit: Новости, игры и приложения для Android<br>​                 3. Все для Андроид. Cкачать лучшие приложения для Андроид</p><p>意大利： 1.Androidpit Tutte le applicazioni per Android AndroidPIT<br>2.Vshare vShare Android Market: Free download Android Apps &amp; Best Android Apk games for Android tablet and mobilephones<br>3.appbrain AppBrain App Market (Android)<br>4.softonic . <a href="http://best-apps-market.softonic.it/android">http://best-apps-market.softonic.it/android</a></p><p>英国 Google Play</p><p>德国： 1.avira app store Avira AppStore<br>2.9 apps Free Android Apps Download<br>3.Apk4fun APK4Fun - Download APK for Fun Android Apps &amp; Games<br>4.Androidpit Alle Android-Apps &amp; Android-Spiele aus dem Google Play Store AndroidPIT<br>5. goodereader Android App Store &amp; Blackberry App Store</p><p>芬兰 Google Play</p><p>法国： 1. 1 mobile market 1Mobile Market<br>2.androidpit Tout sur Android: Nouveautés, applications, tests, astuces, forum &amp; communauté</p><p>波兰 Google Play<br>土耳其 Google Play<br>西班牙 Google Play</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;绝大多数国家，主要市场是Google Play，部分国家有一些第三方市场。&lt;br&gt;通用的商店：Aptoide、Mobango、Mobogenie&lt;/p&gt;
&lt;h5 id=&quot;美洲&quot;&gt;&lt;a href=&quot;#美洲&quot; class=&quot;headerlink&quot; title=&quot;美洲&quot;&gt;&lt;/a&gt;美洲&lt;/h5&gt;&lt;p&gt;美国： Google Play （主要）&lt;br&gt;​             Amazon Appstore&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="yuluo-ding.github.io/categories/Life/"/>
    
    
      <category term="Android" scheme="yuluo-ding.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>终端命令行计算文件的散列值</title>
    <link href="yuluo-ding.github.io/2018/11/04/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AE%A1%E7%AE%97%E6%96%87%E4%BB%B6%E7%9A%84%E6%95%A3%E5%88%97%E5%80%BC/"/>
    <id>yuluo-ding.github.io/2018/11/04/终端命令行计算文件的散列值/</id>
    <published>2018-11-04T15:07:11.000Z</published>
    <updated>2018-11-04T15:10:09.118Z</updated>
    
    <content type="html"><![CDATA[<p>计算 MD5 校验和</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5 filename</span><br></pre></td></tr></table></figure><h4 id="计算-SHA-1-校验和"><a href="#计算-SHA-1-校验和" class="headerlink" title="计算 SHA-1 校验和"></a>计算 SHA-1 校验和</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shasum -a 1 filename</span><br></pre></td></tr></table></figure><h4 id="计算-SHA-256-校验和"><a href="#计算-SHA-256-校验和" class="headerlink" title="计算 SHA-256 校验和"></a>计算 SHA-256 校验和</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shasum -a 256 filename</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;计算 MD5 校验和&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;co
      
    
    </summary>
    
      <category term="mac OS" scheme="yuluo-ding.github.io/categories/mac-OS/"/>
    
    
      <category term="terminal" scheme="yuluo-ding.github.io/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>Python 两个list 求交集，并集，差集</title>
    <link href="yuluo-ding.github.io/2018/09/14/Python-%E4%B8%A4%E4%B8%AAlist-%E6%B1%82%E4%BA%A4%E9%9B%86%EF%BC%8C%E5%B9%B6%E9%9B%86%EF%BC%8C%E5%B7%AE%E9%9B%86/"/>
    <id>yuluo-ding.github.io/2018/09/14/Python-两个list-求交集，并集，差集/</id>
    <published>2018-09-14T02:34:00.000Z</published>
    <updated>2019-12-25T07:17:29.624Z</updated>
    
    <content type="html"><![CDATA[<p>在python中，分别求两个list 的交集，并集与差集，怎么实现比较方便呢？<br>除了两个for 循环, 还有其余的更方便的方法</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diff</span><span class="params">(listA,listB)</span>:</span></span><br><span class="line">    <span class="comment">#求交集的两种方式</span></span><br><span class="line">    retA = [i <span class="keyword">for</span> i <span class="keyword">in</span> listA <span class="keyword">if</span> i <span class="keyword">in</span> listB]</span><br><span class="line">    retB = list(set(listA).intersection(set(listB)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"retA is: "</span>,retA</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"retB is: "</span>,retB</span><br><span class="line"></span><br><span class="line">    <span class="comment">#求并集</span></span><br><span class="line">    retC = list(set(listA).union(set(listB)))</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"retC1 is: "</span>,retC</span><br><span class="line"></span><br><span class="line">    <span class="comment">#求差集，在B中但不在A中</span></span><br><span class="line">    retD = list(set(listB).difference(set(listA)))</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"retD is: "</span>,retD</span><br><span class="line"></span><br><span class="line">    retE = [i <span class="keyword">for</span> i <span class="keyword">in</span> listB <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> listA]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"retE is: "</span>,retE</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    listA = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    listB = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">    diff(listA,listB)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>大体上是两种思路：<br>1.使用列表解析式. 列表解析式一般来说比循环更快.<br>2.将list转成set以后，使用set的各种方法去处理.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在python中，分别求两个list 的交集，并集与差集，怎么实现比较方便呢？&lt;br&gt;除了两个for 循环, 还有其余的更方便的方法&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="yuluo-ding.github.io/categories/Python/"/>
    
    
      <category term="list" scheme="yuluo-ding.github.io/tags/list/"/>
    
  </entry>
  
</feed>

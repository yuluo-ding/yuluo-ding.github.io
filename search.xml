<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>面向对象的文件系统路径-pathlib</title>
      <link href="/2018/09/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%B7%AF%E5%BE%84-pathlib/"/>
      <url>/2018/09/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%B7%AF%E5%BE%84-pathlib/</url>
      <content type="html"><![CDATA[<p>该模块提供表示文件系统路径的类，其语义适用于不同的操作系统。 pathlib类在纯路径之间划分，纯路径提供纯粹的计算操作而没有I / O，以及具体路径，它继承纯路径但也提供I / O操作。</p><p><img src="https://i.loli.net/2018/09/11/5b977c128ed97.png" alt=""></p><p>如果你之前从未使用过此模块，或者只是不确定哪个类适合你的任务，那么Path很可能就是你所需要的。 为运行代码的平台提供了实例化的具体路径。</p><p>纯路径在某些特殊情况下很有用; 例如：</p><ol><li>如果要在Unix计算机上操作Windows路径（反之亦然）。 在Unix上运行时无法实例化WindowsPath，但可以实例化PureWindowsPath。</li><li>你希望确保你的代码仅操作路径而不实际访问操作系统。 在这种情况下，实例化其中一个纯类可能很有用，因为那些只是没有任何操作系统访问操作。</li></ol><h3 id="基础使用">基础使用</h3><p>导入主类:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br></pre></td></tr></table></figure><p> 列出子目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p = Path(<span class="string">'.'</span>)</span><br><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> p.iterdir() <span class="keyword">if</span> x.is_dir()]</span><br><span class="line"><span class="comment"># [PosixPath('.hg'), PosixPath('docs'), PosixPath('dist'),PosixPath('__pycache__'), PosixPath('build')]</span></span><br></pre></td></tr></table></figure><p>在此目录树中列出Python源文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list(p.glob(<span class="string">'**/*.py'</span>))</span><br><span class="line"><span class="comment"># [PosixPath('test_pathlib.py'), PosixPath('setup.py'),PosixPath('pathlib.py'), PosixPath('docs/conf.py'),PosixPath('build/lib/pathlib.py')]</span></span><br></pre></td></tr></table></figure><p>在根目录插入目录树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p = Path(<span class="string">'/etc'</span>)</span><br><span class="line">q = p / <span class="string">'init.d'</span> / <span class="string">'reboot'</span></span><br><span class="line">print(q)</span><br><span class="line"><span class="comment"># PosixPath('/etc/init.d/reboot')</span></span><br><span class="line">q.resolve()</span><br><span class="line"><span class="comment"># PosixPath('/etc/rc.d/init.d/halt')</span></span><br></pre></td></tr></table></figure><p>查询目录属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">q.exists()</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line">q.is_dir()</span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure><p> 打开一个文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> q.open() <span class="keyword">as</span> f: f.readline()</span><br></pre></td></tr></table></figure><h3 id="Pure_paths">Pure paths</h3><p><code>Pure path</code> 对象提供了实际上不访问文件系统的路径处理操作。 有三种方法可以访问这些类，我们也称之为<code>flavours</code>：</p><p>class pathlib.PurePath(*pathsegments)</p><p>表示系统路径风格的泛型类（实例化它会创建PurePosixPath或PureWindowsPath）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PurePath(<span class="string">'setup.py'</span>)      <span class="comment"># Running on a Unix machine</span></span><br><span class="line"><span class="comment"># PurePosixPath('setup.py')</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> path </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>恢复Chrome的地址栏www</title>
      <link href="/2018/09/10/%E6%81%A2%E5%A4%8DChrome%E7%9A%84%E5%9C%B0%E5%9D%80%E6%A0%8Fwww/"/>
      <url>/2018/09/10/%E6%81%A2%E5%A4%8DChrome%E7%9A%84%E5%9C%B0%E5%9D%80%E6%A0%8Fwww/</url>
      <content type="html"><![CDATA[<ol><li>打开chrome</li><li>地址栏输入</li><li>chrome://flags/#omnibox-ui-hide-steady-state-url-scheme-and-subdomains</li><li>将选项改为disabled</li><li>重启浏览器</li></ol><p>恢复HTTPS 安全图标</p><ol><li>chrome://flags/#simplify-https-indicator</li><li>将选项改为</li><li>enabled（show secure chip for non-ev https pages）</li><li>重启浏览器</li></ol>]]></content>
      
      <categories>
          
          <category> Google </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python利用哈希值比较两个文件的一致性</title>
      <link href="/2018/09/09/Python%E5%88%A9%E7%94%A8%E5%93%88%E5%B8%8C%E5%80%BC%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7/"/>
      <url>/2018/09/09/Python%E5%88%A9%E7%94%A8%E5%93%88%E5%B8%8C%E5%80%BC%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>Python的内置函数hash(),深入发现通过python的哈希值可以做很多的事情</p><h3 id="实现原理">实现原理</h3><p><a href="https://www.wikiwand.com/zh-cn/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8" target="_blank" rel="noopener"><strong>散列函数</strong></a>（英语：Hash function）又称<strong>散列算法</strong>、<strong>哈希函数</strong>，是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该<a href="https://www.wikiwand.com/zh-cn/%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">函数</a>将数据打乱混合，重新创建一个叫做<strong>散列值</strong>（hash values，hash codes，hash sums，或hashes）的指纹。散列值通常用一个短的随机字母和数字组成的字符串来代表。好的散列函数在输入域中很少出现散列冲突。在<a href="https://www.wikiwand.com/zh-cn/%E6%95%A3%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">散列表</a>和数据处理中，不抑制冲突来区别数据，会使得数据库记录更难找到。</p><p><strong>加密散列函数</strong>，是散列函数的一种。它被认为是一种单向函数，也就是说极其难以由散列函数输出的結果，回推输入的资料是什么。这样的单向函数被称为“现代密码学的驮马”。这种散列函数的输入资料，通常被称为讯息（message），而它的输出结果，经常被称为讯息摘要（message digest）或摘要（digest）。它的过程如下：</p><p><img src="https://i.loli.net/2018/09/09/5b953b1d11088.png" alt=""></p><h3 id="具体实现">具体实现</h3><h4 id="MD5">MD5</h4><p>MD5的全称是Message-Digest Algorithm 5（信息-摘要算法）。128位长度。目前MD5是一种不可逆算法。具有很高的安全性。它对应任何字符串都可以加密成一段唯一的固定长度的代码。</p><h4 id="SHA1">SHA1</h4><p>SHA1的全称是Secure Hash Algorithm(安全哈希算法) 。SHA1基于MD5，加密后的数据长度更长,它对长度小于264的输入，产生长度为160bit的散列值。比MD5多32位。<br> 因此，比MD5更加安全，但SHA1的运算速度就比MD5要慢了。</p><p>我们将演示<strong>使用MD5散列算法来hash文件</strong>。 我们不会一次性提取全部文件数据，因为一些文件非常大，会很消耗内存甚至一次性放不下。将文件分割成小块读取将使处理过程高效地使用内存。<br> 在Python中内置的 hashlib 模块就包括了 md5 和 sha1 算法。而且使用起来也极为方便，我们使用md5算法来实现我们比较文件一致性的功能，我们会使用update()方法来对这个对象填充任意的字符串。在任何时候你都可以使用digest()或hexdigest()方法问它要目前为止填充的字符串的摘要。我们需要了解以下几个函数：</p><blockquote><p><strong>hash.update(arg)</strong></p><p><strong>hash.digest()</strong></p><p><strong>hash.hexdigest()</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_file_md5</span><span class="params">(f)</span>:</span></span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment">#如果不用二进制打开文件，则需要先编码</span></span><br><span class="line">        <span class="comment">#data = f.read(1024).encode('utf-8')</span></span><br><span class="line">        data = f.read(<span class="number">1024</span>)  <span class="comment">#将文件分块读取</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        m.update(data)</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="comment">#将file2文件写入改动了一个位数的数据</span></span><br><span class="line">txt1 = <span class="string">'你好么?我可以用下面这段代码验证一下：'</span></span><br><span class="line">txt2 = <span class="string">'你好么?我可以用下面这段代码验证一下：1'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f1, open(<span class="string">'2.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    f1.write(txt1)</span><br><span class="line">    f2.write(txt2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f1, open(<span class="string">'2.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    file1_md5 = get_file_md5(f1)</span><br><span class="line">    file2_md5 = get_file_md5(f2)</span><br><span class="line">    print(<span class="string">'file1_md5:'</span>,file1_md5)</span><br><span class="line">    print(<span class="string">'file2_md5:'</span>,file2_md5)</span><br><span class="line">    <span class="keyword">if</span> file1_md5 != file2_md5:</span><br><span class="line">        print(<span class="string">'file has changed'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'file not changed'</span>)</span><br></pre></td></tr></table></figure><p>在代码中，我们通过将两段字符串txt1,txt2来模拟文件的改动，分别写入1.txt,2.txt,然后我们将两个文件分别读取，计算它们的MD5值，通过比较MD5值便可以知道它们是否一致。<br><strong>需要注意</strong>：<br> 1.是文件打开方式一定要是二进制方式，既打开文件时使用b模式，否则Hash计算是基于文本的那将得到错误的文件Hash，如果不用’rb’去读的话，而用’r’去读的话，我们读取的是uncode的编码，然后我们将读取到的内容编码成’utf-8’，即encode(‘utf-8’),然后进行MD5计算也是可以的。<br> 2.为了避免读入的文件过大，我们是分块读取的。</p><p>简书：楼上小宇：<a href="https://www.jianshu.com/u/1621b29625df" target="_blank" rel="noopener">http://www.jianshu.com/u/1621b29625df</a></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hash </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 利用paramiko模块监控服务器</title>
      <link href="/2018/08/17/python-%E5%88%A9%E7%94%A8paramiko%E6%A8%A1%E5%9D%97%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/08/17/python-%E5%88%A9%E7%94%A8paramiko%E6%A8%A1%E5%9D%97%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>在需要对远程服务器进行监控或者一些文件操作的时候, 可以使用paramiko 模块来操作.</p><p>安装:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install paramiko</span><br></pre></td></tr></table></figure><p>Linux 下还得安装<strong>python-devel</strong>, 不然会报错</p><p>下面是示例代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sshCmd</span><span class="params">(ip, username, passwd, cmds)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        client = paramiko.SSHClient()</span><br><span class="line">        client.load_system_host_keys()</span><br><span class="line">        client.set_missing_host_key_policy(paramiko.AutoAddPolicy)</span><br><span class="line">        client.connect(ip, <span class="number">22</span>, username, passwd, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">for</span> cmd <span class="keyword">in</span> cmds:</span><br><span class="line">            stdin, stdout, stderr = client.exec_command(cmd)</span><br><span class="line">            lines = stdout.readlines()</span><br><span class="line">            <span class="comment"># print out</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">                <span class="keyword">print</span> line,</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%s\t 运行完毕\r\n'</span> % (ip)</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%s\t 运行失败,失败原因\r\n%s'</span> % (ip, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        client.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#上传文件       </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadFile</span><span class="params">(ip,username,passwd)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        t=paramiko.Transport((ip,<span class="number">22</span>))</span><br><span class="line">        t.connect(username=username,password=passwd)</span><br><span class="line">        sftp=paramiko.SFTPClient.from_transport(t)</span><br><span class="line">        remotepath=<span class="string">'/root/main.py'</span></span><br><span class="line">        localpath=<span class="string">'/home/data/javawork/pythontest/src/main.py'</span></span><br><span class="line">        sftp.put(localpath,remotepath)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'上传文件成功'</span></span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%s\t 运行失败,失败原因\r\n%s'</span> % (ip, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        t.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载文件 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadFile</span><span class="params">(ip,username,passwd)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        t=paramiko.Transport((ip,<span class="number">22</span>))</span><br><span class="line">        t.connect(username=username,password=passwd)</span><br><span class="line">        sftp=paramiko.SFTPClient.from_transport(t)</span><br><span class="line">        remotepath=<span class="string">'/root/storm-0.9.0.1.zip'</span></span><br><span class="line">        localpath=<span class="string">'/home/data/javawork/pythontest/storm.zip'</span></span><br><span class="line">        sftp.get(remotepath,localpath)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'下载文件成功'</span></span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'%s\t 运行失败,失败原因\r\n%s'</span> % (ip, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        t.close()  </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 需要执行的命令列表</span></span><br><span class="line">    cmds = [<span class="string">'ls /root'</span>, <span class="string">'ifconfig'</span>]</span><br><span class="line">    <span class="comment"># 需要进行远程监控的服务器列表</span></span><br><span class="line">    servers = [<span class="string">'xxx.xxx.xxx.xxx'</span>]</span><br><span class="line">     </span><br><span class="line">    username = <span class="string">"root"</span></span><br><span class="line">    passwd = <span class="string">"xxxxxx"</span></span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"程序开始运行%s"</span> % datetime.datetime.now()</span><br><span class="line">    <span class="comment"># 每一台服务器创建一个线程处理</span></span><br><span class="line">    <span class="keyword">for</span> server <span class="keyword">in</span> servers:</span><br><span class="line">        th = threading.Thread(target=sshCmd, args=(server, username, passwd, cmds))</span><br><span class="line">        th.start()</span><br><span class="line">        threads.append(th)</span><br><span class="line">         </span><br><span class="line">    <span class="comment"># 等待线程运行完毕</span></span><br><span class="line">    <span class="keyword">for</span> th <span class="keyword">in</span> threads:</span><br><span class="line">        th.join()</span><br><span class="line">         </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"程序结束运行%s"</span> % datetime.datetime.now()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#测试文件的上传与下载</span></span><br><span class="line">    uploadFile(servers[<span class="number">0</span>],username,passwd)</span><br><span class="line">    downloadFile(servers[<span class="number">0</span>],username,passwd)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python, linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>iTunes 搜索 API</title>
      <link href="/2018/08/15/iTunes-%E6%90%9C%E7%B4%A2-API/"/>
      <url>/2018/08/15/iTunes-%E6%90%9C%E7%B4%A2-API/</url>
      <content type="html"><![CDATA[<p>这个搜索API允许你通过关键词在你的网站上搜索iTunes Store，App Store, iBooks Store and Mac App Store。你可以搜索各种内容；包括应用、图书、电影、广播、音乐、视频、有声读物以及TV节目。你也可以调用一个实名查询请求来创建内容库之间的映射和数字目录。开发者可以使用API里的推广的内容，包括歌曲预览，音乐录像，专辑封面和APP图标只用在推广的店面，不用于娱乐用途。从API里使用音乐样本及其他必须和店面徽章相似。<a href="https://link.jianshu.com?t=https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/#legal" target="_blank" rel="noopener">条款和条件适用</a>。</p><p>这项计划允许当你的网站或者app获得点击后获得一些佣金。该项计划更多信息请查看：<a href="https://link.jianshu.com/?t=http://www.apple.com/itunes/affiliates" target="_blank" rel="noopener">http://www.apple.com/itunes/affiliates</a>。</p><p>通过web去查找并且显示结果在web网站上。你必须创建一个搜索区域，通过完全限定的URL请求iTunes Store，并从返回的结果中解析JSON。然后将结果显示在web上。 完整的网址必须有以下格式：</p><p><code>https://itunes.apple.com/search?parameterkeyvalue</code></p><p>在参数里有一个或多个键值对，来详细说明你返回的结果。</p><p>构造一个参数键值对，你必须将每个参数的key等于（=）一个字符串value。例如：key1 =value1。创建一个字符串键值对，你必须将每对键值对用与（&amp;）符号链接。例如:key1=value1&amp;key2=value2&amp;key3=value3</p><p>注：当您为网站创建搜索域和脚本时，你应该使用动态脚本标签你的XMLHTTP脚本调用请求。例如:</p><blockquote><p>key1=value1</p></blockquote><p>您可以使用下表定义的参数的key和value来搜索iTunes Store，App Store，iBooks商店和Mac App Store里面的内容：</p><table><thead><tr><th>Parameter Key</th><th>Description</th><th>Required</th><th>Values</th></tr></thead><tbody><tr><td>term</td><td>The URL-encoded text string you want to search for. For example: jack+johnson.</td><td>Y</td><td>Any URL-encoded text string. Note: URL encoding replaces spaces with the plus (+) character and all characters except the following are encoded: letters, numbers, periods (.), dashes (-), underscores (_), and asterisks (*).</td></tr><tr><td>country</td><td>The two-letter country code for the store you want to search. The search uses the default store front for the specified country. For example: US. The default is US.</td><td>Y</td><td>See <a href="http://en.wikipedia.org/wiki/%20ISO_3166-1_alpha-2" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/ ISO_3166-1_alpha-2</a> for a list of ISO Country Codes.</td></tr><tr><td>media</td><td>The media type you want to search for. For example: movie. The default is all.</td><td>N</td><td>movie, podcast, music, musicVideo, audiobook, shortFilm, tvShow, software, ebook, all</td></tr><tr><td>entity</td><td>The type of results you want returned, relative to the specified media type. For example: movieArtist for a movie media type search. The default is the track entity associated with the specified media type.</td><td>N</td><td>The following entities are available for each media type:moviemovieArtist, moviepodcastpodcastAuthor, podcastmusicmusicArtist, musicTrack, album, musicVideo, mix, song Please note that “musicTrack” can include both songs and music videos in the resultsmusicVideomusicArtist, musicVideoaudiobookaudiobookAuthor, audiobookshortFilmshortFilmArtist, shortFilmtvShowtvEpisode, tvSeasonsoftwaresoftware, iPadSoftware, macSoftwareebookebookallmovie, album, allArtist, podcast, musicVideo, mix, audiobook, tvSeason, allTrack</td></tr><tr><td>attribute</td><td>The attribute you want to search for in the stores, relative to the specified media type. For example, if you want to search for an artist by name specify entity=allArtist&amp;attribute=allArtistTerm. In this example, if you search for term=maroon, iTunes returns “Maroon 5” in the search results, instead of all artists who have ever recorded a song with the word “maroon” in the title.The default is all attributes associated with the specified media type.</td><td>N</td><td>The following attributes are available for each media type:movieactorTerm, genreIndex, artistTerm, shortFilmTerm, producerTerm, ratingTerm, directorTerm, releaseYearTerm, featureFilmTerm, movieArtistTerm, movieTerm, ratingIndex, descriptionTermpodcasttitleTerm, languageTerm, authorTerm, genreIndex, artistTerm, ratingIndex, keywordsTerm, descriptionTermmusicmixTerm, genreIndex, artistTerm, composerTerm, albumTerm, ratingIndex, songTermmusicVideogenreIndex, artistTerm, albumTerm, ratingIndex, songTermaudiobooktitleTerm, authorTerm, genreIndex, ratingIndexshortFilmgenreIndex, artistTerm, shortFilmTerm, ratingIndex, descriptionTermsoftwaresoftwareDevelopertvShowgenreIndex, tvEpisodeTerm, showTerm, tvSeasonTerm, ratingIndex, descriptionTermallactorTerm, languageTerm, allArtistTerm, tvEpisodeTerm, shortFilmTerm, directorTerm, releaseYearTerm, titleTerm, featureFilmTerm, ratingIndex, keywordsTerm, descriptionTerm, authorTerm, genreIndex, mixTerm, allTrackTerm, artistTerm, composerTerm, tvSeasonTerm, producerTerm, ratingTerm, songTerm, movieArtistTerm, showTerm, movieTerm, albumTerm</td></tr><tr><td>callback</td><td>The name of the Javascript callback function you want to use when returning search results to your website. For example: wsSearchCB.</td><td>Y, for cross-site searches</td><td>wsSearchCB</td></tr><tr><td>limit</td><td>The number of search results you want the iTunes Store to return. For example: 25.The default is 50.</td><td>N</td><td>1 to 200</td></tr><tr><td>lang</td><td>The language, English or Japanese, you want to use when returning search results. Specify the language using the five-letter codename. For example: en_us.The default is en_us (English).</td><td>N</td><td>en_us, ja_jp</td></tr><tr><td>version</td><td>The search result key version you want to receive back from your search.The default is 2.</td><td>N</td><td>1, 2</td></tr><tr><td>explicit</td><td>A flag indicating whether or not you want to include explicit content in your search results.The default is Yes.</td><td>N</td><td>Yes, No</td></tr></tbody></table><ul><li>关键是要正确编码你的URL才能被委托会员链接。在编码原始链接附属票据可以在<a href="https://link.jianshu.com?t=https://affiliate.itunes.apple.com/resources/documentation/linking-to-the-itunes-music-store/" target="_blank" rel="noopener">Advanced Affiliate Linking</a>的文档中找到。</li><li>为了提高请求时间，通过指定适当的limit参数，在检索api的时候返回极少数的结果。</li><li>大型网站应该建立缓存逻辑，检索查找api的请求。为了说明这一点，请稍后查看本篇文章的Caching Architecture。</li></ul><p>以下是具体的搜索请求完全合格的URL的例子：</p><ul><li>要搜索所有杰克·约翰逊的音频和视频内容（电影，播客，音乐，音乐视频，有声读物，电影短片和电视节目），您的网址将如下所示：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/search?term=jack+johnson" target="_blank" rel="noopener">https://itunes.apple.com/search?term=jack+johnson</a> </li><li>要搜索所有杰克·约翰逊的音频和视频内容（电影，播客，音乐，音乐视频，有声读物，电影短片和电视节目），并且只返回前25条。您的网址将如下所示：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/search?term=jack+johnson&amp;limit=25" target="_blank" rel="noopener">https://itunes.apple.com/search?term=jack+johnson&amp;limit=25</a> </li><li>要检索杰克·约翰逊的音频，您的网址将如下所示：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/search?term=jack+johnson&amp;entity=musicVideo" target="_blank" rel="noopener">https://itunes.apple.com/search?term=jack+johnson&amp;entity=musicVideo</a> </li><li>要搜索所有吉姆·琼斯音频和视频内容，并返回只从加拿大iTunes商店的结果，您的网址将如下所示：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/search?term=jim+jones&amp;country=ca" target="_blank" rel="noopener">https://itunes.apple.com/search?term=jim+jones&amp;country=ca</a> </li><li>要搜索名为“Yelp的”应用程序和来自美国的iTunes商店只返回的结果，您的网址将如下所示：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/search?term=yelp&amp;country=us&amp;entity=software" target="_blank" rel="noopener">https://itunes.apple.com/search?term=yelp&amp;country=us&amp;entity=software</a></li></ul><p>你也可以创建一个基于iTunes IDs, UPCs/ EANs的搜索请求去商店里面搜索内容。和所有音乐指南（AMG）标识的存储内容。基于ID的查找速度更快，而且含有较少的假阳性结果。</p><p>以下是具体的查找请求完全合格的URL的例子：</p><ul><li><p>通过iTunes艺术家ID查找杰克·约翰逊：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/lookup?id=909253" target="_blank" rel="noopener">https://itunes.apple.com/lookup?id=909253</a> </p></li><li><p>通过iTunes ID查找Yelp的软件应用程序：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/lookup?id=284910350" target="_blank" rel="noopener">https://itunes.apple.com/lookup?id=284910350</a> </p></li><li><p>通过AMG艺术家ID查找杰克·约翰逊：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/lookup?amgArtistId=468749" target="_blank" rel="noopener">https://itunes.apple.com/lookup?amgArtistId=468749</a> </p></li><li><p>通过AMG艺术家的ID查找多个艺术家：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/lookup?amgArtistId=468749,5723" target="_blank" rel="noopener">https://itunes.apple.com/lookup?amgArtistId=468749,5723</a> </p></li><li><p>查找的杰克·约翰逊的所有专辑：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/lookup?id=909253&amp;entity=album" target="_blank" rel="noopener">https://itunes.apple.com/lookup?id=909253&amp;entity=album</a> </p></li><li><p>其AMG艺术家的ID查找多个艺术家和获得每个艺术家的前5张专辑：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/lookup?amgArtistId=468749,5723&amp;entity=album&amp;limit=5" target="_blank" rel="noopener">https://itunes.apple.com/lookup?amgArtistId=468749,5723&amp;entity=album&amp;limit=5</a> </p></li><li><p>通过AMG艺术家的ID查找多个艺术家和获得每个艺术家的5最新歌曲：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/lookup?amgArtistId=468749,5723&amp;entity=song&amp;limit=5&amp;sort=recent" target="_blank" rel="noopener">https://itunes.apple.com/lookup?amgArtistId=468749,5723&amp;entity=song&amp;limit=5&amp;sort=recent</a> </p></li><li><p>通过UPC查找一个专辑或视频：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/lookup?upc=720642462928" target="_blank" rel="noopener">https://itunes.apple.com/lookup?upc=720642462928</a> </p></li><li><p>通过UPC查找专辑，包括这张专辑的曲目：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/lookup?upc=720642462928&amp;entity=song" target="_blank" rel="noopener">https://itunes.apple.com/lookup?upc=720642462928&amp;entity=song</a> </p></li><li><p>通过专辑ID来查找一个专辑：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/lookup?amgAlbumId=15175,15176,15177,15178,15183,15184,15187,1519,15191,15195,15197,15198" target="_blank" rel="noopener">https://itunes.apple.com/lookup?amgAlbumId=15175,15176,15177,15178,15183,15184,15187,1519,15191,15195,15197,15198</a> </p></li><li><p>通过AMG视频ID查找一部电影：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/lookup?amgVideoId=17120" target="_blank" rel="noopener">https://itunes.apple.com/lookup?amgVideoId=17120</a> </p></li><li><p>通过13位ISBN查找一本书：<br> <a href="https://link.jianshu.com?t=https://itunes.apple.com/lookup?isbn=9780316069359" target="_blank" rel="noopener">https://itunes.apple.com/lookup?isbn=9780316069359</a> </p><p>了解搜索结果你搜索的结果用JSON格式返回，JSON有两种结构：</p></li><li><p>一种key/value的集合。也可以称之为一种对象，这个概念类似于Java Map对象，一个Javascript字典，或Pearl/ Ruby的哈希值。对象是一个无序的名称/值对，用左括号开始（{）和一个右括号结束（}）。每个名称由双引号包围，后跟一个冒号（:)）;名称/值对用逗号（，）隔开。</p></li><li><p>值的有序列表，也称为阵列。数组是值的有序集合，用左括号开头（[），并以右括号结束（]）。值用逗号（，）分隔。 </p></li></ul><p>所有的JSON结果被编码为UTF-8。有关JSON的更多信息，请参阅<a href="https://link.jianshu.com/?t=http://www.json.org" target="_blank" rel="noopener">http://www.json.org</a>。</p><p>下面的示例显示在iTunes Store的歌曲JSON的结果 </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"wrapperType"</span>:<span class="string">"track"</span>,</span><br><span class="line"> <span class="attr">"kind"</span>:<span class="string">"song"</span>,</span><br><span class="line"> <span class="attr">"artistId"</span>:<span class="number">909253</span>,</span><br><span class="line"> <span class="attr">"collectionId"</span>:<span class="number">120954021</span>,</span><br><span class="line"> <span class="attr">"trackId"</span>:<span class="number">120954025</span>,</span><br><span class="line"> <span class="attr">"artistName"</span>:<span class="string">"Jack Johnson"</span>,</span><br><span class="line"> <span class="attr">"collectionName"</span>:<span class="string">"Sing-a-Longs and Lullabies for the Film Curious George"</span>,</span><br><span class="line"> <span class="attr">"trackName"</span>:<span class="string">"Upside Down"</span>,</span><br><span class="line"> <span class="attr">"collectionCensoredName"</span>:<span class="string">"Sing-a-Longs and Lullabies for the Film Curious George"</span>,</span><br><span class="line"> <span class="attr">"trackCensoredName"</span>:<span class="string">"Upside Down"</span>,</span><br><span class="line"> <span class="attr">"artistViewUrl"</span>:<span class="string">"https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewArtist?id=909253"</span>,</span><br><span class="line"> <span class="attr">"collectionViewUrl"</span>:<span class="string">"https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewAlbum?i=120954025&amp;id=120954021&amp;s=143441"</span>,</span><br><span class="line"> <span class="attr">"trackViewUrl"</span>:<span class="string">"https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewAlbum?i=120954025&amp;id=120954021&amp;s=143441"</span>,</span><br><span class="line"> <span class="attr">"previewUrl"</span>:<span class="string">"http://a1099.itunes.apple.com/r10/Music/f9/54/43/mzi.gqvqlvcq.aac.p.m4p"</span>,</span><br><span class="line"> <span class="attr">"artworkUrl60"</span>:<span class="string">"http://a1.itunes.apple.com/r10/Music/3b/6a/33/mzi.qzdqwsel.60x60-50.jpg"</span>,</span><br><span class="line"> <span class="attr">"artworkUrl100"</span>:<span class="string">"http://a1.itunes.apple.com/r10/Music/3b/6a/33/mzi.qzdqwsel.100x100-75.jpg"</span>,</span><br><span class="line"> <span class="attr">"collectionPrice"</span>:<span class="number">10.99</span>,</span><br><span class="line"> <span class="attr">"trackPrice"</span>:<span class="number">0.99</span>,</span><br><span class="line"> <span class="attr">"collectionExplicitness"</span>:<span class="string">"notExplicit"</span>,</span><br><span class="line"> <span class="attr">"trackExplicitness"</span>:<span class="string">"notExplicit"</span>,</span><br><span class="line"> <span class="attr">"discCount"</span>:<span class="number">1</span>,</span><br><span class="line"> <span class="attr">"discNumber"</span>:<span class="number">1</span>,</span><br><span class="line"> <span class="attr">"trackCount"</span>:<span class="number">14</span>,</span><br><span class="line"> <span class="attr">"trackNumber"</span>:<span class="number">1</span>,</span><br><span class="line"> <span class="attr">"trackTimeMillis"</span>:<span class="number">210743</span>,</span><br><span class="line"> <span class="attr">"country"</span>:<span class="string">"USA"</span>,</span><br><span class="line"> <span class="attr">"currency"</span>:<span class="string">"USD"</span>,</span><br><span class="line"> <span class="attr">"primaryGenreName"</span>:<span class="string">"Rock"</span>&#125;</span><br></pre></td></tr></table></figure><p> 下表定义了JSON格式返回结果的键和值：</p><table><thead><tr><th>Result Key</th><th>Description</th><th>Returned</th><th>Return Values and Examples</th></tr></thead><tbody><tr><td>wrapperType</td><td>The name of the object returned by the search request.</td><td>Y</td><td>track, collection, artistFor example: track.</td></tr><tr><td>*explicitness</td><td>The Recording Industry Association of America (RIAA) parental advisory for the content returned by the search request.For more information, see <a href="http://itunes.apple.com/WebObjects/MZStore.woa/wa/parentalAdvisory" target="_blank" rel="noopener">http://itunes.apple.com/WebObjects/MZStore.woa/wa/parentalAdvisory</a>.</td><td>Y</td><td>explicit (explicit lyrics, possibly explicit album cover), cleaned (explicit lyrics “bleeped out”), notExplicit (no explicit lyrics)For example: “trackExplicitness”:”notExplicit”.</td></tr><tr><td>kind</td><td>The kind of content returned by the search request.</td><td>Y</td><td>book, album, coached-audio, feature-movie, interactive- booklet, music-video, pdf podcast, podcast-episode, software-package, song, tv- episode, artistFor example: song.</td></tr><tr><td>trackName</td><td>The name of the track, song, video, TV episode, and so on returned by the search request.</td><td>Y</td><td>For example: “Banana Pancakes”.</td></tr><tr><td>artistName</td><td>The name of the artist returned by the search request.</td><td>Y</td><td>For example: Jack Johnson.</td></tr><tr><td>collectionName</td><td>The name of the album, TV season, audiobook, and so on returned by the search request.</td><td>Y</td><td>For example: “In Between Dreams”.</td></tr><tr><td>*censoredName</td><td>The name of the album, TV season, audiobook, and so on returned by the search request, with objectionable words *’d out.<strong>Note:</strong> Artist names are never censored.</td><td>Y</td><td>For example: “S**t Happens”.</td></tr><tr><td>artworkUrl100, artworkUrl60</td><td>A URL for the artwork associated with the returned media type, sized to 100×100 pixels or 60×60 pixels.</td><td>Only returned when artwork is available</td><td>For example: “http:// a1.itunes.apple.com/jp/r10/Music/ y2005/m06/d03/h05/ s05.oazjtxkw.100×100-75.jpg”.</td></tr><tr><td>*viewURL</td><td>A URL for the content associated with the returned media type. You can click the URL to view the content in the iTunes Store.</td><td>Y</td><td>For example: “http:// itunes.apple.com/WebObjects/ MZStore.woa/wa/viewAlbum? i=68615807&amp;id=68615813&amp;s=1434 62”.</td></tr><tr><td>previewUrl</td><td>A URL referencing the 30-second preview file for the content associated with the returned media type. .</td><td>Only returned when media type is track</td><td>For example: “http:// a392.itunes.apple.com/jp/r10/ Music/y2005/m06/d03/h05/s05.zdzqlufu.p.m4p”.</td></tr><tr><td>trackTimeMillis</td><td>The returned track’s time in milliseconds.</td><td>Only returned when media type is track</td></tr></tbody></table><p> 缓存框架</p><p><img src="https://i.loli.net/2018/08/15/5b74494401e32.jpg" alt="cache-architecture-1.jpg"></p><p><strong>法律声明</strong> </p><p>开发人员可以使用某些促销内容，可以通过苹果公司提供，包括歌曲预览和音乐视频，专辑封面，和App图标（“促销内容”），促进了促销内容的主题的目的;提供了这种促销内容：</p><p>（一）被放置仅在促进该促销内容是基于内容页面; </p><p>（二）是接近了“iTunes下载”，“下载的应用程序商店”或“下载的iBooks商店”标志（如批准苹果公司）充当直接链接到iTunes中或App Store页面，消费者可以购买该宣传内容; </p><p>（三）包括归属指示促销内容是“提供了iTunes的礼遇”如果这样的促销内容包括歌曲或音乐视频预览; </p><p>（四）仅流，而不是下载，保存，缓存，或者与视频同步，如果这样的促销内容包括歌曲或音乐视频预览; </p><p>（五）不用于除了其促销目的独立娱乐价值</p><p>（六）不用于促进任何其他商品或服务。开发商承认，苹果提供的促销内容的“原样”，并拒绝任何和所有陈述或担保，包括但不限于非侵权。开发者应将与促销内容到苹果在收到立即连接收到任何索赔，并将根据要求苹果公司立刻删除任何促销内容。</p><p>本协议和您的宣传内容使用受加利福尼亚州法律管辖。</p>]]></content>
      
      <categories>
          
          <category> Apple </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iTunes </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>开启snippet的本地搜索功能</title>
      <link href="/2018/08/10/%E5%BC%80%E5%90%AFsnippet%E7%9A%84%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/08/10/%E5%BC%80%E5%90%AFsnippet%E7%9A%84%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<p>由于使用的是snippet的主题，使用文档已经说出了如何开启本地的搜索功能。</p><p>如果要使用本地站点搜索，必须安装插件hexo-generator-json-content来创建本地搜索json文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-generator-json-content@2.2.0 -S</span><br></pre></td></tr></table></figure><p>然后修改主题配置_config.yml文件下<code>jsonContent</code>相关参数。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 搜索</span></span><br><span class="line">jsonContent:</span><br><span class="line">  searchLocal: true // 是否启用本地搜索</span><br><span class="line">  searchGoogle: true //是否启用谷歌搜索</span><br><span class="line">  posts:</span><br><span class="line">    title: true</span><br><span class="line">    text: true</span><br><span class="line">    content: true</span><br><span class="line">    categories: true</span><br><span class="line">    tags: true</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> hexo教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>让终端走代理</title>
      <link href="/2018/08/08/%E8%AE%A9%E7%BB%88%E7%AB%AF%E8%B5%B0%E4%BB%A3%E7%90%86/"/>
      <url>/2018/08/08/%E8%AE%A9%E7%BB%88%E7%AB%AF%E8%B5%B0%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>在某些时候, mac  OS 下的终端在现在这个环境下. GitHub 等网站动不动连不上, 需要走代理. 现在可以有三种方式:</p><ul><li>Surge Mac 2 的增强模式</li><li>Proxifier 把终端设置为走代理模式</li><li>zsh 的配置模式</li></ul><p>其中可以在<code>.zshrc</code>的配置文件中:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">where</span> proxy</span></span><br><span class="line">proxy () &#123;</span><br><span class="line">  export http_proxy="http://127.0.0.1:8888"</span><br><span class="line">  export https_proxy="http://127.0.0.1:8888"</span><br><span class="line">  echo "HTTP Proxy on"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">where</span> noproxy</span></span><br><span class="line">noproxy () &#123;</span><br><span class="line">  unset http_proxy</span><br><span class="line">  unset https_proxy</span><br><span class="line">  echo "HTTP Proxy off"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候输入 Proxy 打开代理模式，关闭代理时输入 noproxy 即可.</p>]]></content>
      
      <categories>
          
          <category> mac OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>npm升级所有可更新包</title>
      <link href="/2018/08/07/npm%E5%8D%87%E7%BA%A7%E6%89%80%E6%9C%89%E5%8F%AF%E6%9B%B4%E6%96%B0%E5%8C%85/"/>
      <url>/2018/08/07/npm%E5%8D%87%E7%BA%A7%E6%89%80%E6%9C%89%E5%8F%AF%E6%9B%B4%E6%96%B0%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>使用npm管理node的包，可以使用<code>npm update &lt;name&gt;</code>对单个包升级，对于npm的版本大于 <code>2.6.1</code>,可以使用命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g</span><br></pre></td></tr></table></figure><p> 这样升级全部的包</p><p>如果上述不太方便, 还可以使用<code>shell脚本</code>和<code>npm-ckeck</code></p><h3 id="shell_脚本">shell 脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">set -e</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">set</span> -x</span></span><br><span class="line">for package in $(npm -g outdated --parseable --depth=0 | cut -d: -f2)</span><br><span class="line">do</span><br><span class="line">    npm -g install "$package"</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="npm-check">npm-check</h3><p><a href="https://www.npmjs.com/package/npm-check" target="_blank" rel="noopener">npm-check</a>是用来检查npm依赖包是否有更新，错误以及不在使用的，我们也可以使用npm-check进行包的更新。</p><p>安装npm-check：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-check</span><br></pre></td></tr></table></figure><p>检查npm包的状态:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm-check -u -g</span><br></pre></td></tr></table></figure><p>通过上下键可以移动光标，使用空格键可以选择需要处理的包，回车直接进行处理。</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>macOS 升级JDK至1.8</title>
      <link href="/2018/08/02/macOS-%E5%8D%87%E7%BA%A7JDK%E8%87%B31-8/"/>
      <url>/2018/08/02/macOS-%E5%8D%87%E7%BA%A7JDK%E8%87%B31-8/</url>
      <content type="html"><![CDATA[<p>Macbook Pro原生自带的Java JDK版本是1.6，而有的时候呢需要高一点的版本，这时候就需要升级JDK的版本。</p><p>通过<code>java -version</code>可以查看当前的版本:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java version "1.6.0_65"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.6.0_65-b14-468-11M4833)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 20.65-b04-468, mixed mode)</span><br></pre></td></tr></table></figure><ol><li><p>首先去下载<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">Java SE Developent Kit</a>，下载完成后安装上，安装好的jdk在这个位置:<code>/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents</code></p></li><li><p>然后去苹果的官网下载最新的java版本 <a href="https://support.apple.com/en-us/HT204036" target="_blank" rel="noopener">Java From Apple</a>,下载完成安装上以后可以在 系统偏好设置–&gt;Java–&gt;Java控制面板 中查看Java相关的信息。</p></li><li><p>去JavaFramework索引目录下修改当前的jdk引用路径:<code>cd /System/Library/Frameworks/JavaVM.framework/Versions</code></p></li><li><p>移除旧的引用:<code>sudo rm CurrentJDK</code>，如果你的系统是最新的<code>10.13</code>的话，会有这个提示：<code>rm: CurrentJDK: Operation not permitted</code>。</p><blockquote><p>这是因为<code>EI Capitan</code>加入了<code>Rootless机制</code>，不再能够随心所欲的读写很多路径下得内容了，即使是设置了<code>root</code>权限也不行。 苹果这样做也是为了用户的安全考虑，避免用户误删文件，当然也能够在一定程度下减小恶意软件对用户造成危害的几率。 但是这是我们自己需要这样的操作怎么办呢 ？苹果也考虑到了大家的需求，可以这么做：</p><p><strong>1).</strong> 重启电脑，在将要启动的时候按住 <code>Command + R</code>键，进入恢复模式； </p><p><strong>2).</strong> 选择菜单栏中得使用工具，在其中打开终端；</p><p><strong>3).</strong> 输入 <code>csrutil disable</code>，暂时关闭<code>Rootless</code>； </p><p><strong>4).</strong> 重启即可继续操作。</p><p><strong>5).</strong> 如果想要恢复，可以再次重启并进入终端，输入 <code>csrutil enable</code> 即可。</p></blockquote></li><li><p>删除 <code>CurrentJDK</code> 后，不要离开当前目录，添加新的jdk引用路径：<code>sudo ln -s /Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents CurrentJDK</code></p></li></ol>]]></content>
      
      <categories>
          
          <category> mac OS </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>国内外主流android第三方服务</title>
      <link href="/2018/08/01/%E5%9B%BD%E5%86%85%E5%A4%96%E4%B8%BB%E6%B5%81android%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1/"/>
      <url>/2018/08/01/%E5%9B%BD%E5%86%85%E5%A4%96%E4%B8%BB%E6%B5%81android%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p><strong>统计分析</strong></p><p>国内：Talking Data, 可惜友盟现在启动就带上阿里全家桶。</p><p>国外: Flurry, 国外统计分析系统的标杆，免费的。</p><p><strong>Crash分析</strong></p><p>国内: 腾讯Bugly, 号称全球唯一自带ANR收集，其实原理很简单，不知别家为何不做。</p><p>国外: Crashlytics, 已经收归Twitter Fabric开发者工具集，免费好用。</p><p><strong>推送</strong></p><p>国内: LeanCloud，这个没实际用过，身边朋友反馈很好。</p><p>国外: Parse, 正如覃超所说,FB也在用，30qps免费限制，一般中小应用够用。</p><p><strong>分享</strong></p><p>国内: ShareSDK，专业做社交分享。</p><p>国外: 各社交平台自家SDK, 注意不同国家主流社交平台不同。</p><p><strong>评论</strong></p><p>国内：畅言, 基本抄的Disqus, 免费，算是良心产品了。</p><p>国外：Disqus, 基本不用考虑其他家的，虽然确实有竞品。</p><p><strong>广告变现</strong></p><p>国内：百度 or 广点通，两个效果差不多。</p><p>国外：FB or Google，做native广告，效果最佳。</p><p><strong>支付</strong></p><p>国内: 支付宝, 微信</p><p>国外: payssion, 专业做海外跨境收款的，能省很多事。</p><p><strong>短信验证</strong></p><p>国内：没用过，Google找一家最便宜的就行。</p><p>国外：Fabric Digits, twitter出品，居然不要钱。</p><p><strong>灰度测试</strong></p><p>国内：AppAdhoc，移动AB测试国内最专业的一家。</p><p>国外：optimizely, 支持Android, iOS, 直接在线改UI做AB测试, 三观都要颠覆了。</p><p><strong>云测</strong></p><p>国内：百度云测试。</p><p>国外：test in, 其实百度的也跑，国内的Android设备都卖到国外去了。</p><p><strong>客服</strong></p><p>国内：微客服, 有免费额度，中小应用够用。</p><p>国外：helpshift，国外最专业的客服平台。</p><p><strong>推广</strong></p><p>国内：这个真不了解。</p><p>国外：Appsflyer, 海外推广为数不多的选择之一。</p><p><strong>可视化分析</strong></p><p>国内：growingio, 还在内测中，linkedin数据分析大牛回国创业，据说黑科技，可以直接在app上实时查看各种转化率数据。</p><p>国外：appsee, 绝对黑科技，PM最爱。</p><p><strong>网络优化</strong></p><p>国外：TwinPrime, 颇具特色的网络优化服务。</p><p>国内：暂时还没发现同类产品，不过TwinPrime理论上是支持全球的。</p>]]></content>
      
      <categories>
          
          <category> Apple </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>相似图片检测：感知哈希算法之dHash的Python实现</title>
      <link href="/2018/07/20/%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E6%A3%80%E6%B5%8B%EF%BC%9A%E6%84%9F%E7%9F%A5%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%B9%8BdHash%E7%9A%84Python%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/07/20/%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E6%A3%80%E6%B5%8B%EF%BC%9A%E6%84%9F%E7%9F%A5%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%B9%8BdHash%E7%9A%84Python%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>根据这篇文章<a href="https://blog.csdn.net/haluoluo211/article/details/52769325https://blog.csdn.net/haluoluo211/article/details/52769325" target="_blank" rel="noopener">相似图片检测：感知哈希算法之dHash的Python实现</a></p><p>实现步骤如下：</p><p>1、将图片缩放至9*8像素，即一共有8行，每行有9个像素</p><p>2、将缩放的图转为灰度图，每个像素由一个0到255的整数表示灰度</p><p>3、将每一行灰度值与第二个灰度值进行比较，如果大于则用1表示，否则用0表示，不同行间的灰度值不进行比较，比较后的结果可以得到由1、0组成的64个数值，该64个数值可以看作是该图片的指纹</p><p>4、将两张图的指纹进行比较，即将两个指纹相同位置的数值进行对比，如果相同则不计数，如不同则计数1，最终比较结果，如果计数小于5，即视为相同或相似的图片，如果大于10则视为两张不同的照片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /user/bin/python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image  <span class="comment"># 导入pillow库下的image模块，主要用于图片缩放、图片灰度化、获取像素灰度值</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">'/Users/test/Downloads/photo'</span></span><br><span class="line">error_path = <span class="string">'/Users/test/Downloads/HEIC/error'</span></span><br><span class="line">res_path = <span class="string">'/Users/test/Downloads/HEIC/result.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># image为图片的路径，resize_width为缩放图片的宽度，resize_heith为缩放图片的高度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grayscale_Image</span><span class="params">(image, resize_width=<span class="number">9</span>, resize_heith=<span class="number">8</span>)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        im = Image.open(image)  <span class="comment"># 使用Image的open方法打开图片</span></span><br><span class="line">        smaller_image = im.resize((resize_width, resize_heith))  <span class="comment"># 将图片进行缩放</span></span><br><span class="line">        grayscale_image = smaller_image.convert(<span class="string">'L'</span>)  <span class="comment"># 将图片灰度化</span></span><br><span class="line">        <span class="keyword">return</span> grayscale_image</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(image)</span><br><span class="line">        shutil.move(image, error_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_String</span><span class="params">(image, resize_width=<span class="number">9</span>, resize_heith=<span class="number">8</span>)</span>:</span></span><br><span class="line">    hash_string = <span class="string">""</span>  <span class="comment"># 定义空字符串的变量，用于后续构造比较后的字符串</span></span><br><span class="line">    pixels = list(grayscale_Image(image, resize_width, resize_heith).getdata())</span><br><span class="line">    <span class="comment"># 上一个函数grayscale_Image()缩放图片并返回灰度化图片，.getdata()方法可以获得每个像素的灰度值，使用内置函数list()将获得的灰度值序列化</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(<span class="number">1</span>, len(pixels) + <span class="number">1</span>):  <span class="comment"># 获取pixels元素个数，从1开始遍历</span></span><br><span class="line">        <span class="keyword">if</span> row % resize_width:  <span class="comment"># 因不同行之间的灰度值不进行比较，当与宽度的余数为0时，即表示当前位置为行首位，我们不进行比较</span></span><br><span class="line">            <span class="keyword">if</span> pixels[row - <span class="number">1</span>] &gt; pixels[row]:  <span class="comment"># 当前位置非行首位时，我们拿前一位数值与当前位进行比较</span></span><br><span class="line">                hash_string += <span class="string">'1'</span>  <span class="comment"># 当为真时，构造字符串为1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hash_string += <span class="string">'0'</span>  <span class="comment"># 否则，构造字符串为0</span></span><br><span class="line">        <span class="comment"># 最后可得出由0、1组64位数字字符串，可视为图像的指纹</span></span><br><span class="line">    <span class="keyword">return</span> int(hash_string, <span class="number">2</span>)  <span class="comment"># 把64位数当作2进制的数值并转换成十进制数值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Difference</span><span class="params">(dhash1, dhash2)</span>:</span></span><br><span class="line">    difference = dhash1 ^ dhash2  <span class="comment"># 将两个数值进行异或运算</span></span><br><span class="line">    <span class="keyword">return</span> bin(difference).count(<span class="string">'1'</span>)  <span class="comment"># 异或运算后计算两数不同的个数，即个数&lt;5，可视为同一或相似图片</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    path_list = []</span><br><span class="line">    path_dic = &#123;&#125;</span><br><span class="line">    pic_list = []</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">        <span class="keyword">if</span> file.endswith(<span class="string">'.jpg'</span>) <span class="keyword">or</span> file.endswith(<span class="string">'.JPG'</span>) <span class="keyword">or</span> file.endswith(<span class="string">'.PNG'</span>) <span class="keyword">or</span> file.endswith(<span class="string">'.png'</span>):</span><br><span class="line">            pic_list.append(file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> pic_list:</span><br><span class="line">        file_path = os.path.join(path, file)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            Image.open(file_path)</span><br><span class="line"></span><br><span class="line">            path_list.append(file_path)</span><br><span class="line"></span><br><span class="line">            tmp_hash = hash_String(file_path)</span><br><span class="line">            path_dic[file_path] = tmp_hash</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            shutil.move(file_path, error_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># for key, value in path_dic.items():</span></span><br><span class="line">    <span class="comment">#     print(key, value)</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> path_dic.values():</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> path_dic.values():</span><br><span class="line">            tmp = Difference(i, j)</span><br><span class="line">            <span class="keyword">if</span> tmp &lt;= <span class="number">5</span>:</span><br><span class="line">                <span class="comment"># print(i, j)</span></span><br><span class="line">                <span class="comment"># list(dicxx.keys())[list(dicxx.values()).index("001")]</span></span><br><span class="line">                var_i = list(path_dic.keys())[list(path_dic.values()).index(i)]</span><br><span class="line">                var_j = list(path_dic.keys())[list(path_dic.values()).index(j)]</span><br><span class="line">                <span class="keyword">if</span> var_i != var_j:</span><br><span class="line">                    print(var_i, var_j)</span><br><span class="line">                    <span class="keyword">with</span> open(res_path, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        f.write(var_i)</span><br><span class="line">                        f.write(var_j)</span><br><span class="line">                        f.write(<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><p>​    </p><p>​    </p><p>​    </p><p>​    </p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux 解决Vi输入中文乱码的问题</title>
      <link href="/2018/06/19/Linux-%E8%A7%A3%E5%86%B3Vi%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/06/19/Linux-%E8%A7%A3%E5%86%B3Vi%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>在VPS 中, 有时vi 打开一个文件中, 中文会显示乱码, 用locale 查看如下, </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ locale</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">LANGUAGE=en_US.UTF-8</span><br><span class="line">LC_CTYPE="en_US.UTF-8"</span><br><span class="line">LC_NUMERIC="en_US.UTF-8"</span><br><span class="line">LC_TIME="en_US.UTF-8"</span><br><span class="line">LC_COLLATE="en_US.UTF-8"</span><br><span class="line">LC_MONETARY="en_US.UTF-8"</span><br><span class="line">LC_MESSAGES="en_US.UTF-8"</span><br><span class="line">LC_PAPER="en_US.UTF-8"</span><br><span class="line">LC_NAME="en_US.UTF-8"</span><br><span class="line">LC_ADDRESS="en_US.UTF-8"</span><br><span class="line">LC_TELEPHONE="en_US.UTF-8"</span><br><span class="line">LC_MEASUREMENT="en_US.UTF-8"</span><br><span class="line">LC_IDENTIFICATION="en_US.UTF-8"</span><br><span class="line">LC_ALL=en_US.UTF-8</span><br></pre></td></tr></table></figure><p>其实vi中输入中文乱码与上述系统语言编码无关，是vi自身的环境变量设置出了问题, 解决办法如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~ vi .viminfo  # ubuntu 18</span><br><span class="line">encoding=latin1#修改成下面</span><br><span class="line">encoding=utf-8</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Red Hat Linux卸载旧版本的JDK安装新版本的JDK</title>
      <link href="/2018/06/14/Red-Hat-Linux%E5%8D%B8%E8%BD%BD%E6%97%A7%E7%89%88%E6%9C%AC%E7%9A%84JDK%E5%AE%89%E8%A3%85%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84JDK/"/>
      <url>/2018/06/14/Red-Hat-Linux%E5%8D%B8%E8%BD%BD%E6%97%A7%E7%89%88%E6%9C%AC%E7%9A%84JDK%E5%AE%89%E8%A3%85%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84JDK/</url>
      <content type="html"><![CDATA[<p>做一个安装和记录的流程:</p><ol><li><p>查看内核</p><p><code>uname -a</code>来判断是32 位还是64 位还是其余什么的机器</p></li><li><p>查看java 版本</p><p><code>rpm -qa | grep gcj</code></p></li><li><p>卸载java</p><p><code>yum -y remove javaname</code></p></li><li><p>给新的java 程序分配权限</p><p><code>chmod +x newjavaname</code></p></li><li><p>执行安装程序</p><p><code>./newjavaname</code></p></li><li><p>设置path与classpath</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/newjavaname</span><br><span class="line">export path=$path:$JAVA_HOME/bin;</span><br><span class="line">export path=$path:$JAVA_HOME/jre/bin</span><br><span class="line">export classpath=.:/usr/java/newjavaname/lib:/usr/java/newjavaname/jre/lib:$CLASSPATH</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>mac OS 设置单个应用语言的方法</title>
      <link href="/2018/05/04/mac-OS-%E8%AE%BE%E7%BD%AE%E5%8D%95%E4%B8%AA%E5%BA%94%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2018/05/04/mac-OS-%E8%AE%BE%E7%BD%AE%E5%8D%95%E4%B8%AA%E5%BA%94%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>​    最近使用office时候发现了一个问题，由于电脑设置默认语言为英文。office也会自动切换为英文语言。想单独改office为中文版。找了一圈没找到方法，搜索了半天，发现很多人无法解决，要么就是修改电脑默认语言，还好最后在office官网找到了一个答案。</p><p><a href="https://answers.microsoft.com/en-us/msoffice/forum/msoffice_other-mso_mac-mso_mac2016/how-to-manually-change-the-language-used-in-office/abe2a9c1-f550-45de-9d0e-58b99f206c41" target="_blank" rel="noopener">关于office 语言修改</a></p><p>可以使用以下命令修改:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.microsoft.Word AppleLanguages '("zh-cn")'</span><br><span class="line">defaults write com.microsoft.Excel AppleLanguages '("zh-cn")'</span><br><span class="line">defaults write com.microsoft.Powerpoint AppleLanguages '("zh-cn")'</span><br></pre></td></tr></table></figure><p>如上, 其余的应用, 也可以如此设置.</p><p>如果不想要这个语言设置了, 可以使用如下设置:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults delete com.apple.AddressBook AppleLanguages</span><br></pre></td></tr></table></figure><p> 其实查询语言的ID 的为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdls -name kMDItemCFBundleIdentifier /Applications/Microsoft\ Word.app</span><br></pre></td></tr></table></figure><p> 结果为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kMDItemCFBundleIdentifier = "com.microsoft.Word"</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> mac OS </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>获取小程序的openid与unionid</title>
      <link href="/2018/04/16/%E8%8E%B7%E5%8F%96%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84openid%E4%B8%8Eunionid/"/>
      <url>/2018/04/16/%E8%8E%B7%E5%8F%96%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84openid%E4%B8%8Eunionid/</url>
      <content type="html"><![CDATA[<p>需要发布的小程序基本都要用到openid，这里保存一下自己的代码。<br>一种是不需要服务器的，通过微信提供的接口简单获取openid；一种是有服务器的情况下，获取openid和一些加密的信息，如unionid。</p><h4 id="简单获取openid">简单获取openid</h4><h6 id="这里的简单获取，是指调试的时候可以使用，正常的情况应该是通过服务器来获取">这里的简单获取，是指调试的时候可以使用，正常的情况应该是通过服务器来获取</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">wx.login(&#123;</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> code = res.code; <span class="comment">// 复制给变量就可以打印了，醉了</span></span><br><span class="line">    <span class="keyword">if</span> (res.code) &#123;</span><br><span class="line">      wx.getUserInfo(&#123;</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// userInfo 只存储个人的基础数据</span></span><br><span class="line">          wx.setStorageSync(<span class="string">'userInfo'</span>, res.userInfo);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 只获取openid的话，自己就可以</span></span><br><span class="line">          that.getOpenid(code);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'获取用户登录态失败！'</span> + res.errMsg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自己获取openid和session_key</span></span><br><span class="line">  <span class="comment">// 微信提供的接口，其中appid和secret都是放在globalData中的</span></span><br><span class="line">  getOpenid: <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: <span class="string">'https://api.weixin.qq.com/sns/jscode2session?appid='</span> + that.globalData.appid + <span class="string">'&amp;secret='</span> + that.globalData.secret + <span class="string">'&amp;js_code='</span> + code + <span class="string">'&amp;grant_type=authorization_code'</span>,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">        obj.openid = res.data.openid;</span><br><span class="line">        obj.expires_in = <span class="built_in">Date</span>.now() + res.data.expires_in;</span><br><span class="line">        obj.session_key = res.data.session_key; </span><br><span class="line">        wx.setStorageSync(<span class="string">'openid'</span>, obj.openid);<span class="comment">// 存储openid  </span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h4 id="通过服务器获取openid和unionid">通过服务器获取openid和unionid</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">wx.login(&#123;</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> code = res.code; <span class="comment">// 复制给变量就可以打印了，醉了</span></span><br><span class="line">    <span class="keyword">if</span> (res.code) &#123;</span><br><span class="line">      wx.getUserInfo(&#123;</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// userInfo 只存储个人的基础数据</span></span><br><span class="line">          wx.setStorageSync(<span class="string">'userInfo'</span>, res.userInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求自己的服务器，解密用户信息 获取unionId等加密信息</span></span><br><span class="line">        wx.request(&#123;</span><br><span class="line">          url: url.host + <span class="string">'/decodeUserInfo'</span>,<span class="comment">//自己的服务接口地址</span></span><br><span class="line">          method: <span class="string">'POST'</span>,</span><br><span class="line">          header: &#123;</span><br><span class="line">          <span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          data: &#123;</span><br><span class="line">          encryptedData: res.encryptedData,</span><br><span class="line">          iv: res.iv,</span><br><span class="line">          code: code,</span><br><span class="line">          &#125;,</span><br><span class="line">          success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//4.解密成功后 获取自己服务器返回的结果</span></span><br><span class="line">            <span class="keyword">if</span> (data.data.code == <span class="number">200</span>) &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">'解密成功'</span>);</span><br><span class="line">              <span class="keyword">var</span> encryptInfo = data.data.data;</span><br><span class="line">                    </span><br><span class="line">              wx.setStorageSync(<span class="string">'openid'</span>, encryptInfo.openId); <span class="comment">// 单独存储openid</span></span><br><span class="line">              wx.setStorageSync(<span class="string">'encryptInfo'</span>, encryptInfo); <span class="comment">// 存储解密之后的数据</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">'解密失败'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(res);</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'请求错误'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'获取用户登录态失败！'</span> + res.errMsg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="最后，可以把这个方法给暴露出来，让其他界面调用">最后，可以把这个方法给暴露出来，让其他界面调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给其他界面调用，用来获取用户信息，防止没有获取成功</span></span><br><span class="line">  getUserInfo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> userInfo = wx.getStorageSync(<span class="string">'userInfo'</span>) || &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> openid = wx.getStorageSync(<span class="string">'openid'</span>) || <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!userInfo.nickName || !openid) &#123;</span><br><span class="line">      that.getData();  <span class="comment">// 将wx.login(&#123;&#125;) 方法放入其中</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其实获取unionid的方法主要在后台实现，需要根据微信提供的方法去解密，具体的解密文档可以参考以下内容: <a href="https://link.jianshu.com/?t=http%3A%2F%2Fblog.csdn.net%2Fqq_27626333%2Farticle%2Fdetails%2F54614037" target="_blank" rel="noopener">微信小程序获取用户openid</a> 与 <a href="https://link.jianshu.com/?t=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F25124713" target="_blank" rel="noopener">微信小程序联盟：微信小程序之获取并解密用户数据（获取openId、unionId）</a></p>]]></content>
      
      <categories>
          
          <category> WeiXin </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>VPS 安全措施</title>
      <link href="/2018/04/15/VPS-%E5%AE%89%E5%85%A8%E6%8E%AA%E6%96%BD/"/>
      <url>/2018/04/15/VPS-%E5%AE%89%E5%85%A8%E6%8E%AA%E6%96%BD/</url>
      <content type="html"><![CDATA[<p>一个部署在公网的VPS, 面临不断的网络扫描和攻击, 可以参考如下步骤.</p><h5 id="1-_配置SSH安全访问密钥，关闭密码登录">1. 配置SSH安全访问密钥，关闭密码登录</h5><p>a.参考<a href="https://link.jianshu.com/?t=http://edges.blog.51cto.com/705035/581346/" target="_blank" rel="noopener">SecureCRT密钥连接Linux</a>，使用SecureCRT在本机生成公私密钥<br>b.在VPS对应的用户目录下，新建.ssh文件夹，并上传公钥，然后更名为authorized_keys，并修改权限，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.ssh #如果当前用户目录下没有 .ssh 目录，就先创建目录</span><br><span class="line">chmod 700 ~/.ssh</span><br><span class="line">mv id_rsa.pub ~/.ssh</span><br><span class="line">cd .ssh</span><br><span class="line">mv id_rsa.pub authorized_keys</span><br><span class="line">chmod 600 authorized_keys</span><br></pre></td></tr></table></figure><p>c.关闭ssh密码登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">PasswordAuthentication no #此处改为no</span><br></pre></td></tr></table></figure><p>d.【可选】添加普通用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd roubin</span><br><span class="line">passwd roubin</span><br></pre></td></tr></table></figure><p>e.【可选】禁止root登陆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">PermitRootLogin no  #此处改为no</span><br></pre></td></tr></table></figure><p>f.重启ssh服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><h5 id="2-更改SSH端口及设置">2.更改SSH端口及设置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">Port 22222  #更改默认端口号</span><br><span class="line">MaxAuthTries 5</span><br><span class="line">PermitEmptyPasswords no  #不允许空密码</span><br><span class="line">service sshd reload</span><br><span class="line">iptables -I INPUT -p tcp --dport 22222 -j ACCEPT #CentOS 6 中防火墙开启对应端口</span><br><span class="line">firewall-cmd --zone=public --add-port=22222/tcp --permanent #CentOS 7 中防火墙开启对应端口</span><br></pre></td></tr></table></figure><h5 id="3-锁定口令文件">3.锁定口令文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# chattr +i /etc/passwd</span><br><span class="line">[root@localhost /]# chattr +i /etc/shadow</span><br><span class="line">[root@localhost /]# chattr +i /etc/group</span><br><span class="line">[root@localhost /]# chattr +i /etc/gshadow</span><br></pre></td></tr></table></figure><h5 id="4-安装fail2ban防止暴力破解">4.安装fail2ban防止暴力破解</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apt install -y fail2ban</span><br><span class="line">cp -pf /etc/fail2ban/jail.conf /etc/fail2ban/jail.local</span><br><span class="line">vim /etc/fail2ban/jail.local</span><br><span class="line"></span><br><span class="line"> [sshd]</span><br><span class="line">enabled = trueport = 22222</span><br><span class="line">logpath = %(sshd_log)s</span><br><span class="line">backend = %(sshd_backend)s</span><br><span class="line">filter = sshd</span><br><span class="line">action = iptables[name=SSH, port=22222, protocol=tcp] sendmail-whois[name=SSH, dest=root, sender=fail2ban@example.com]</span><br><span class="line">logpath = /var/log/secure</span><br><span class="line">maxretry = 3</span><br></pre></td></tr></table></figure><h5 id="5-启用iptables">5.启用iptables</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清除已有iptables规则</span></span><br><span class="line">iptables -F</span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许本地回环接口(即运行本机访问本机)</span></span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许已建立的或相关连的通行</span></span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line"><span class="meta">#</span><span class="bash">允许所有本机向外的访问</span></span><br><span class="line">iptables -A OUTPUT -j ACCEPT</span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许访问22222(SSH)端口，以下几条相同，分别是22222,80,443端口的访问</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22222 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 443 -j ACCEPT</span><br><span class="line"><span class="meta">#</span><span class="bash">如果有其他端口的话，规则也类似，稍微修改上述语句就行</span></span><br><span class="line"><span class="meta">#</span><span class="bash">允许ping</span></span><br><span class="line">iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT</span><br><span class="line"><span class="meta">#</span><span class="bash">禁止其他未允许的规则访问（注意：如果22端口未加入允许规则，SSH链接会直接断开。）</span></span><br><span class="line">iptables -A INPUT -j REJECT </span><br><span class="line">iptables -A FORWARD -j REJECT</span><br><span class="line"><span class="meta">#</span><span class="bash">保存防火墙规则</span></span><br><span class="line">service iptables save</span><br><span class="line"><span class="meta">#</span><span class="bash">设置防火墙开机启动</span></span><br><span class="line">chkconfig --level 345 iptables on</span><br></pre></td></tr></table></figure><h5 id="6-禁用ipv6">6.禁用ipv6</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">编辑/etc/sysconfig/network添加行：</span></span><br><span class="line">NETWORKING_IPV6=no</span><br><span class="line"><span class="meta">#</span><span class="bash">修改/etc/hosts,把ipv6本地主机名解析的注释掉（可选）：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">::1 localhost localhost6 localhost6.localdomain6</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">禁止系统加载ipv6相关模块，创建modprobe关于禁用ipv6的设定文件/etc/modprobe.d/disable_ipv6.conf(名字随便起)（RHEL6.0之后没有/etc/modprobe.conf这个文件），内容如下，三选其一（本次使用的第一种）：</span></span><br><span class="line">alias net-pf-10 off</span><br><span class="line">options ipv6 disable=1</span><br><span class="line"><span class="meta">#</span><span class="bash">禁止开机启动</span></span><br><span class="line">chkconfig ip6tables off</span><br><span class="line"><span class="meta">#</span><span class="bash">查看ipv6是否被禁用</span></span><br><span class="line">lsmod | grep -i ipv6</span><br><span class="line">ifconfig | grep -i inet6</span><br></pre></td></tr></table></figure><h5 id="7-阻止百度收录真实位置">7.阻止百度收录真实位置</h5><p>恩，免得上门查水表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line">0.0.0.0 api.map.baidu.com</span><br><span class="line">0.0.0.0 ps.map.baidu.com</span><br><span class="line">0.0.0.0 sv.map.baidu.com</span><br><span class="line">0.0.0.0 offnavi.map.baidu.com</span><br><span class="line">0.0.0.0 newvector.map.baidu.com</span><br><span class="line">0.0.0.0 ulog.imap.baidu.com</span><br><span class="line">0.0.0.0 newloc.map.n.shifen.com</span><br><span class="line"></span><br><span class="line">:: api.map.baidu.com</span><br><span class="line">:: ps.map.baidu.com</span><br><span class="line">:: sv.map.baidu.com</span><br><span class="line">:: offnavi.map.baidu.com</span><br><span class="line">:: newvector.map.baidu.com</span><br><span class="line">:: ulog.imap.baidu.com</span><br><span class="line">:: newloc.map.n.shifen.com</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Pyhton 去掉字符串前边的u</title>
      <link href="/2018/04/08/Pyhton-%E5%8E%BB%E6%8E%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E8%BE%B9%E7%9A%84u/"/>
      <url>/2018/04/08/Pyhton-%E5%8E%BB%E6%8E%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%89%8D%E8%BE%B9%E7%9A%84u/</url>
      <content type="html"><![CDATA[<p>在用<code>json.load</code>导入json 格式的文件的时候, 打印出来的dict, 会显示的是unicode 编码形式, 下面一种方法可以利用检测编码的形式把<code>u</code>去掉.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(colnames)):</span><br><span class="line">    <span class="keyword">print</span> type(rowData[i])</span><br><span class="line">    <span class="keyword">if</span> type(rowData[i]) == float :<span class="comment">#如果是字符串类型，则进行编码</span></span><br><span class="line">      <span class="keyword">print</span> colnames[i]</span><br><span class="line">      eachRowData[colnames[i].encode(<span class="string">'ascii'</span>)] = rowData[i]</span><br><span class="line">          <span class="comment">#.encode('raw_unicode_escape')</span></span><br><span class="line">    <span class="keyword">elif</span> type(rowData[i]) == unicode:</span><br><span class="line">        eachRowData[colnames[i].encode(<span class="string">'ascii'</span>)] = rowData[i].encode(<span class="string">'ascii'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list.append(eachRowData)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>fail2ban阻止SSH暴力破解</title>
      <link href="/2018/02/06/fail2ban%E9%98%BB%E6%AD%A2SSH%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
      <url>/2018/02/06/fail2ban%E9%98%BB%E6%AD%A2SSH%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>引用:<a href="https://blog.linuxeye.cn/454.html" target="_blank" rel="noopener">fail2ban阻止SSH暴力破解</a></p><p>​    fail2ban是由Python语言开发监控软件，通过监控系统日志的登录信息来调用iptables屏蔽相应登录IP，以阻止某个IP（fail2ban读对应日志文件，Debian/Ubuntu:/var/log/auth.log、CentOS/Redhat:/var/log/secure）不停尝试密码。fail2ban在防御对SSH服务器的暴力密码破解上非常有用。经过网友强烈要求，已经集成到《<a href="https://blog.linuxeye.cn/wp-content/themes/begin/inc/go.php?url=https://oneinstack.com" target="_blank" rel="noopener">OneinStack</a>》</p><a id="more"></a><h3 id="安装配置Fail2ban">安装配置Fail2ban</h3><p>使用《<a href="https://blog.linuxeye.cn/wp-content/themes/begin/inc/go.php?url=https://oneinstack.com" target="_blank" rel="noopener">OneinStack</a>》，内置<a href="https://blog.linuxeye.cn/454.html" target="_blank" rel="noopener">fail2ban</a>，一键安装并设置好即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget mirrors.linuxeye.com/oneinstack.tar.gz</span><br><span class="line">pushd oneinstack</span><br><span class="line">./addons.sh  #选择11，安装fail2ban</span><br></pre></td></tr></table></figure><p><img src="https://static.oneinstack.com/images/addons.png" alt="tu"></p><h3 id="Fail2ban配置文件说明">Fail2ban配置文件说明</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@OneinStack ~]# cat /etc/fail2ban/jail.local</span><br><span class="line">[DEFAULT]</span><br><span class="line">ignoreip = 127.0.0.1/8  #指定哪些地址可以忽略 fail2ban 防御</span><br><span class="line">bantime  = 86400         #客户端主机被禁止的时长（秒）</span><br><span class="line">findtime = 600             #查找失败次数的时长（秒）</span><br><span class="line">maxretry = 5                 #客户端主机被禁止前允许失败的次数</span><br><span class="line">[ssh-iptables]</span><br><span class="line">enabled = true</span><br><span class="line">filter  = sshd</span><br><span class="line">action  = iptables[name=SSH, port=22, protocol=tcp]</span><br><span class="line">logpath = /var/log/secure</span><br></pre></td></tr></table></figure><p>fail2ban会自动禁止在最近10分钟内有超过5次访问尝试失败的任意IP地址。这个IP地址将会在24小时内一直被禁止访问SSH服务。安装设置启用后，Fail2ban会在iptables添加相关规则，如下：</p><p><img src="https://blog.linuxeye.cn/wp-content/uploads/2017/03/fail2ban_iptables.png" alt="tu"></p><h3 id="fail2ban测试">fail2ban测试</h3><p>ssh 你的服务器IP，输错密码5次以上，查看日志/var/log/fail2ban.log [ssh-iptables] Ban 91.195.103.166即被禁用</p><p><img src="https://blog.linuxeye.cn/wp-content/uploads/2017/03/fail2ban_test.png" alt=""></p><h3 id="fail2ban状态">fail2ban状态</h3><p><code>/usr/local/python/bin/fail2ban-client status ssh-iptables</code></p><p>显示出被禁止IP地址列表</p><p><img src="https://blog.linuxeye.cn/wp-content/uploads/2017/03/fail2ban_status.png" alt=""></p><h3 id="fail2ban解锁IP">fail2ban解锁IP</h3><p>为了解锁特定的IP地址命令：</p><p><code>/usr/local/python/bin/fail2ban-client set ssh-iptables unbanip 91.195.103.166</code></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>XML的有效性的检测</title>
      <link href="/2018/01/31/XML%E7%9A%84%E6%9C%89%E6%95%88%E6%80%A7%E7%9A%84%E6%A3%80%E6%B5%8B/"/>
      <url>/2018/01/31/XML%E7%9A%84%E6%9C%89%E6%95%88%E6%80%A7%E7%9A%84%E6%A3%80%E6%B5%8B/</url>
      <content type="html"><![CDATA[<p>XML文档的结构良好性验证，结构良好的xml文档，需要遵守下面这些规则：</p><ol><li>所有开始标签必须有对应的结束标签</li><li>元素可以嵌套，但是不可以重叠</li><li>有且只能有一个根元素</li><li>属性值必须使用引号</li><li>一个元素不能有两个同样属性名字的属性</li><li>注释不能出现在标签内部</li><li>没有转义的” &lt;” 或者” $”不能出现在元素和属性的字符中</li></ol><p>如何检查XML文档良构?</p><a id="more"></a><h5 id="方法一">方法一</h5><p>以ElementTree模块为例，直接使用parse方法。如果不报错，这表示该XML是良构的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xml.etree <span class="keyword">import</span> ElementTree <span class="keyword">as</span> ET  </span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    ET.parse(<span class="string">'test.xml'</span>)  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'这是一个良构的XML文档'</span>  </span><br><span class="line"><span class="keyword">except</span> Exception,e:  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'这不是一个良构的XML文档'</span>  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'可能原因：'</span>,e</span><br></pre></td></tr></table></figure><h5 id="方法二">方法二</h5><p>如果希望获取更加详细信息，可使用lxml模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  lxml.etree <span class="keyword">as</span> ET  </span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    ET.parse(<span class="string">'test.xml'</span>)  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'这是一个良构的XML文档'</span>  </span><br><span class="line"><span class="keyword">except</span> Exception,e:  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'这不是一个良构的XML文档'</span>  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'可能原因：'</span>,e</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>解决MySQL中文乱码方法</title>
      <link href="/2018/01/31/%E8%A7%A3%E5%86%B3MySQL%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E6%96%B9%E6%B3%95/"/>
      <url>/2018/01/31/%E8%A7%A3%E5%86%B3MySQL%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>MySQL会出现中文乱码的原因一般为以下几点：</p><ol><li>server本身设定问题，例如还停留在latin1</li><li>table的语系设定问题(包含character与collation)</li><li>客户端程式(例如php)的连线语系设定问题</li></ol><a id="more"></a><p>进入MySQL 查看当前的状态</p><p><img src="https://i.loli.net/2018/01/31/5a717fd1b305a.png" alt="Snipaste_2018-01-31_16-34-46.png"></p><p>默认的是客户端和服务器都用了latin1，所以会乱码。</p><p>解决的方法就是MySQL的字符串修改为utf8.</p><p>###第一种:</p><p>vim /etc/mysql/my.cnf 。<strong>(5.5以前系统)</strong></p><p>在<strong>client</strong>下面加入 ‘default-character-set=utf8’</p><p>在<strong>mysqld</strong>下面加入’default-character-set=utf8’</p><p>Notice：注意 如果修改后不能启动报错试试把’default-character-set=utf8’改为’character_set_server=utf8’，仅仅加入到mysqld下面的.client就不需要加了</p><p>###第二种:</p><p>vim /etc/mysql/my.cnf 。<strong>(5.5以后系统)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure><p>五、重启MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql stop   </span><br><span class="line">/etc/init.d/mysql start</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python批量删除特定后缀名的文件和目录</title>
      <link href="/2018/01/19/Python%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E7%89%B9%E5%AE%9A%E5%90%8E%E7%BC%80%E5%90%8D%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95/"/>
      <url>/2018/01/19/Python%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E7%89%B9%E5%AE%9A%E5%90%8E%E7%BC%80%E5%90%8D%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>利用 Python 在日常工作中，删除指定目录已经子目录下的特定后缀的文件名。</p><p>Python Version: 2.7</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取当前路径</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fileDir</span><span class="params">()</span> :</span></span><br><span class="line">    path = sys.path[ <span class="number">0</span> ]</span><br><span class="line">    print(path)</span><br><span class="line">    <span class="comment">#判断为脚本文件还是编译后文件，如果是脚本文件则返回脚本目录，否则返回编件译后的文件路径</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isdir( path ) :</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    <span class="keyword">elif</span> os.path.isfile( path ) :</span><br><span class="line">        <span class="keyword">return</span> os.path.dirname( path )</span><br><span class="line">    </span><br><span class="line"><span class="comment">#获取文件后缀名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">suffix</span><span class="params">(fileName, *suffixName)</span> :</span></span><br><span class="line">    array = map(fileName.endswith, suffixName)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">True</span> <span class="keyword">in</span> array :</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#删除目录下扩展名为.exe,.bak的文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteFile</span><span class="params">()</span> :</span></span><br><span class="line">    target_dir = fileDir()</span><br><span class="line">    <span class="keyword">for</span> root, dir_names, file_names <span class="keyword">in</span> os.walk(target_dir):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> file_names:</span><br><span class="line">            target_file = os.path.join(root, file)</span><br><span class="line">            <span class="keyword">if</span> suffix(file, <span class="string">'.doc'</span>, <span class="string">'.xls'</span>):</span><br><span class="line">                os.remove(target_file)</span><br><span class="line">            <span class="comment"># 文件夹名字</span></span><br><span class="line">            <span class="keyword">if</span> file == <span class="string">'a'</span>:</span><br><span class="line">                shutil.rmtree(os.path.join(root, dir_names))</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span> :</span><br><span class="line">    deleteFile()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>pyinstaller教程</title>
      <link href="/2018/01/01/pyinstaller%E6%95%99%E7%A8%8B/"/>
      <url>/2018/01/01/pyinstaller%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>简介:PyInstaller可以用来打包python应用程序，打包完的程序就可以在没有安装Python解释器的机器上运行了。PyInstaller支持Python 2.7和Python 3.3+。可以在Windows、Mac OS X和Linux上使用，但是并不是跨平台的，而是说你要是希望打包成.exe文件，需要在Windows系统上运行PyInstaller进行打包工作；打包成mac app，需要在Mac OS上使用。</p><a id="more"></a><h3 id="安装">安装</h3><p><strong>Linux or Mac</strong></p><p>可以直接用pip 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><p>版本更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pyinstaller</span><br></pre></td></tr></table></figure><p><strong>Window</strong></p><p>Windows上运行PyInstaller还需要PyWin32或者pypiwin32，其中pypiwin32在你安装PyInstaller的时候会自动安装。</p><h3 id="使用PyInstaller">使用PyInstaller</h3><p>PyInstaller分析你的python程序，找到所有的依赖项。然后将依赖文件和python解释器放到一个文件夹下或者一个可执行文件中。</p><h4 id="打包成一个文件夹">打包成一个文件夹</h4><p>当使用PyInstaller打包的时候，默认生成一个文件夹，文件夹中包含所有依赖项，以及可执行文件。打包成文件夹的好处就是debug的时候可以清楚的看到依赖项有没有包含。另一个好处是更新的时候，只需要更新可执行文件就可以了。当然缺点也很明显，不方便，不易管理。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller script.py</span><br></pre></td></tr></table></figure><p>那么它是如何工作的呢？PyInstaller的引导程序是一个二进制可执行程序。当用户启动你的程序的时候，PyInstaller的引导程序开始运行，首先创建一个临时的Python环境，然后通过Python解释器导入程序的依赖，当然他们都在同一个文件夹下。</p><h4 id="打包成一个文件">打包成一个文件</h4><p>我们可以用onefile参数将所有文件打包到一个可执行文件中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller --onefile script.py</span><br></pre></td></tr></table></figure><p>打包成一个文件相对于文件夹更容易管理。坏处运行相对比较慢。这个文件中包含了压缩的依赖文件拷贝（.so文件）。</p><p>当程序运行时，PyInstaller的引导程序会新建一个临时文件夹。然后解压程序的第三方依赖文件到临时文件夹中。这也是为什么一个可执行文件比文件夹中执行的时间要长的原因。剩下的就和上面的一样了。</p><h4 id="spec_文件">spec 文件</h4><p>当你执行下面命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller options..script.py</span><br></pre></td></tr></table></figure><p>PyInstaller首先建一个sepc(specification)文件：script.spec。这个文件的存放地址可以使用参数–specpath= 来定义，默认放在当前文件夹下。</p><p>spec文件的作用是什么呢？它会告诉PyInstaller如何处理你的py文件，它会将你的py文件名字和输入的大部分参数进行编码。PyInstaller通过执行spec文件中的内容来生成app，有点像makefile。正常使用中我们是不需要管spec文件的，但是下面几种情况需要修改spec文件：</p><ul><li>需要打包资源文件</li><li>需要include一些PyInstaller不知道的run-time库</li><li>为可执行文件添加run-time 选项</li><li>多程序打包</li></ul><p>可以通过下面命令生成spec文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyi-makespec options script.py [other scripts ...]</span><br></pre></td></tr></table></figure><p>修改完spec文件，就可以通过下面命令来生成app文件了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller options script.spec</span><br></pre></td></tr></table></figure><p>当通过spec文件来生成app文件的时候只有下面几个参数是有用的：</p><ul><li>–upx-dir=</li><li>–distpath=</li><li>–noconfirm=</li><li>–ascii</li></ul><h4 id="spec_文件解析">spec 文件解析</h4><p>下面是一个spec文件的例子。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">block_cipher = None</span><br><span class="line">a = Analysis(['minimal.py'],</span><br><span class="line">        pathex=['/Developer/PItests/minimal'],</span><br><span class="line">        binaries=None,</span><br><span class="line">        datas=None,</span><br><span class="line">        hiddenimports=[],</span><br><span class="line">        hookspath=None,</span><br><span class="line">        runtime_hooks=None,</span><br><span class="line">        excludes=None,</span><br><span class="line">        ciper=block_cipher)</span><br><span class="line">pyz = PYZ(a.pure, a.zipped_data,</span><br><span class="line">        cipher=block_cipher)</span><br><span class="line">exe = EXE(pyz, ...)</span><br><span class="line">coll = COLLECT(...)</span><br></pre></td></tr></table></figure><p>spec文件中主要包含4个class: Analysis, PYZ, EXE和COLLECT.</p><ul><li>Analysis以py文件为输入，它会分析py文件的依赖模块，并生成相应的信息</li><li>PYZ是一个.pyz的压缩包，包含程序运行需要的所有依赖</li><li>EXE根据上面两项生成</li><li>COLLECT生成其他部分的输出文件夹，COLLECT也可以没有</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = Analysis(</span><br><span class="line">    ...</span><br><span class="line">    datas = [('you/source/file/path','file_name_in_project'),</span><br><span class="line">    ('source/file2', 'file_name2')]</span><br><span class="line">    ...</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>可以认为datas是一个List,每个元素是一个二元组。元组的第一个元素是你本地文件索引，第二个元素是拷贝到项目中之后的文件名字。除了上面那种写法，也可以将其提出来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">added_files = [...]</span><br><span class="line">a = Analysis(</span><br><span class="line">    ...</span><br><span class="line">    datas = added_files,</span><br><span class="line">    ...</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>其他的二进制文件添加方法类似。</p><h4 id="总结">总结</h4><p>最后简单来说，我们要通过PyInstaller生成可执行的文件主要下面两步。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller [option] mypython.py</span><br></pre></td></tr></table></figure><p>option为空生成文件夹，选择onefile，生成一个文件。<br>如果项目有一些依赖的数据文件，上面生成的二进制文件是无法运行的，这个时候可以通过修改spec文件，让后再用pyinstaller运行spec文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller [option] mypython.spec</span><br></pre></td></tr></table></figure><p>当然也按上文那样先生成spec文件。</p><p><a href="http://legendtkl.com/2015/11/06/pyinstaller/" target="_blank" rel="noopener">pyinstaller简洁教程</a></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Git配置不同项目的不同账号</title>
      <link href="/2017/12/05/Git%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%90%8C%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%8D%E5%90%8C%E8%B4%A6%E5%8F%B7/"/>
      <url>/2017/12/05/Git%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%90%8C%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%8D%E5%90%8C%E8%B4%A6%E5%8F%B7/</url>
      <content type="html"><![CDATA[<p>​    在公司里做项目，一般都是公司直接分配git账号。而我自己在GitHub上也托管了自己的博客。两边使用的账号是不同的对应的ssh key也不一样。每次都手工更改是很麻烦的，也不是程序员应有的解决方案。这里我记录下我是如何解决git多账号登录的。</p><p>​    首先当初最开始设置 Git 的时候，都是默认全局设置的。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "your_name" </span><br><span class="line">git config --global user.email "your_email"</span><br></pre></td></tr></table></figure><a id="more"></a><p>​    一般情况下，参与的项目都是同一个邮箱用户名是没啥问题的。但是碰到我这种情况，又不想换掉其中一个项目的用户名（我也没有这个决定权）。我就需要针对不同的项目设置不同的用户名邮箱。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/you project #进入项目文件夹 </span><br><span class="line">git init #初始化项目（如果已经是git目录了则不需要） </span><br><span class="line">git config user.name "your_name" #重新设置用户名和邮箱 </span><br><span class="line">git config user.email "your_email"</span><br></pre></td></tr></table></figure><p>​    说白了，也就是进入到你的git项目相对根目录下，然后执行git config设置记录。这时候我们打开项目中的<code>.git</code>文件夹，查看<code>config</code>文件会发现多了两行.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[branch "master"]</span><br><span class="line">    remote = origin</span><br><span class="line">    merge = refs/heads/master</span><br><span class="line">[user]</span><br><span class="line">    name = you name</span><br><span class="line">    email = youemail@host.com</span><br></pre></td></tr></table></figure><p>在下一次提交的时候就优先是用项目文件中的git配置信息了。如果有必要可以执行取消全局设置的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset user.name</span><br><span class="line">git config --global --unset user.email</span><br></pre></td></tr></table></figure><h4 id="SSH配置">SSH配置</h4><p>邮箱不同也会对应不同的SSH key，所以要针对不同的项目使用不同的key。所以打开git全局配置文件。一般在用户目录下的<code>.ssh</code>文件夹中。比如windows用户就是：<code>C:\Users\用户名\.ssh</code></p><p>Linux就是<code>～/.ssh</code><br>找到config文件。没有就新建一个，用文本编辑器打开，添加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">第一个git项目账号</span></span><br><span class="line">Host first     #给这个项目服务器起个名字，待会用到</span><br><span class="line">HostName test.com #这里需要用真实的项目检出hostname，为了项目安全，我这里随意写的</span><br><span class="line">User A           #用户名</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_first #该项目ssh key 所在路径</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">第二个git项目账号  和上面的项目配置一样</span></span><br><span class="line">Host second</span><br><span class="line">HostName test2.com</span><br><span class="line">Port 1334</span><br><span class="line">User B</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_second</span><br></pre></td></tr></table></figure><p>​    如果还没有生成ssh key 可以用一下命令生成,不同项目起不同名字或者放到不同路径，在上面的config配置中应用不同路径即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -C "your_email" -t rsa</span><br></pre></td></tr></table></figure><p>使配置生效</p><p>上面配置了ssh key时候指定了host名称，所以再次打开项目文件夹下的<code>.git</code>目录下的config文件，修改url配置，把原来的host name url 改成你上面配置的host 值比如 ‘first’ 、’seceond’等，类似如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[remote "origin"] </span><br><span class="line">url = git@first:A/proxy.git </span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br></pre></td></tr></table></figure><p>也可以使用命令行完成配置。这里需要注意，使用.ssh目录下的host代替真实的hostname，这样才能让git识别出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add first git@first:A/project.git</span><br></pre></td></tr></table></figure><p>如果使用的是repo，也是同样操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo init -u ssh://A@first -b branch</span><br></pre></td></tr></table></figure><p>push的时候，push到对应的Host即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push fist master  #first项目中：</span><br></pre></td></tr></table></figure><p>作者： K_Biao<br>链接：<a href="http://www.imooc.com/article/7419" target="_blank" rel="noopener">http://www.imooc.com/article/7419</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Python的最大递归深度错误</title>
      <link href="/2017/11/13/Python%E7%9A%84%E6%9C%80%E5%A4%A7%E9%80%92%E5%BD%92%E6%B7%B1%E5%BA%A6%E9%94%99%E8%AF%AF/"/>
      <url>/2017/11/13/Python%E7%9A%84%E6%9C%80%E5%A4%A7%E9%80%92%E5%BD%92%E6%B7%B1%E5%BA%A6%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>今天在用 Python 的爬虫的时候，遇到一个错误<code>maximum recursion depth exceeded while calling a Python object</code>，意思是：当调用该对象超过最大递归深度。</p><p>报错如下:</p><a id="more"></a><blockquote><p> File “/usr/lib/python3.5/enum.py”, line 241, in <strong>call</strong></p><p>   return cls.<strong>new</strong>(cls, value)<br> File “/usr/lib/python3.5/enum.py”, line 463, in <strong>new</strong><br>   if type(value) is cls:<br>RecursionError: maximum recursion depth exceeded while calling a Python object</p></blockquote><p>原因是在Python里的递归调用是有限制的，可以使用sys模块里的getrecursionlimit方法查看的到，<a href="https://cyrusin.github.io/2015/12/08/python-20151208/" target="_blank" rel="noopener">打破递归栈的深度限制: 解析一种Python尾递归优化的方法</a></p><p>打开终端运行Python，可以看到默认限制值为1000.</p><p>解决方法：</p><p><code>sys.setrecursionlimit(2000)</code></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Ubuntu安装 redis，并后台运行</title>
      <link href="/2017/11/12/Ubuntu%E5%AE%89%E8%A3%85-redis%EF%BC%8C%E5%B9%B6%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/"/>
      <url>/2017/11/12/Ubuntu%E5%AE%89%E8%A3%85-redis%EF%BC%8C%E5%B9%B6%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</url>
      <content type="html"><![CDATA[<p>Ubuntu16.04 上安装运行 redis过程。</p><p>安装：<code>apt install reids</code> </p><p>设置<code>redis.conf</code></p><a id="more"></a><p><code>vi /etc/redis/redis.conf</code></p><p>默认情况下Redis不作为后台服务运行，这里设置为yes，即可作为后台服务运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># By default Redis does not run as a daemon. Use &apos;yes&apos; if you need it.</span><br><span class="line"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span><br><span class="line">daemonize yes</span><br></pre></td></tr></table></figure><p>启动redis 服务</p><p><code>redis-server /etc/redis/redis.conf</code></p><p>检测服务是否已经启动</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> -ef |<span class="keyword">grep</span> redis</span><br></pre></td></tr></table></figure><p>检测6379端口是否监听</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lntp <span class="string">| grep 6379</span></span><br></pre></td></tr></table></figure><p>检测客户端连接是否正常 使用客户端<code>redis-cli</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line"><span class="comment">#(empty list or set)</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key <span class="string">"hello world"</span></span><br><span class="line"><span class="comment">#OK</span></span><br><span class="line">127.0.0.1:6379&gt; get key</span><br><span class="line"><span class="comment">#"hello world"</span></span><br></pre></td></tr></table></figure><p>停止redis服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux 下后台运行Python脚本</title>
      <link href="/2017/11/01/Linux-%E4%B8%8B%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8CPython%E8%84%9A%E6%9C%AC/"/>
      <url>/2017/11/01/Linux-%E4%B8%8B%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8CPython%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>如果要在Linux服务器端一直运行一个Python脚本，当然就想到了在命令后面加&amp;符号。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python /data/python/server.py &gt;python.log &amp;</span><br></pre></td></tr></table></figure><a id="more"></a><p>​    1、 &gt; 表示把标准输出（STDOUT）重定向到 那个文件，这里重定向到了<code>python.log</code>。</p><p>​         2、 &amp; 表示在后台执行脚本。这样可以到达目的，但是，我们退出shell窗口的时候，必须用exit命令来退出，否则，                          退出之后，该进程也会随着shell的消失而消失（退出、关闭）    </p><p>使用nohup(not hang up)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nohup python /data/python/server.py &gt; python.log3 <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure><p>​    1、1是标准输出（STDOUT）的文件描述符，2是标准错误（STDERR）的文件描述符</p><p>​     1&gt; python.log 简化为 &gt; python.log，表示把标准输出重定向到python.log这个文件</p><p>​    2、2&gt;&amp;1 表示把标准错误重定向到标准输出，这里&amp;1表示标准输出，为什么需要将标准错误重定向到标准输出的原因，是因为标准错误没有缓冲区，而STDOUT有。​这就会导致  commond &gt; python.log  2&gt; python.log 文件python.log被两次打开，而STDOUT和 STDERR将会竞争覆盖，这肯定不是我门想要的</p><p>​    3、好了，我们现在可以直接关闭shell窗口（我用的是SecureCRT，用的比较多的还有Xshell），而不用再输入exit这个命令来退出shell了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux|grep python</span><br><span class="line">tomener <span class="number">1885</span>  <span class="number">0.1</span>  <span class="number">0.4</span>  <span class="number">13120</span>  <span class="number">4528</span> pts/<span class="number">0</span>    S    <span class="number">15</span>:<span class="number">48</span>   <span class="number">0</span>:<span class="number">00</span> python /data/python/server.py</span><br><span class="line">tomener <span class="number">1887</span>  <span class="number">0.0</span>  <span class="number">0.0</span>   <span class="number">5980</span>   <span class="number">752</span> pts/<span class="number">0</span>    S+   <span class="number">15</span>:<span class="number">48</span>   <span class="number">0</span>:<span class="number">00</span> grep python</span><br></pre></td></tr></table></figure><p>​    现在当我们直接关闭shell窗口，再连接上服务器，查看Python的进程，发现进程还在,但是，在python运行中却查看不到输出！</p><p>​    因为：Python的输出有缓冲，导致python.log3并不能够马上看到输出。使用<code>-u</code>参数，使得python不启用缓冲。所以改正命令，就可以正常使用了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nohup python -u test.py &gt; out.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python ConfigParser模块常用方法示例</title>
      <link href="/2017/10/30/Python-ConfigParser%E6%A8%A1%E5%9D%97%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E7%A4%BA%E4%BE%8B/"/>
      <url>/2017/10/30/Python-ConfigParser%E6%A8%A1%E5%9D%97%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E7%A4%BA%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>在程序中使用配置文件来灵活的配置一些参数是一件很常见的事情，配置文件的解析并不复杂，在Python里更是如此，在官方发布的库中就包含有做这件事情的库，那就是ConfigParser，这里简单的做一些介绍。  </p><p><code>Python ConfigParser</code>模块解析的配置文件的格式比较象ini的配置文件格式，就是文件中由多个section构成，每个section下又有多个配置项.</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[db]    </span><br><span class="line">db_host=192.168.1.1   </span><br><span class="line">db_port=3306   </span><br><span class="line">db_user=root   </span><br><span class="line">db_pass=password   </span><br><span class="line">[concurrent]    </span><br><span class="line">thread=200   </span><br><span class="line">processor=400</span><br></pre></td></tr></table></figure><p>  假设上面的配置文件的名字为test.conf。里面包含两个section,一个是db, 另一个是concurrent, db里面还包含有4项，concurrent里面有两项。这里来做做解析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- encoding: utf-8 -*-    </span></span><br><span class="line"><span class="keyword">import</span> ConfigParser,string,os,sys    </span><br><span class="line">cf = ConfigParser.ConfigParser()    </span><br><span class="line">cf.read(<span class="string">"test.conf"</span>)   </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 返回所有的section    </span></span><br><span class="line">s = cf.sections()    </span><br><span class="line"><span class="keyword">print</span> <span class="string">'section:'</span>, s    </span><br><span class="line">o = cf.options(<span class="string">"db"</span>)    </span><br><span class="line"><span class="keyword">print</span> <span class="string">'options:'</span>, o    </span><br><span class="line">v = cf.items(<span class="string">"db"</span>)    </span><br><span class="line"><span class="keyword">print</span> <span class="string">'db:'</span>, v    </span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span>*<span class="number">60</span>    </span><br><span class="line">  </span><br><span class="line"><span class="comment">#可以按照类型读取出来  </span></span><br><span class="line">db_host = cf.get(<span class="string">"db"</span>, <span class="string">"db_host"</span>)    </span><br><span class="line">db_port = cf.getint(<span class="string">"db"</span>, <span class="string">"db_port"</span>)    </span><br><span class="line">db_user = cf.get(<span class="string">"db"</span>, <span class="string">"db_user"</span>)    </span><br><span class="line">db_pass = cf.get(<span class="string">"db"</span>, <span class="string">"db_pass"</span>)   </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 返回的是整型的    </span></span><br><span class="line">threads = cf.getint(<span class="string">"concurrent"</span>, <span class="string">"thread"</span>)    </span><br><span class="line">processors = cf.getint(<span class="string">"concurrent"</span>, <span class="string">"processor"</span>)    </span><br><span class="line"><span class="keyword">print</span> <span class="string">"db_host:"</span>, db_host    </span><br><span class="line"><span class="keyword">print</span> <span class="string">"db_port:"</span>, db_port    </span><br><span class="line"><span class="keyword">print</span> <span class="string">"db_user:"</span>, db_user    </span><br><span class="line"><span class="keyword">print</span> <span class="string">"db_pass:"</span>, db_pass    </span><br><span class="line"><span class="keyword">print</span> <span class="string">"thread:"</span>, threads    </span><br><span class="line"><span class="keyword">print</span> <span class="string">"processor:"</span>, processors   </span><br><span class="line">  </span><br><span class="line"><span class="comment">#修改一个值，再写回去    </span></span><br><span class="line">cf.set(<span class="string">"db"</span>, <span class="string">"db_pass"</span>, <span class="string">"zhaowei"</span>)    </span><br><span class="line">cf.write(open(<span class="string">"test.conf"</span>, <span class="string">"w"</span>))   </span><br><span class="line">  </span><br><span class="line"><span class="comment">#添加一个section。（同样要写回）  </span></span><br><span class="line">cf.add_section(<span class="string">'liuqing'</span>)  </span><br><span class="line">cf.set(<span class="string">'liuqing'</span>, <span class="string">'int'</span>, <span class="string">'15'</span>)  </span><br><span class="line">cf.set(<span class="string">'liuqing'</span>, <span class="string">'bool'</span>, <span class="string">'true'</span>)  </span><br><span class="line">cf.set(<span class="string">'liuqing'</span>, <span class="string">'float'</span>, <span class="string">'3.1415'</span>)  </span><br><span class="line">cf.set(<span class="string">'liuqing'</span>, <span class="string">'baz'</span>, <span class="string">'fun'</span>)  </span><br><span class="line">cf.set(<span class="string">'liuqing'</span>, <span class="string">'bar'</span>, <span class="string">'Python'</span>)  </span><br><span class="line">cf.set(<span class="string">'liuqing'</span>, <span class="string">'foo'</span>, <span class="string">'%(bar)s is %(baz)s!'</span>)  </span><br><span class="line">cf.write(open(<span class="string">"test.conf"</span>, <span class="string">"w"</span>))  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#移除section 或者option 。（只要进行了修改就要写回的哦）  </span></span><br><span class="line">cf.remove_option(<span class="string">'liuqing'</span>,<span class="string">'int'</span>)  </span><br><span class="line">cf.remove_section(<span class="string">'liuqing'</span>)  </span><br><span class="line">cf.write(open(<span class="string">"test.conf"</span>, <span class="string">"w"</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux 下安装 zsh</title>
      <link href="/2017/10/19/Linux-%E4%B8%8B%E5%AE%89%E8%A3%85-zsh/"/>
      <url>/2017/10/19/Linux-%E4%B8%8B%E5%AE%89%E8%A3%85-zsh/</url>
      <content type="html"><![CDATA[<p><a href="http://zsh.sourceforge.net/Intro/intro_1.html" target="_blank" rel="noopener">Zsh</a> 是一款功能强大终端（shell）软件，既可以作为一个交互式终端，也可以作为一个脚本解释器。它在兼容 <a href="https://wiki.archlinux.org/index.php/Bash" target="_blank" rel="noopener">Bash</a> 的同时 (默认不兼容，除非设置成 <code>emulate sh</code>) 还有提供了很多改进。</p><p>安装更新过程：</p><a id="more"></a><h5 id="1-_安装_zsh_软件包和_git">1.     安装 zsh 软件包和 git</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CentOS： yum -y <span class="keyword">install</span> zsh git</span><br><span class="line">Ubuntu:  sudo apt -y <span class="keyword">install</span> zsh git</span><br></pre></td></tr></table></figure><h5 id="2-_克隆_oh-my-zsh">2.     克隆 oh-my-zsh</h5><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">clone</span> <span class="title">git</span>://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure><h5 id="3-_复制_-zshrc，修改命令提示符样式">3.     复制 .zshrc，修改命令提示符样式</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp ~/.oh-my-zsh/templates/zshrc<span class="selector-class">.zsh-template</span> ~/.zshrc</span><br><span class="line">ZSH_THEME=<span class="string">"ys"</span></span><br></pre></td></tr></table></figure><h5 id="4-_修改_shell_类型">4.    修改 shell 类型</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chsh -s /bin/zsh</span></span><br></pre></td></tr></table></figure><p><strong>5.    更新 oh-my-zsh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> upgrade_oh_my_zsh</span></span><br></pre></td></tr></table></figure><p><strong>6.    如果要换 oh-my-fish</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> uninstall_oh_my_zsh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew install fish</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -L https://github.com/bpinto/oh-my-fish/raw/master/tools/install.sh | sh</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android O的感叹号或者叉 怎么去掉呢</title>
      <link href="/2017/10/18/Android-O%E7%9A%84%E6%84%9F%E5%8F%B9%E5%8F%B7%E6%88%96%E8%80%85%E5%8F%89-%E6%80%8E%E4%B9%88%E5%8E%BB%E6%8E%89%E5%91%A2/"/>
      <url>/2017/10/18/Android-O%E7%9A%84%E6%84%9F%E5%8F%B9%E5%8F%B7%E6%88%96%E8%80%85%E5%8F%89-%E6%80%8E%E4%B9%88%E5%8E%BB%E6%8E%89%E5%91%A2/</url>
      <content type="html"><![CDATA[<p>Andorid O上的感叹号看着确实烦人，只要运行以下命令就好。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global captive_portal_https_url https://www.google.cn/generate_204</span><br></pre></td></tr></table></figure><h3 id="7-0-7-1-0">7.0-7.1.0</h3><p>需要服务器支持https</p><p>或者使用命令</p><p><code>adb shell &quot;settings put global captive_portal_use_https 0&quot;</code></p><p>禁用https即可。</p><p>恢复可用</p><p><code>adb shell &quot;settings put global captive_portal_use_https 1&quot;</code></p><p>或者</p><p><code>adb shell &quot;settings delete global captive_portal_use_https&quot;</code></p><h3 id="7-1-1">7.1.1</h3><p> 从7.1.1开始，检测用的服务器地址储存格式发生了变化，改为了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getCaptivePortalServerHttpsUrl</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getSetting(context, Settings.Global.CAPTIVE_PORTAL_HTTPS_URL, DEFAULT_HTTPS_URL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCaptivePortalServerHttpUrl</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getSetting(context, Settings.Global.CAPTIVE_PORTAL_HTTP_URL, DEFAULT_HTTP_URL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，系统不会自动加入”generate_204″的后缀了，这意味着url可以设计的更加灵活，同时也意味着在设置的时候需要填入完整的url：</p><p><code>adb shell `</code>“settings put global captive_portal_https_url <a href="https://www.noisyfox.cn/generate_204&quot;`" target="_blank" rel="noopener">https://www.noisyfox.cn/generate_204&quot;`</a></p><p>当然如果只有http的话，可以执行：</p><p><code>adb shell &quot;settings put global captive_portal_use_https 0&quot;</code></p><p><code>adb shell &quot;settings put global captive_portal_http_url http://www.noisyfox.cn/generate_204&quot;</code></p><h3 id="7-1-2">7.1.2</h3><p>自7.1.2（开始？），”captive_portal_detection_enabled”设置已被废弃，现在改为了”captive_portal_mode”选项，该选项可设置为以下3种值：</p><ul><li>0：彻底禁用检测(Don’t attempt to detect captive portals.)</li><li>1：检测到需要登录则弹窗提醒（默认值）(When detecting a captive portal, display a notification that prompts the user to sign in.)</li><li>2：检测到需要登录则自动断开此热点并不再自动连接(When detecting a captive portal, immediately disconnect from the network and do not reconnect to that network in the future.)</li></ul>]]></content>
      
      <categories>
          
          <category> Google </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>最新手机号码正则表达式</title>
      <link href="/2017/10/18/%E6%9C%80%E6%96%B0%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2017/10/18/%E6%9C%80%E6%96%B0%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><a href="http://www.jianshu.com/p/e8477fdccbe9" target="_blank" rel="noopener">最新手机号码正则表达式</a></p><p>众所周知，三大运营商已经增加了不少手机号码字段，还用之前的代码就会流失部分用户了。（只讨论国内坏境）<br>于是我在网上查了些数据，在之前的代码基础上改了下，方便适用于现在的环境。<br>所用方法依然还是正则表达式，正则表达式主要就是用一个公式来匹配字符串是否具备某类规则。我们这里的思路和之前也是一样，只是对之前方法的一个补充与解析。新的方法只匹配了手机号码字段前三位，有些朋友可能还不太懂这个方法，为了方便大家使用，在最后会为大家简单拆分该方法，相信大家很快就会灵活应用了。</p><a id="more"></a><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">+ (BOOL)isMobileNumber:(NSString *)mobileNum</span><br><span class="line">&#123;</span><br><span class="line">    if (mobileNum.length != 11)</span><br><span class="line">    &#123;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 手机号码: </span><br><span class="line">     * 13[0-9], 14[5,7], 15[0, 1, 2, 3, 5, 6, 7, 8, 9], 17[0, 1, 6, 7, 8], 18[0-9]</span><br><span class="line">     * 移动号段: 134,135,136,137,138,139,147,150,151,152,157,158,159,170,178,182,183,184,187,188</span><br><span class="line">     * 联通号段: 130,131,132,145,155,156,170,171,175,176,185,186</span><br><span class="line">     * 电信号段: 133,149,153,170,173,177,180,181,189</span><br><span class="line">     */</span><br><span class="line">    NSString *MOBILE = @"^1(3[0-9]|4[57]|5[0-35-9]|7[0135678]|8[0-9])\\d&#123;8&#125;$";</span><br><span class="line">    /**</span><br><span class="line">     * 中国移动：China Mobile</span><br><span class="line">     * 134,135,136,137,138,139,147,150,151,152,157,158,159,170,178,182,183,184,187,188</span><br><span class="line">     */</span><br><span class="line">    NSString *CM = @"^1(3[4-9]|4[7]|5[0-27-9]|7[08]|8[2-478])\\d&#123;8&#125;$";</span><br><span class="line">    /**</span><br><span class="line">     * 中国联通：China Unicom</span><br><span class="line">     * 130,131,132,145,155,156,170,171,175,176,185,186</span><br><span class="line">     */</span><br><span class="line">    NSString *CU = @"^1(3[0-2]|4[5]|5[56]|7[0156]|8[56])\\d&#123;8&#125;$";</span><br><span class="line">    /**</span><br><span class="line">     * 中国电信：China Telecom</span><br><span class="line">     * 133,149,153,170,173,177,180,181,189</span><br><span class="line">     */</span><br><span class="line">    NSString *CT = @"^1(3[3]|4[9]|53|7[037]|8[019])\\d&#123;8&#125;$";</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    NSPredicate *regextestmobile = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", MOBILE];</span><br><span class="line">    NSPredicate *regextestcm = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CM];</span><br><span class="line">    NSPredicate *regextestcu = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CU];</span><br><span class="line">    NSPredicate *regextestct = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CT];</span><br><span class="line"></span><br><span class="line">    if (([regextestmobile evaluateWithObject:mobileNum] == YES)</span><br><span class="line">        || ([regextestcm evaluateWithObject:mobileNum] == YES)</span><br><span class="line">        || ([regextestct evaluateWithObject:mobileNum] == YES)</span><br><span class="line">        || ([regextestcu evaluateWithObject:mobileNum] == YES))</span><br><span class="line">    &#123;</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return NO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Regex </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Ubuntu中vi使用方向键与退格键乱码问题</title>
      <link href="/2017/09/28/Ubuntu%E4%B8%ADvi%E4%BD%BF%E7%94%A8%E6%96%B9%E5%90%91%E9%94%AE%E4%B8%8E%E9%80%80%E6%A0%BC%E9%94%AE%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2017/09/28/Ubuntu%E4%B8%ADvi%E4%BD%BF%E7%94%A8%E6%96%B9%E5%90%91%E9%94%AE%E4%B8%8E%E9%80%80%E6%A0%BC%E9%94%AE%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>在Ubuntu中 使用方向键与退格键会出现ABCD等字母。</p><p>主要有两个解决方法。</p><a id="more"></a><p><strong>方案一：</strong></p><p>可以安装vim full版本，在full版本下键盘正常，安装好后同样使用vi命令。</p><p>安装vim：</p><p>ubuntu预装的是vim tiny版本，而需要的是vim full版本。执行下面的语句安装vim full版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sudo apt-get remove vim-common</span></span><br><span class="line"><span class="meta">$</span><span class="bash">sudo apt-get install vim</span></span><br></pre></td></tr></table></figure><p>这样就行了，vim是一款优秀的软件，可以在运用中体会到。</p><p><strong>方案二：</strong></p><p>在vi命令行使用命令“：set nocompatible”，就是设置vi不使用兼容模式。</p><p>Ubuntu中的vi命令：</p><p>vi 有三种模式，输入模式，编辑模式，“：”命令模式</p><p>vi 进入以后默认是编辑模式</p><p>vi 编辑模式默认的快捷键 上下左右分别是  J K H L</p><p>vi 在编辑模式使用 i 可以进入输入模式</p><p>vi 输入模式只能输入英文，默认不能使用上下左右箭头</p><p>vi 输入模式用Esc可以返回到编辑模式</p><p>vi 编辑模式 Shift + ; 可以进入命令模式</p><p>vi 命令模式w保存，q退出</p><p><strong>1）对所有用户都有效,解决系统中所用用户的vi中文乱码问题</strong></p><p>   sudo gedit /etc/vim/vimrc.tiny</p><p>加入如下内容：</p><p>#该文件的内容显示如下：</p><p>“ Encoding related</p><p>set encoding=UTF-8</p><p>set langmenu=zh_CN.UTF-8</p><p>language message zh_CN.UTF-8</p><p>set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1</p><p>set fileencoding=utf-8</p><p><strong>2)只对当前用户有效的解决方法</strong></p><p>  ubuntu默认在当前用户的家目录下，没有.vimrc文件，这个时候可以自己touch一个.vimrc文件，且在其中加入  </p><p>#该文件的内容显示如下：</p><p>“ Encoding related </p><p>set encoding=UTF-8</p><p>set langmenu=zh_CN.UTF-8</p><p>language message zh_CN.UTF-8</p><p>set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1</p><p>set fileencoding=utf-8</p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux 下的五个查找命令</title>
      <link href="/2017/09/01/Linux-%E4%B8%8B%E7%9A%84%E4%BA%94%E4%B8%AA%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/09/01/Linux-%E4%B8%8B%E7%9A%84%E4%BA%94%E4%B8%AA%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>使用电脑的时候，经常需要查找文件。</p><p>在Linux中，有很多方法可以做到这一点。</p><p>国外网站LinuxHaxor总结了五条命令，你可以看看自己知道几条。大多数程序员，可能经常使用其中的2到3条，对这5条命令都很熟悉的人应该是不多的。</p><a id="more"></a><ol><li><p><strong>find</strong></p><p>find是最常见和最强大的查找命令，你可以用它找到任何你想找的文件。</p><p>find的使用格式如下：</p><p>　　<strong>$ find &lt;指定目录&gt; &lt;指定条件&gt; &lt;指定动作&gt;</strong></p><p>　　- &lt;指定目录&gt;： 所要搜索的目录及其所有子目录。默认为当前目录。</p><p>　　- &lt;指定条件&gt;： 所要搜索的文件的特征。</p><p>　　- &lt;指定动作&gt;： 对搜索结果进行特定的处理。</p><p>如果什么参数也不加，find默认搜索当前目录及其子目录，并且不过滤任何结果（也就是返回所有文件），将它们全都显示在屏幕上。</p><p>find的使用实例：</p><p>　　<strong>$ find . -name ‘my*‘</strong></p><p>搜索当前目录（含子目录，以下同）中，所有文件名以my开头的文件。</p><p>　　<strong>$ find . -name ‘my*‘ -ls</strong></p><p>搜索当前目录中，所有文件名以my开头的文件，并显示它们的详细信息。</p><p>　　<strong>$ find . -type f -mmin -10</strong></p><p>搜索当前目录中，所有过去10分钟中更新过的普通文件。如果不加-type f参数，则搜索普通文件+特殊文件+目录。</p></li><li><p><strong>locate</strong></p><p>locate命令其实是”find -name”的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库（/var/lib/locatedb），这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用<strong>updatedb</strong>命令，手动更新数据库。</p><p>locate命令的使用实例：</p><p>　　<strong>$ locate /etc/sh</strong></p><p>搜索etc目录下所有以sh开头的文件。</p><p>　　<strong>$ locate ~/m</strong></p><p>搜索用户主目录下，所有以m开头的文件。</p><p>　　<strong>$ locate -i ~/m</strong></p><p>搜索用户主目录下，所有以m开头的文件，并且忽略大小写。</p></li><li><p><strong>whereis</strong></p><p>whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</p><p>whereis命令的使用实例：</p><p>　　<strong>$ whereis grep</strong></p></li><li><p><strong>which</strong></p><p>which命令的作用是，在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p><p>which命令的使用实例：</p><p>　　<strong>$ which grep</strong></p></li><li><p><strong>type</strong></p><p>type命令其实不能算查找命令，它是用来区分某个命令到底是由shell自带的，还是由shell外部的独立二进制文件提供的。如果一个命令是外部命令，那么使用-p参数，会显示该命令的路径，相当于which命令。</p><p>type命令的使用实例：</p><p>　　<strong>$ type cd</strong></p><p>系统会提示，cd是shell的自带命令（build-in）。</p><p>　　<strong>$ type grep</strong></p><p>系统会提示，grep是一个外部命令，并显示该命令的路径。</p><p>　　<strong>$ type -p grep</strong></p><p>加上-p参数后，就相当于which命令。</p></li></ol><p><a href="http://www.ruanyifeng.com/blog/2009/10/5_ways_to_search_for_files_using_the_terminal.html" target="_blank" rel="noopener">Linux的五个查找命令</a></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>CentOS 7 安装最新的 Git</title>
      <link href="/2017/08/29/CentOS-7-%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%9A%84-Git/"/>
      <url>/2017/08/29/CentOS-7-%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%9A%84-Git/</url>
      <content type="html"><![CDATA[<blockquote><p>yum 源仓库里的 Git 版本更新不及时，最新版本的 Git 是 1.8.3.1，但是官方最新版本已经到了 2.9.2。想要安装最新版本的的 Git，只能下载源码进行安装。</p></blockquote><a id="more"></a><ol><li><p>查看 yum 源仓库的 Git 信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum info git</span></span><br></pre></td></tr></table></figure><p>​可以看出，截至目前，yum 源仓库中最新的 Git 版本才 1.8.3.1，而查看最<a href="https://github.com/git/git/releases" target="_blank" rel="noopener">新的 Git 发布版本</a>，已经 2.14.1 了。</p></li><li><p>依赖库安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum install  gcc perl-ExtUtils-MakeMaker</span></span><br></pre></td></tr></table></figure></li><li><p>卸载低版本Git,下载行的源码包，并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum remove git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wget https://github.com/git/git/archive/v2.14.1.tar.gz</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar -zxvf v2.14.1.tar.gz</span></span><br></pre></td></tr></table></figure></li><li><p>编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> make prefix=/usr/<span class="built_in">local</span>/git all</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> make prefix=/usr/<span class="built_in">local</span>/git install</span></span><br></pre></td></tr></table></figure></li><li><p>添加到环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"export PATH=<span class="variable">$PATH</span>:/usr/local/git/bin"</span> &gt;&gt; /etc/bashrc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">source</span> /etc/bashrc <span class="comment"># 实时生效</span></span></span><br></pre></td></tr></table></figure><p>​</p><p>以上 CentOS 7.3就完成了更新 Git。​</p></li></ol>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>CentOS 7.3 升级Python 2.7.13</title>
      <link href="/2017/08/27/CentOS-7-3-%E5%8D%87%E7%BA%A7Python-2-7-13/"/>
      <url>/2017/08/27/CentOS-7-3-%E5%8D%87%E7%BA%A7Python-2-7-13/</url>
      <content type="html"><![CDATA[<p>Centos7自动的 python 版本为2.7.5，要升级到2.7.x 的最新版。</p><h4 id="安装依赖：">安装依赖：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel gcc openssl-devel</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="下载并正确配置">下载并正确配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">官网下载python源代码</span></span><br><span class="line">wget https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz</span><br><span class="line">tar -zxvf Python-2.7.13.tgz</span><br></pre></td></tr></table></figure><h4 id="编译并安装">编译并安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd Python-2.7.13/</span><br><span class="line"><span class="meta">#</span><span class="bash">请注意一定要加 `--<span class="built_in">enable</span>-shared --prefix=/usr/<span class="built_in">local</span> CFLAGS=-fPIC  LDFLAGS=<span class="string">"-Wl,-rpath /usr/local/lib"</span> --<span class="built_in">enable</span>-unicode=ucs4`</span></span><br><span class="line">./configure --enable-shared --prefix=/usr/local CFLAGS=-fPIC LDFLAGS="-Wl,-rpath /usr/local/lib" --enable-unicode=ucs4</span><br><span class="line">make -j24</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h4 id="替换旧版本">替换旧版本</h4><p><strong>请注意千万不要覆盖原有的系统自带的python，否则会导致yum不再可用，无法修复</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/bin/python /usr/bin/python2.7.5</span><br><span class="line">ln -sf /usr/local/bin/python /usr/bin/python</span><br><span class="line"><span class="meta">#</span><span class="bash">验证版本</span></span><br><span class="line">python -V</span><br></pre></td></tr></table></figure><h4 id="修改配置文件，解决yum、firewall-cmd等报错问题">修改配置文件，解决yum、firewall-cmd等报错问题</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/bin/yum</span><br><span class="line"><span class="meta">#</span><span class="bash">修改第一句，替换成保留的2.7.5的版本：</span></span><br><span class="line">!/usr/bin/python2.7.5</span><br></pre></td></tr></table></figure><p>修改<code>/usr/libexec/urlgrabber-ext-down</code>下的第一句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!/usr/bin/python2<span class="number">.7</span><span class="number">.5</span></span><br></pre></td></tr></table></figure><p>修改<code>/usr/bin/firewall-cmd</code>下的第一句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2.7.5 -Es</span></span><br></pre></td></tr></table></figure><p>修改<code>/sbin/authconfig</code>下的第一句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2.7.5</span></span><br></pre></td></tr></table></figure><h4 id="安装setuptools">安装setuptools</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/ez_setup.py</span><br><span class="line">python ez_setup.py</span><br></pre></td></tr></table></figure><h4 id="安装最新版本的pip">安装最新版本的pip</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python get-pip.py </span><br><span class="line"></span><br><span class="line">ln -s /usr/local/bin/pip /usr/bin/pip</span><br><span class="line">ln -s /usr/local/bin/pip /usr/bin/pip2</span><br><span class="line">pip -V</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>fail2ban 简介</title>
      <link href="/2017/08/27/fail2ban-%E7%AE%80%E4%BB%8B/"/>
      <url>/2017/08/27/fail2ban-%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>fail2ban 可以监视你的系统日志，然后匹配日志的错误信息（正则式匹配）执行相应的屏蔽动作（一般情况下是调用防火墙屏蔽），比如:当有人在试探你的SSH、SMTP、FTP密码，只要达到你预设的次数，fail2ban就会调用防火墙屏蔽这个IP，而且可以发送e-mail通知系统管理员，是一款很实用、很强大的软件。<br><a id="more"></a></p><p>####功能和特性<br>1、支持大量服务。如sshd,apache,qmail,proftpd,sasl等等<br>2、支持多种动作。如iptables,tcp-wrapper,shorewall(iptables第三方工具),mail notifications(邮件通知)等等。<br>3、在logpath选项中支持通配符<br>4、需要Gamin支持(注：Gamin是用于监视文件和目录是否更改的服务工具)<br>5、需要安装python,iptables,tcp-wrapper,shorewall,Gamin。如果想要发邮件，那必需安装postfix/sendmail</p><p>####安装和配置<br>如果是 CentOS，可以直接<code>yum install fail2ban</code><br>如果是 Ubuntu，可以直接<code>apt install fail2ban</code></p><p>功能:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/fail2ban/action.d            #动作文件夹，内含默认文件。iptables以及mail等动作配置</span><br><span class="line">/etc/fail2ban/fail2ban.conf        #定义了fai2ban日志级别、日志位置及sock文件位置</span><br><span class="line">/etc/fail2ban/filter.d            #条件文件夹，内含默认文件。过滤日志关键内容设置</span><br><span class="line">/etc/fail2ban/jail.conf            #主要配置文件，模块化。主要设置启用ban动作的服务及动作阀值</span><br><span class="line">/etc/rc.d/init.d/fail2ban          #启动脚本文件</span><br></pre></td></tr></table></figure></p><p>主要配置:<br><code>vi /etc/fail2ban/fail2ban.conf</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Definition] </span><br><span class="line">loglevel =3 </span><br><span class="line">logtarget = SYSLOG  #我们需要做的就是把这行改成/var/log/fail2ban.log，方便用来记录日志信息 </span><br><span class="line">socket =/var/run/fail2ban/fail2ban.sock</span><br></pre></td></tr></table></figure></p><p><code>vi /etc/fail2ban/jail.conf</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]              #全局设置</span><br><span class="line">ignoreip = 127.0.0.1      #忽略的IP列表,不受设置限制</span><br><span class="line">bantime  = 600            #屏蔽时间，单位：秒</span><br><span class="line">findtime  = 600           #这个时间段内超过规定次数会被ban掉</span><br><span class="line">maxretry = 3              #最大尝试次数</span><br><span class="line">backend = auto            #日志修改检测机制（gamin、polling和auto这三种）</span><br><span class="line"> </span><br><span class="line">[sshd]                     #单个服务检查设置，如设置bantime、findtime、maxretry和全局冲突，服务优先级大于全局设置。</span><br><span class="line">enabled  = true               #是否激活此项（true/false）</span><br><span class="line">filter   = sshd               #过滤规则filter的名字，对应filter.d目录下的sshd.conf</span><br><span class="line">action   = iptables[name=SSH, port=ssh, protocol=tcp]#动作的相关参数，对应action.d/iptables.conf文件</span><br><span class="line">logpath  = /var/log/secure     #检测的日志文件path</span><br><span class="line">bantime  = 3600</span><br><span class="line">findtime  = 300 </span><br><span class="line">maxretry = 3                   #最大尝试次数</span><br></pre></td></tr></table></figure></p><p>启动 fail2ban<br><code>service fail2ban start</code></p><p>解除fail2ban绑定的IP </p><p>查询限制列表<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> iptables -L --line-numbers</span></span><br><span class="line"></span><br><span class="line">Chain fail2ban-SSH (1references)</span><br><span class="line">num  target    prot opt source            destination</span><br><span class="line">1    DROP      all  -- 118.152.158.61.ha.cnc anywhere</span><br><span class="line">2    RETURN    all  -- anywhere           anywhere</span><br><span class="line">解除限制</span><br><span class="line"><span class="meta">#</span><span class="bash"> iptables -D fail2ban-SSH 1</span></span><br></pre></td></tr></table></figure></p><h1 id="vi_/etc/fail2ban-conf">vi /etc/fail2ban.conf</h1><p>SSH防攻击规则:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line">ssh-iptables]enabled  = true</span><br><span class="line">filter   = sshd</span><br><span class="line">action   = iptables[name=SSH, port=ssh, protocol=tcp]</span><br><span class="line">           sendmail-whois[name=SSH, dest=root, sender=fail2ban@example.com, sendername="Fail2Ban"]</span><br><span class="line">logpath  = /var/log/secure</span><br><span class="line">maxretry = 5</span><br><span class="line">[ssh-ddos]</span><br><span class="line">enabled = true</span><br><span class="line">filter  = sshd-ddos</span><br><span class="line">action  = iptables[name=ssh-ddos, port=ssh,sftp protocol=tcp,udp]</span><br><span class="line">logpath  = /var/log/messages</span><br><span class="line">maxretry = 2</span><br><span class="line">[osx-ssh-ipfw]</span><br><span class="line">enabled  = true</span><br><span class="line">filter   = sshd</span><br><span class="line">action   = osx-ipfw</span><br><span class="line">logpath  = /var/log/secure.log</span><br><span class="line">maxretry = 5</span><br><span class="line">[ssh-apf]</span><br><span class="line">enabled = true</span><br><span class="line">filter  = sshd</span><br><span class="line">action  = apf[name=SSH]</span><br><span class="line">logpath = /var/log/secure</span><br><span class="line">maxretry = 5</span><br><span class="line">[osx-ssh-afctl]</span><br><span class="line">enabled  = true</span><br><span class="line">filter   = sshd</span><br><span class="line">action   = osx-afctl[bantime=600]</span><br><span class="line">logpath  = /var/log/secure.log</span><br><span class="line">maxretry = 5</span><br><span class="line">[selinux-ssh]</span><br><span class="line">enabled = true</span><br><span class="line">filter  = selinux-ssh</span><br><span class="line">action  = iptables[name=SELINUX-SSH, port=ssh, protocol=tcp]</span><br><span class="line">logpath  = /var/log/audit/audit.log</span><br><span class="line">maxretry = 5</span><br><span class="line"></span><br><span class="line">proftp防攻击规则</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">[proftpd-iptables]</span><br><span class="line">enabled  = true</span><br><span class="line">filter   = proftpd</span><br><span class="line">action   = iptables[name=ProFTPD, port=ftp, protocol=tcp]</span><br><span class="line">           sendmail-whois[name=ProFTPD, dest=you@example.com]</span><br><span class="line">logpath  = /var/log/proftpd/proftpd.log</span><br><span class="line">maxretry = 6</span><br><span class="line"> </span><br><span class="line">邮件防攻击规则</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">[sasl-iptables]</span><br><span class="line">enabled  = true</span><br><span class="line">filter   = postfix-sasl</span><br><span class="line">backend  = polling</span><br><span class="line">action   = iptables[name=sasl, port=smtp, protocol=tcp]</span><br><span class="line">           sendmail-whois[name=sasl, dest=you@example.com]</span><br><span class="line">logpath  = /var/log/mail.log</span><br><span class="line">[dovecot]</span><br><span class="line">enabled = true</span><br><span class="line">filter  = dovecot</span><br><span class="line">action  = iptables-multiport[name=dovecot, port="pop3,pop3s,imap,imaps,submission,smtps,sieve", protocol=tcp]</span><br><span class="line">logpath = /var/log/mail.log</span><br><span class="line">[dovecot-auth]</span><br><span class="line">enabled = true</span><br><span class="line">filter  = dovecot</span><br><span class="line">action  = iptables-multiport[name=dovecot-auth, port="pop3,pop3s,imap,imaps,submission,smtps,sieve", protocol=tcp]</span><br><span class="line">logpath = /var/log/secure</span><br><span class="line">[perdition]</span><br><span class="line">enabled = true</span><br><span class="line">filter  = perdition</span><br><span class="line">action  = iptables-multiport[name=perdition,port="110,143,993,995"]</span><br><span class="line">logpath = /var/log/maillog</span><br><span class="line"> </span><br><span class="line">[uwimap-auth]</span><br><span class="line">enabled = true</span><br><span class="line">filter  = uwimap-auth</span><br><span class="line">action  = iptables-multiport[name=uwimap-auth,port="110,143,993,995"]</span><br><span class="line">logpath = /var/log/maillog</span><br><span class="line"> </span><br><span class="line">apache防攻击规则</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">[apache-tcpwrapper]</span><br><span class="line">enabled  = true</span><br><span class="line">filter  = apache-auth</span><br><span class="line">action   = hostsdeny</span><br><span class="line">logpath  = /var/log/httpd/error_log</span><br><span class="line">maxretry = 6</span><br><span class="line">[apache-badbots]</span><br><span class="line">enabled  = true</span><br><span class="line">filter   = apache-badbots</span><br><span class="line">action   = iptables-multiport[name=BadBots, port="http,https"]</span><br><span class="line">           sendmail-buffered[name=BadBots, lines=5, dest=you@example.com]</span><br><span class="line">logpath  = /var/log/httpd/access_log</span><br><span class="line">bantime  = 172800</span><br><span class="line">maxretry = 1</span><br><span class="line">[apache-shorewall]</span><br><span class="line">enabled  = true</span><br><span class="line">filter   = apache-noscript</span><br><span class="line">action   = shorewall</span><br><span class="line">           sendmail[name=Postfix, dest=you@example.com]</span><br><span class="line">logpath  = /var/log/httpd/error_log</span><br><span class="line"> </span><br><span class="line">nginx防攻击规则</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">[nginx-http-auth]</span><br><span class="line">enabled = true</span><br><span class="line">filter  = nginx-http-auth</span><br><span class="line">action  = iptables-multiport[name=nginx-http-auth,port="80,443"]</span><br><span class="line">logpath = /var/log/nginx/error.log</span><br><span class="line"> </span><br><span class="line">lighttpd防规击规则</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">[suhosin]</span><br><span class="line">enabled  = true</span><br><span class="line">filter   = suhosin</span><br><span class="line">action   = iptables-multiport[name=suhosin, port="http,https"]</span><br><span class="line"><span class="meta">#</span><span class="bash"> adapt the following two items as needed</span></span><br><span class="line">logpath  = /var/log/lighttpd/error.log</span><br><span class="line">maxretry = 2</span><br><span class="line">[lighttpd-auth]</span><br><span class="line">enabled  = true</span><br><span class="line">filter   = lighttpd-auth</span><br><span class="line">action   = iptables-multiport[name=lighttpd-auth, port="http,https"]</span><br><span class="line"><span class="meta">#</span><span class="bash"> adapt the following two items as needed</span></span><br><span class="line">logpath  = /var/log/lighttpd/error.log</span><br><span class="line">maxretry = 2</span><br><span class="line"> </span><br><span class="line">vsftpd防攻击规则</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">[vsftpd-notification]</span><br><span class="line">enabled  = true</span><br><span class="line">filter   = vsftpd</span><br><span class="line">action   = sendmail-whois[name=VSFTPD, dest=you@example.com]</span><br><span class="line">logpath  = /var/log/vsftpd.log</span><br><span class="line">maxretry = 5</span><br><span class="line">bantime  = 1800</span><br><span class="line">[vsftpd-iptables]</span><br><span class="line">enabled  = true</span><br><span class="line">filter   = vsftpd</span><br><span class="line">action   = iptables[name=VSFTPD, port=ftp, protocol=tcp]</span><br><span class="line">           sendmail-whois[name=VSFTPD, dest=you@example.com]</span><br><span class="line">logpath  = /var/log/vsftpd.log</span><br><span class="line">maxretry = 5</span><br><span class="line">bantime  = 1800</span><br><span class="line"> </span><br><span class="line">pure-ftpd防攻击规则</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">[pure-ftpd]</span><br><span class="line">enabled  = true</span><br><span class="line">filter   = pure-ftpd</span><br><span class="line">action   = iptables[name=pure-ftpd, port=ftp, protocol=tcp]</span><br><span class="line">logpath  = /var/log/pureftpd.log</span><br><span class="line">maxretry = 2</span><br><span class="line">bantime  = 86400</span><br><span class="line"> </span><br><span class="line">mysql防攻击规则</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">[mysqld-iptables]</span><br><span class="line">enabled  = true</span><br><span class="line">filter   = mysqld-auth</span><br><span class="line">action   = iptables[name=mysql, port=3306, protocol=tcp]</span><br><span class="line">           sendmail-whois[name=MySQL, dest=root, sender=fail2ban@example.com]</span><br><span class="line">logpath  = /var/log/mysqld.log</span><br><span class="line">maxretry = 5</span><br><span class="line"> </span><br><span class="line">apache phpmyadmin 防攻击规则</span><br><span class="line"> </span><br><span class="line">[apache-phpmyadmin]</span><br><span class="line">enabled  = true</span><br><span class="line">filter   = apache-phpmyadmin</span><br><span class="line">action  = iptables[name=phpmyadmin, port=http,https protocol=tcp]</span><br><span class="line">logpath  = /var/log/httpd/error_log</span><br><span class="line">maxretry = 3</span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/fail2ban/filter.d/apache-phpmyadmin.conf</span></span><br><span class="line">将以下内容粘贴到apache-phpmyadmin.conf里保存即可以创建一个apache-phpmyadmin.conf文件.</span><br><span class="line"><span class="meta">#</span><span class="bash"> Fail2Ban configuration file</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Bans bots scanning <span class="keyword">for</span> non-existing phpMyAdmin installations on your webhost.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Author: Gina Haeussge</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"> </span><br><span class="line">[Definition]</span><br><span class="line"> </span><br><span class="line">docroot = /var/www</span><br><span class="line">badadmin = PMA|phpmyadmin|myadmin|mysql|mysqladmin|sqladmin|mypma|admin|xampp|mysqldb|mydb|db|pmadb|phpmyadmin1|phpmyadmin2</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> Option:  failregex</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Notes.:  Regexp to match often probed and not available phpmyadmin paths.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Values:  TEXT</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">failregex = [[]client []] File does not exist: %(docroot)s/(?:%(badadmin)s)</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> Option:  ignoreregex</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Notes.:  regex to ignore. If this regex matches, the line is ignored.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Values:  TEXT</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">ignoreregex =</span><br></pre></td></tr></table></figure><p>重启 fail2ban 服务：<br><code>service fail2ban restart</code></p><p><strong>PS：</strong><br>写在最后，在安装完fail2ban后请立即重启一下fail2ban,看是不是能正常启动，因为在后边我们配置完规则后如果发生无法启动的问题我们可以进行排查.如果安装完后以默认规则能够正常启动，而配置完规则后却不能够正常启动，请先检查一下你 /var/log/ 目录下有没有规则里的 logpath= 后边的文件，或者这个文件的路径与规则里的是不是一致. 如果不一致请在 logpath 项那里修改你的路径， 如果你的缓存目录里没有这个文件，那么请你将该配置项的 enabled 项目的值设置为 false. 然后再进行重启fail2ban，这样一般不会有什么错误了</p><p><a href="https://www.cnblogs.com/carbon3/p/5607704.html" target="_blank" rel="noopener">fail2ban的介绍</a></p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>阿里云 VPS 开启之路之二</title>
      <link href="/2017/08/24/%E9%98%BF%E9%87%8C%E4%BA%91-VPS-%E5%BC%80%E5%90%AF%E4%B9%8B%E8%B7%AF%E4%B9%8B%E4%BA%8C/"/>
      <url>/2017/08/24/%E9%98%BF%E9%87%8C%E4%BA%91-VPS-%E5%BC%80%E5%90%AF%E4%B9%8B%E8%B7%AF%E4%B9%8B%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h4 id="在客户端来看，SSH提供两种级别的安全验证。">在客户端来看，SSH提供两种级别的安全验证。</h4><blockquote><ul><li>第一种级别（基于密码的安全验证），知道帐号和密码，就可以登录到远程主机，并且所有传输的数据都会被加密。</li><li>第二种级别（基于<strong>密钥</strong>的安全验证），需要依靠密钥，也就是你必须为自己创建一对密钥，并把公有密钥放在需要访问的服务器上。</li></ul></blockquote><p>这里要讨论的<strong>ssh密钥认证自动登录</strong>正是基于第二种级别的安全验证方式。</p><a id="more"></a><ol><li><p>本地创建公钥</p><p>打开终端运行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f filename -C  'your email@domain.com'</span><br></pre></td></tr></table></figure></li><li><p>在 VPS 对应用户目录下新建对应目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.ssh</span><br><span class="line">chmod 700 ~/.ssh</span><br><span class="line">cd .ssh</span><br><span class="line">touch authorized_keys</span><br><span class="line">chmod 600 authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>把生成的公钥复制到VPS 服务，并且合并到authorized_keys</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -P port ~/.ssh/*.pub username@hostname:/home/name/.ssh/</span><br><span class="line">cat *.pub authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>快捷登录</p><ol><li><p>修改 config</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.ssh/config  #没有就新建</span><br></pre></td></tr></table></figure></li><li><p>添加如下配置文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host vps</span><br><span class="line">    HostName hostname</span><br><span class="line">    IdentityFile ~/.ssh/cert</span><br><span class="line">   <span class="built_in"> Port </span>port</span><br><span class="line">   <span class="built_in"> User </span>username</span><br></pre></td></tr></table></figure></li><li><p>保存即可登录<br> <code>ssh vps</code>即可自动登录</p></li><li><p>如果你本地终端使用的是<strong>zsh</strong>，给 <strong>zsh</strong>添加别名</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo "alias ssh-to-username='ssh username@hostname'" &gt;&gt; ~/.zshrc #将username和hostname替换为你的服务器信息</span><br><span class="line">source ~/.zshrc   #重新加载更改后的zshrc文件</span><br><span class="line">ssh-to-username   #使用别名，一条命令即可登录你的ssh服务器</span><br></pre></td></tr></table></figure><p> ​</p></li><li><p>最后关闭密码登录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p> 修改如下内容</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">PasswordAuthentication yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改为如下内容：</span></span></span><br><span class="line">PasswordAuthentication no</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#使用命令重启ssh服务：</span></span></span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><p> ​</p></li></ol></li></ol>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>阿里云 VPS 开启之路之一</title>
      <link href="/2017/08/24/%E9%98%BF%E9%87%8C%E4%BA%91-VPS-%E5%BC%80%E5%90%AF%E4%B9%8B%E8%B7%AF%E4%B9%8B%E4%B8%80/"/>
      <url>/2017/08/24/%E9%98%BF%E9%87%8C%E4%BA%91-VPS-%E5%BC%80%E5%90%AF%E4%B9%8B%E8%B7%AF%E4%B9%8B%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>阿里云是的香港服务器对于的国内用户来说是一个很好的低延迟的中转。以下是一些第一次启动可能需要做的事情。</p><ol><li><p>卸载阿里云安骑士</p><p>下载 <code>wget http://update.aegis.aliyun.com/download/uninstall.sh</code></p><p>执行下列命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x uninstall.sh</span><br><span class="line">./uninstall.sh</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>卸载阿里云aliyun.service</p><p><code>killall aliyun-service &amp;&amp; echo &quot;&quot; &gt;/usr/sbin/aliyun-service</code></p></li><li><p>删除阿里云登录界面欢迎信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/motd</span><br><span class="line"><span class="meta">#</span><span class="bash">编辑/删除倒数第二行的 Welcome to Alibaba Cloud Elastic Compute Service !</span></span><br></pre></td></tr></table></figure></li><li><p>添加用户，授予 <code>sudo</code>权限</p><ol><li><p>添加用户</p><p><code>adduser username</code></p></li><li><p>给该用户添加密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">passwd username</span><br><span class="line">New password:</span><br><span class="line">Retype new password:</span><br></pre></td></tr></table></figure></li><li><p>授予 sudo 权限</p><p><code>vi /etc/sudoers</code>然后找到，如下添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Allow root to run any commands anywhere</span></span></span><br><span class="line">rootALL(ALL) = ALL</span><br><span class="line">usernameALL(ALL) = ALL   # username 是新建的用户名</span><br></pre></td></tr></table></figure><p> 在保存的时候可能需要<code>wq!</code></p></li></ol></li><li><p>修改 SSH 默认端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line">Port 2000</span><br><span class="line">MaxAuthTries 6</span><br><span class="line">PermitEmptyPasswords no</span><br><span class="line">service ssh restart  #CentOS6</span><br><span class="line">systemctl restart sshd #CentOS7</span><br></pre></td></tr></table></figure></li><li><p>禁止 root 用户登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line">PermitRootLogin no</span><br><span class="line">service ssh restart  #CentOS6</span><br><span class="line">systemctl restart sshd #CentOS7</span><br></pre></td></tr></table></figure></li></ol><p>现在就可以用新建的那个用户登录了。</p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>升级 Python 的模块</title>
      <link href="/2017/08/21/%E5%8D%87%E7%BA%A7-Python-%E7%9A%84%E6%A8%A1%E5%9D%97/"/>
      <url>/2017/08/21/%E5%8D%87%E7%BA%A7-Python-%E7%9A%84%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<p>pip 当前内建命令并不支持升级所有已安装的Python模块。</p><p>列出当前安装的包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure><a id="more"></a><p>列出可升级的包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list --outdate</span><br></pre></td></tr></table></figure><p>升级一个包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade requests  // mac,linux,unix 在命令前加 sudo -H</span><br></pre></td></tr></table></figure><p>升级所有可升级的包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip freeze --local | grep -v <span class="string">'^-e'</span> | cut -d = -f <span class="number">1</span>  | xargs -n1 pip install -U</span><br><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> `pip list -o --format legacy|awk <span class="string">'&#123;print $1&#125;'</span>` ; do pip install --upgrade $i; done</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>卸载 JDK for Mac</title>
      <link href="/2017/08/18/%E5%8D%B8%E8%BD%BD-JDK-for-Mac/"/>
      <url>/2017/08/18/%E5%8D%B8%E8%BD%BD-JDK-for-Mac/</url>
      <content type="html"><![CDATA[<p>由于 Unifi 事件，根据官网提供的文档，怀疑是 JDK 版本过高导致。那么就需要卸载新版本 Java。Oracle 官方提供的了解决方案。 </p><p>本文适用于:</p><ul><li><strong>平台: </strong>Macintosh OS X</li><li><strong>Java 版本: </strong>7.0, 8.0</li></ul><a id="more"></a><p>使用终端卸载 Oracle Java<strong>注</strong>：要卸载 Java，必须具有管理员权限，并且必须以 root 用户身份或者使用 <code>sudo</code> 工具来执行删除命令。按照下面所示，删除一个目录和一个文件（符号链接）：单击位于停靠栏中的 <strong>Finder</strong> 图标单击<strong>实用程序</strong>文件夹双击<strong>终端</strong>图标在“终端”窗口中，复制和粘贴命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -fr /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin</span><br><span class="line">sudo rm -fr /Library/PreferencesPanes/JavaControlPanel.prefPane</span><br><span class="line">sudo rm -fr ~/Library/Application\ Support/Java</span><br></pre></td></tr></table></figure><p>请勿尝试通过从 <code>/usr/bin</code> 删除 Java 工具来卸载 Java。此目录是系统软件的一部分，下次对操作系统执行更新时，Apple 会重置所有更改。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>重置 MacBook 的网卡</title>
      <link href="/2017/08/16/%E9%87%8D%E7%BD%AE-MacBook-%E7%9A%84%E7%BD%91%E5%8D%A1/"/>
      <url>/2017/08/16/%E9%87%8D%E7%BD%AE-MacBook-%E7%9A%84%E7%BD%91%E5%8D%A1/</url>
      <content type="html"><![CDATA[<p>手贱用 Unifi 家的控制器来设置 AP，期间不知道是 Java 的 SDK 版本问题还是什么情况，就是突然连接 Unifi 家设置的 WIFI，但是不能上网。连接别的设备分享出来的 WIFI 就 OK 正常。但是手机连接它家的 WIFI 就能上网。所以猜测应该是 Unifi 的那个控制器搞坏了网卡设置。</p><p>那么问题来了。MacBook Pro 如何重置网卡的设置。方法如下：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Library/Preferences/SystemConfiguration/</span><br><span class="line">sudo mv preferences.plist preferences.plist.bak</span><br></pre></td></tr></table></figure><p>然后输入密码，重启。</p><p>网络配置会丢失，特殊设置提前备份。</p>]]></content>
      
      <categories>
          
          <category> Apple </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>IMEI 和 IMSI 区别</title>
      <link href="/2017/08/08/IMEI-%E5%92%8C-IMSI-%E5%8C%BA%E5%88%AB/"/>
      <url>/2017/08/08/IMEI-%E5%92%8C-IMSI-%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>IMSI号：<br>IMSI是国际移动用户识别码的简称(International Mobile Subscriber Identity)<br>它是在公众陆地移动电话网（PLMN）中用于唯一识别移动用户的一个号码。在GSM网络，这个号码通常被存放在SIM卡中。IMSI共有15位，其结构如下： </p><a id="more"></a><p><strong>MCC+MNC+MSIN </strong></p><p><strong>MCC：</strong>Mobile Country Code，移动国家码，MCC的资源由国际电联（ITU）统一分配和管理，唯一识别移动用户所属的国家，共3位，中国为460; </p><p><strong>MNC:</strong>Mobile NetworkCode，移动网络码，共2位 </p><p>在中国，中国移动TD系统使用00，中国联通GSM系统使用01，中国移动GSM系统使用02，中国电信CDMA系统使用03，</p><p>合起来就是（也是Android手机中APN配置文件中的代码）： </p><p>中国移动：46000 46002 </p><p>中国联通：46001 </p><p>中国电信：46003 </p><p>举例，一个典型的IMSI号码为460030912121001 </p><p><strong>MSIN号：</strong></p><p>MSIN:Mobile Subscriber IdentificationNumber，为移动客户识别码，采用等长11位数字构成，其结构如下：</p><p>09+M0M1M2M3+ABCD</p><p>其中的M0M1M2M3和MDN号码中的H0H1H2H3可存在对应关系，ABCD四位为自由分配。</p><p>唯一地识别国内GSM移动通信网中移动客户。所以要区分是移动还是联通，只需取得SIM卡中的MNC字段即可 </p><p>可以看出IMSI在MSIN号码前加了MCC即NMSI，可以区别出每个用户的来自的国家，因此可以实现国际漫游。在同一个国家内，如果有多个移动网络运营商，可以通过MNC来进行区别.</p><h1 id="IMEI号：">IMEI号：</h1><p>IMEI是International Mobile Equipment Identity （国际移动设备标识）的简称 </p><p>即通常所说的手机序列号，用于在手机网络中识别每一部独立的手机，是国际上公认的手机标志序号，相当于移动电话的身份证。国际移动装备辨识码一般贴于机身背面与外包装上，同时也存在于手机记忆体中，通过输入*#06#即可查询。</p><p>IMEI由15位数字组成的”电子串号”，它与每台手机一一对应，而且该码是全世界唯一的 </p><p>其组成为： </p><ol><li>前6位数(TAC)是”型号核准号码”，一般代表机型 </li><li>接着的2位数(FAC)是”最后装配号”，一般代表产地 </li><li>之后的6位数(SNR)是”串号”，一般代表生产顺序号 </li><li>最后1位数(SP)通常是”0″，为检验码，目前暂备用</li></ol><p><strong>来源</strong></p>]]></content>
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python 字符编码</title>
      <link href="/2017/08/07/Python-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
      <url>/2017/08/07/Python-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>字符串也是一种数据类型，但比较特殊的是字符串存在一个编码问题，也就是我们怎么用计算机来表示相应的字符并存储。在编程语言中，我们经常会处理文本编码之间的转化问题，因为文本可能存在不同的编码，比如 ASCII、GBK、UTF-8 等等。</p><a id="more"></a><p>如果希望正确的处理文本，就必须了解<code>字符</code>的抽象概念。我们可以认为字符表示的是文本中的单个符号。更重要的是，一个字符不是一个字节。比如，”中”在文本中是一个字符，但它存储在计算机中时却不是一个字节。一个字符有许多表示方法，不同的表示方法会使用不同的字节数，这就是所谓的编码。<strong>字符就是文本中最小的单元</strong>。</p><p>由于计算机是美国人发明的，因此，最早只有 127 个字母被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为 ASCII 编码。但是计算机被广泛应用之后，ASCII 编码已经不足以表示世界上的各种语言，于是后来便出现了 Unicode 编码。</p><p><code>Unicode</code> 是一种编码规范， 用来统一表示世界上的各种语言。Unicode 只是规定如何编码，并没有规定如何传输和保存等等，因此 Unicode 编码有不同的实现方式，比如：UTF-8、UTF-16 。<code>UTF-8</code> 编码把一个 Unicode 字符根据不同的数字大小编码成 1-6 个字节，常用的英文字母被编码成 1 个字节，汉字通常是 3 个字节，只有很生僻的字符才会被编码成 4-6 个字节。Unicode 以大家都认可的方式定义了一系列的字符，可以将其理解成一个字符数据库，每个字符都与唯一的数字关联，称为 <code>code point</code>。这样，英文大写字母 A 的 codepoint 是 U+0041，而欧元符号的 codepoint 是 U+20A0。一个文本字符串就是一系列的 <code>code point</code>，表示字符串中每个字符元素。</p><p>Python 由荷兰人 <code>Guido van Rossum</code> 于 1989 年发明，第一个公开发行版发行于 1991 年。Guido 在设计之初并没有关心编码问题（当时他也不知道后来会出现编码问题）, 而且 Python 的诞生比 Unicode 标准发布的时间要早，因此 Python 默认编码在 Python3 之前是 ASCII。查看 Python 的默认编码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getdefaultencoding()</span><br><span class="line"><span class="string">'ascii'</span></span><br></pre></td></tr></table></figure><p>这么默认编码有什么用呢？如果你在 Python 中进行编码和解码的时候，不指定编码方式，那么 Python 就会使用 <code>defaultencoding</code>。</p><p>字符串在 Python 内部的表示是 Unicode 编码, 在 Python 内部使用两个字节来存储一个 Unicode。也就是 Python 在内存中统一使用 Unicode 编码存储字符数据，当需要保存到硬盘或者需要传输的时候，就转换为其他编码，比如 UTF-8。</p><p>在 Python2 中，字符串的类型有两种，即 str 和 unicode，他们都是 basestring 的子类。<code>unicode</code> 表示 Unicode 字符串（文本字符串），<code>str</code> 表示<strong>字节</strong>字符串（二进制数据），由 unicode 经过编码后的字节组成。也就是说：</p><ul><li><strong>str</strong> 存储的是已经编码后的字节序列，输出时看到每个字节用 16 进制表示，以<code>\x</code>开头。每个汉字会占用3个字节的长度。</li><li><strong>unicode</strong> 是“字符”串，存储的是编码前的字符，输出是看到字符以<code>\u</code>开头。每个汉字占用一个长度。定义一个 Unicode 对象时，以 <code>u</code> 开头。</li></ul><p>在 Python 中 <code>Unicode</code> 被视为是一种中间码，如果要在不同的编码间进行转化，通常是先将字符串解码（decode）成 Unicode 编码，再从 Unicode 编码（encode）成另一种编码：</p><ul><li><strong>decode</strong>: 的作用是将其他编码的字符串转换成 Unicode 编码，例如: name.decode(“GB2312”)，表示将 GB2312 编码的字符串 name 转换成 Unicode 编码</li><li><strong>encode</strong>: 的作用是将 Unicode 编码转换成其他编码的字符串例如，例如: name.encode(”GB2312“)，表示 Unicode 编码的字符串 name 转换成 GB2312 编码</li></ul><p>我们会在很多 Python 的源码文件的头部看到如下的声明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> coding:utf-8</span></span><br></pre></td></tr></table></figure><p>这表示声明源代码中的文本编码为 UTF-8，也就是告诉 Python 解释器将文件中的文本视为 UTF-8 编码的字符串，因此声明的编码应该与文件的编码保持一致。在代码中我们通常会处理一些其他来源的文本，比如网络，它们的编码不一定也是 UTF-8 的，因此就要进行编码转换。</p><p>Python 试图在字节串和字符串之间以不为人所察觉的方式进行转化。在不同的转换中，在条件允许的情况下，Python 会试图在字节串和 unicode 字符串直接进行转换。例如将字节串和 unicode 字节串连接到一起时。但是不使用 encoding 就在不同类型之间进行转换是没有意义的。所以 Python 依赖一个 <code>默认编码</code>，该编码由 <code>sys.setdefaultencoding()</code> 指定。在大多数平台上，默认的是 ASCII 编码。但对于所有转换，使用这种编码几乎都是错误的。如果不手动指定编码就调用 str() 或 unicode() ，或是函数以字符串作为参数，但传递的是其他类型的参数时，都会使用这个默认编码。这就是很多时候出现 <code>UnicodeEncodeError</code> 和 <code>UnicodeDecodeError</code> 错误的原因，也就是<strong>字符串对象互相转化时没有指定字符编码</strong>。</p><p>例如，如果对 unicode 和 str 类型通过 <code>+</code> 拼接时，输出结果是 unicode 类型，相当于先将 str 类型的字符串通过 decode() 方法解码成 unicode 再拼接。此时如果解码时没有明确指明编码类型，可能会出现错误。</p><p>解决这个问题的一个办法是，调用 <code>sys.setdefaultencoding()</code> 将默认的编码设置为真正会用到的编码。但这样仅仅是将问题隐藏起来，虽然这样刚开始能解决一些文本处理问题。但缺乏实际可行性，因为许多应用，特别是网络应用，在不同的地方会使用不同的文本编码。</p><p>要注意的一点是，对 Unicode 进行编码和对 str 进行编码都是错误的。即不要对 str 使用 encode，不要对 unicode 使用 decode（事实上可以对 str 进行 encode 的，但不建议）。</p><p>下面是一些处理 Python 中字符编码的建议：</p><ul><li>所有文本字符串都应该是 unicode 类型，而不是 str 类型。</li><li>若要将字节串解码成字符串，需要使用正确的解码，即 var.decode(encoding)，如： var.decode(‘utf-8’)；将文本字符串编码成字节，使用 var.encode(encoding)。</li><li>永远不要对 unicode 字符串使用 str() ，也不要在不指定编码的情况下就对字节串使用 unicode() 。</li><li>当应用从外部读取数据时，应将其视为字节串，即 str 类型的，接着调用 <code>.decode()</code> 将其解释成文本。同样，在将文本发送到外部时，总是对文本调用 <code>.encode()</code>。</li><li>对标准流进行操作时，可以改变环境变量 <code>PYTHONIOENCODING</code> 的值来设置标准流的默认编码， <code>sys.stdin.encoding</code> 和 <code>sys.stdout.encoding</code> 的值为期望的编码。</li></ul><p>以上内容的讨论都仅限于 Python2，在 Python3 中已经修复了这些问题，可以正确的处理 unicode 和字符串。</p><p>来源：</p><p><a href="https://kuanghy.github.io/2016/10/14/python-encoding" target="_blank" rel="noopener">https://kuanghy.github.io/2016/10/14/python-encoding</a></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>模块zlib 压缩与解压</title>
      <link href="/2017/07/23/%E6%A8%A1%E5%9D%97zlib-%E5%8E%8B%E7%BC%A9%E4%B8%8E%E8%A7%A3%E5%8E%8B/"/>
      <url>/2017/07/23/%E6%A8%A1%E5%9D%97zlib-%E5%8E%8B%E7%BC%A9%E4%B8%8E%E8%A7%A3%E5%8E%8B/</url>
      <content type="html"><![CDATA[<p>模块<code>zlib</code>用来解压和压缩字符串或者文件，能够自动识别压缩格式来自动解压。</p><p>字符串的解压与字符串：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line">message = <span class="string">'abcd1234'</span></span><br><span class="line">compressed = zlib.compress(message)</span><br><span class="line">decompressed = zlib.decompress(compressed)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'original:'</span>, repr(message)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'compressed:'</span>, repr(compressed)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'decompressed:'</span>, repr(decompressed)</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">original: 'abcd1234'</span><br><span class="line">compressed: 'x\x9cKLJN1426\x01\x00\x0b\xf8\x02U'</span><br><span class="line">decompressed: 'abcd1234'</span><br></pre></td></tr></table></figure><p>文件的压缩和解压文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span><span class="params">(infile, dst, level=<span class="number">9</span>)</span>:</span></span><br><span class="line">    infile = open(infile, <span class="string">'rb'</span>)</span><br><span class="line">    dst = open(dst, <span class="string">'wb'</span>)</span><br><span class="line">    compress = zlib.compressobj(level)</span><br><span class="line">    data = infile.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> data:</span><br><span class="line">        dst.write(compress.compress(data))</span><br><span class="line">        data = infile.read(<span class="number">1024</span>)</span><br><span class="line">    dst.write(compress.flush())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decompress</span><span class="params">(infile, dst)</span>:</span></span><br><span class="line">    infile = open(infile, <span class="string">'rb'</span>)</span><br><span class="line">    dst = open(dst, <span class="string">'wb'</span>)</span><br><span class="line">    decompress = zlib.decompressobj()</span><br><span class="line">    data = infile.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> data:</span><br><span class="line">        dst.write(decompress.decompress(data))</span><br><span class="line">        data = infile.read(<span class="number">1024</span>)</span><br><span class="line">    dst.write(decompress.flush())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    compress(<span class="string">'in.txt'</span>, <span class="string">'out.txt'</span>)</span><br><span class="line">    decompress(<span class="string">'out.txt'</span>, <span class="string">'out_decompress.txt'</span>)</span><br></pre></td></tr></table></figure><p>生成的文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out_decompress.txt  out.txt</span><br></pre></td></tr></table></figure><p>PS：<code>zlib.compress</code>用于压缩流数据。参数<code>string</code>指定了要压缩的数据流，参数level指定压缩的级别，它的取值范围是1到9。压缩速度与压缩率成反比，1表示压缩速度最快，而压缩率最低，而9则表示压缩速度最慢但压缩率最高</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python递归实现字典中的Unicode转换成str</title>
      <link href="/2017/07/21/Python%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E5%AD%97%E5%85%B8%E4%B8%AD%E7%9A%84Unicode%E8%BD%AC%E6%8D%A2%E6%88%90str/"/>
      <url>/2017/07/21/Python%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E5%AD%97%E5%85%B8%E4%B8%AD%E7%9A%84Unicode%E8%BD%AC%E6%8D%A2%E6%88%90str/</url>
      <content type="html"><![CDATA[<p>由于<code>josn</code>库的<code>loads</code>方法会把类型全部转换成 Unicode。如果想要变成str对象的话，就要自己去encode。</p><p>试试如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">byteify</span><span class="params">(input)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(input, dict):</span><br><span class="line">        <span class="keyword">return</span> &#123;byteify(key): byteify(value) <span class="keyword">for</span> key, value <span class="keyword">in</span> input.iteritems()&#125;</span><br><span class="line">    <span class="keyword">elif</span> isinstance(input, list):</span><br><span class="line">        <span class="keyword">return</span> [byteify(element) <span class="keyword">for</span> element <span class="keyword">in</span> input]</span><br><span class="line">    <span class="keyword">elif</span> isinstance(input, unicode):</span><br><span class="line">        <span class="keyword">return</span> input.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> input</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python 列出当前目录的文件和文件夹</title>
      <link href="/2017/07/21/Python-%E5%88%97%E5%87%BA%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>/2017/07/21/Python-%E5%88%97%E5%87%BA%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E7%9A%84%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      <content type="html"><![CDATA[<p>只获取当前目录的文件和文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list = os.listdir(rootdir)<span class="comment">#列出目录下的所有文件和目录</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> list:</span><br><span class="line">    filepath = os.path.join(rootdir,line)</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(filepath):<span class="comment">#如果filepath是目录</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"dir:"</span> + filepath</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"file:"</span> + filepath</span><br></pre></td></tr></table></figure><a id="more"></a><p>如果需要遍历文件夹下的所以文件，可以使用os.walk()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">os.walk()<span class="comment">#返回一个三元素的tuple：当前路径、子文件夹名称、文件列表。</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">print</span> filename</span><br><span class="line">    <span class="keyword">for</span> dirname <span class="keyword">in</span> dirs:</span><br><span class="line">        <span class="keyword">print</span> dirname</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Mac使用 Git和 Github 连接</title>
      <link href="/2017/06/28/Mac%E4%BD%BF%E7%94%A8-Git%E5%92%8C-Github-%E8%BF%9E%E6%8E%A5/"/>
      <url>/2017/06/28/Mac%E4%BD%BF%E7%94%A8-Git%E5%92%8C-Github-%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<p>记录整理下怎么在 MacBook 上使用 Git 连接 Github。</p><p><strong>Git 的安装有几个方式：</strong></p><ol><li><p>源码安装：</p><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git 官网下载地址 for Mac</a></p><a id="more"></a></li><li><p>XCode自带：</p><p>XCode 自带 Git 程序，但是因为权限问题，不建议使用。</p></li><li><p>Homebrew 安装：</p><p>这个是最简便的方式，如果 MacBook 安装了 Homebrew，那么安装 Git 就一个命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install git</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol><p><strong>创建 SSH KEY</strong></p><p>按照提示输入以下信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> $</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span> </span></span><br><span class="line"><span class="meta"> #</span><span class="bash">记得输入你的github账号的邮箱 </span></span><br><span class="line"><span class="meta"> #</span><span class="bash">会输出下面语句</span></span><br><span class="line"> </span><br><span class="line"><span class="meta"> $</span><span class="bash"> Generating public/private rsa key pair. Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save thekeys  (/Users/your_user_directory/.ssh/id_rsa): </span></span><br><span class="line"> </span><br><span class="line"><span class="meta"> #</span><span class="bash"> 这里需要按下 enter 键就好</span></span><br><span class="line"> </span><br><span class="line"><span class="meta"> #</span><span class="bash">按下 enter 之后，又会出现下面的提示：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">输入回车后提示输入一个类似于密码的自定义的通行证号，如果直接回车则为空</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">Enter passphrase(empty <span class="keyword">for</span> no passphrase):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">提示重新输入以便确认输入是否正确</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">Enter same passphraseagain:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">随后，你会收到一大串的提示，大概的意思是告诉你创建好了 id_rsa 和 id_rsa.pub 文件。</span></span><br></pre></td></tr></table></figure><p><strong>在 Github 上添加 SSH KEY</strong></p><ol><li>在Github中添加ssh（如图示）：</li><li>登陆Github，选择Account Settings–&gt;SSH Keys 添加ssh</li><li>Title：<a href="mailto:xxxxx@xxxx.com" target="_blank" rel="noopener">xxxxx@xxxx.com</a></li><li>Key：打开你生成的id_rsa.pub文件，将其中内容拷贝至此。创建成功会有相应的提示。</li></ol><p><img src="http://ww3.sinaimg.cn/large/006MhlIggy1fh0vtlz83jj31k90ryn24" alt="Github"></p><p><strong>验证连接</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh -T git@github.com</span></span><br></pre></td></tr></table></figure><p>第一次会出现这个信息：</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">   The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established. </span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">   RSA key fingerprint is XXXXXXXXX </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">   Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)?</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>输入 yes：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p><strong>配置个人信息</strong></p><p>设置本地 Git 的个人信息，来方便Git 进行 commit 的追踪管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">git config --global user.name <span class="string">"your real name"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">git config --global user.email <span class="string">"xxxxx@gmail.com"</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Install PyQt5 for Macbook</title>
      <link href="/2017/06/20/install-PyQt5-for-Macbook/"/>
      <url>/2017/06/20/install-PyQt5-for-Macbook/</url>
      <content type="html"><![CDATA[<p>一份关于在 Macbook 上安装 PyQt5 的介绍和汇总。主要</p><a id="more"></a><p>1、 首先安装基础软件</p><ol><li><p>这个基本是使用 MacBook 的必备软件套件。<a href="https://developer.apple.com/xcode/downloads/" target="_blank" rel="noopener">Xcode下载</a></p></li><li><p>安装 Homebrew，这样后续可以节省不少时候，安装管理也会很方便。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><p>Homebrew 会将软件包安装到独立目录，并将其文件软链接至 <code>/usr/local</code> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> find Cellar</span></span><br><span class="line">Cellar/wget/1.16.1</span><br><span class="line">Cellar/wget/1.16.1/bin/wget</span><br><span class="line">Cellar/wget/1.16.1/share/man/man1/wget.1</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -l bin</span></span><br><span class="line">bin/wget -&gt; ../Cellar/wget/1.16.1/bin/wget</span><br></pre></td></tr></table></figure></li><li><p>用上面安装好的 Homebrew 来安装 PyQt5 和 Python</p><p>不推荐用 Xcode 自带的 Python，因为模块管理每次都需要输入密码比较麻烦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install python3</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew install sip</span></span><br></pre></td></tr></table></figure></li><li><p>用上面安装好的 Python3 的 pip3 模块来安装所需模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip3 install pyqt5</span></span><br></pre></td></tr></table></figure></li><li><p>安装 Qt</p><p>这个我直接选择的是去官网下载免费的开源版本。需要回答几个问题，注册个账号。</p><p><a href="https://www.qt.io/cn/download/" target="_blank" rel="noopener">Qt 下载页面</a>选择对的系统版本。</p></li></ol><p>以上：基础软件到此基本就安装好了。Qt 也自带Qt Creater 这个 IDE。</p><p>但是，最好的 IDE除了神级的 VS，就是JetBrain 家族的了。写 Python 当然最好是 PyCharm了。所以还想继续折腾的，参考以下链接。</p><p>参考链接：</p><ol><li><a href="http://gavinliu.cn/2016/01/17/Python-Mac%E4%B8%8BPyCharm-PyQt5%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">Python - Mac下PyCharm&amp;PyQt5环境搭建</a></li><li><a href="https://gist.github.com/guillaumevincent/10983814" target="_blank" rel="noopener">Guide to install PyQt5 on Mac OS X with python 3.4 virtualenv</a></li></ol>]]></content>
      
      <categories>
          
          <category> Apple </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python中执行 Sehll 命令</title>
      <link href="/2017/06/13/Python%E4%B8%AD%E6%89%A7%E8%A1%8C-Sehll-%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/06/13/Python%E4%B8%AD%E6%89%A7%E8%A1%8C-Sehll-%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>在日常的使用中，会经常遇到需要执行 Shell 命令的情况，但是很多时候，在 Python 下执行也是很方便的。下面介绍四种方法以供参考。</p><a id="more"></a><ol><li><p>OS模块中的<code>os.system()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;os.system(<span class="string">'ls'</span>)</span><br><span class="line"><span class="number">123.</span>txt</span><br></pre></td></tr></table></figure></li><li><p><code>popen()</code> 得到一个字符串，需要处理下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str = os.popen(<span class="string">"ls"</span>).read()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = str.split(<span class="string">"\n"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> b <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">print</span> b</span><br></pre></td></tr></table></figure><p>​</p></li><li><p><code>commands</code>模块#可以很方便的取得命令的输出（包括标准和错误输出）和执行状态位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> commands</span><br><span class="line">a,b = commands.getstatusoutput(<span class="string">'ls'</span>)</span><br><span class="line">a<span class="comment">#是退出状态</span></span><br><span class="line">b<span class="comment">#是输出的结果。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> commands</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b = commands.getstatusoutput(<span class="string">'ls'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> a</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> b</span><br><span class="line">anaconda-ks.cfg</span><br><span class="line">install.log</span><br><span class="line">install.log.syslog</span><br></pre></td></tr></table></figure><p><code>commands.getstatusoutput(cmd)</code>返回 <code>status,output</code></p><p><code>commands.getoutput(cmd)</code>只返回输出结果</p></li><li><p><code>subprocess</code>模块</p><p>使用<code>subprocess</code>模块可以创建新的进程，可以与新建进程的输入/输出/错误管道连通，并可以获得新建进程执行的返回状态。</p><p>使用<code>subprocess</code>模块的目的是替代<code>os.system()</code>、<code>os.popen*()</code>、<code>commands.*</code>等旧的函数或模块。</p><ol><li><p><code>subprocess.call(command, shell=True)</code>直接打印结果</p></li><li><p><code>subprocess.Popen(command, shell=True)</code> 也可以是</p><p><code>subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)</code>这样就可以输出结果了。</p><p>如果<code>command</code>不是一个可执行文件，<code>shell=True</code>是不可省略的。</p></li></ol></li></ol><p>以上就是四种方法。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>使用 Runfus 为 Windows10 创建 USB 启动盘</title>
      <link href="/2017/06/04/%E4%BD%BF%E7%94%A8-Runfus-%E4%B8%BA-Windows10-%E5%88%9B%E5%BB%BA-USB-%E5%90%AF%E5%8A%A8%E7%9B%98/"/>
      <url>/2017/06/04/%E4%BD%BF%E7%94%A8-Runfus-%E4%B8%BA-Windows10-%E5%88%9B%E5%BB%BA-USB-%E5%90%AF%E5%8A%A8%E7%9B%98/</url>
      <content type="html"><![CDATA[<p><a href="https://rufus.akeo.ie/?locale=zh_CN" target="_blank" rel="noopener">Rufus</a> 是一个可以帮助格式化和创建可引导USB闪存盘的工具，比如 USB 随身碟，记忆棒等等。</p><p>在如下场景中会非常有用：</p><ul><li>你需要把一些可引导的ISO格式的镜像（Windows，Linux，UEFI等）创建成USB安装盘的时候</li><li>你需要使用一个还没有安装操作系统的设备的时候</li><li>你需要从DOS系统刷写BIOS或者其他固件的时候</li><li>你需要运行一个非常底层的工具的时候</li></ul><a id="more"></a><h3 id="前期准备">前期准备</h3><ul><li>Windows ISO镜像（Windows 10）</li><li>Rufus</li><li>U盘（最少4GB）</li></ul><h3 id="关于_Rufus">关于 Rufus</h3><p><img src="http://ww3.sinaimg.cn/large/006MhlIggy1fg9597hxmuj30i30rj79i" alt=""></p><h4 id="支持的语言:">支持的语言:</h4><p>Bahasa Indonesia ,  Bahasa Malaysia ,  Български ,  Čeština ,  Dansk ,  Deutsch ,  Ελληνικά ,  English ,<br>Español ,  Français ,  Hrvatski ,  Italiano ,  Latviešu ,  Lietuvių ,  Magyar ,  Nederlands ,  Norsk ,  Polski ,<br>Português ,  Português do Brasil ,  Русский ,  Română ,  Slovensky ,  Slovenščina ,  Suomi ,  Svenska ,<br>Tiếng Việt ,  Türkçe ,  Українська ,  العربية ,  简体中文 ,  正體中文 ,  日本語 ,  한국어 .</p><h4 id="系统需求">系统需求</h4><p>需要Windows XP以上的操作系统，无所谓32位还是64位，下载后开箱即用。</p><h4 id="Rufus_目前已知（但不限于）的支持的ISO镜像如下：">Rufus 目前已知（但不限于）的支持的ISO镜像如下：</h4><p>Arch Linux ,CentOS , Debian , Fedora ,  Gentoo, Kubuntu ,Linux Mint , OpenSUSE ,Slackware , Ubuntu ,<br>,Windows XP (SP2+) , Windows Server 2003 R2 , Windows Vista , Windows 7 ,<br>Windows 8 , Windows 8.1 , Windows 10 , …</p>]]></content>
      
      <categories>
          
          <category> Soft </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>让 MacBook 读取 txt 文本</title>
      <link href="/2017/05/31/%E8%AE%A9-macbook-%E8%AF%BB%E5%8F%96-txt-%E6%96%87%E6%9C%AC/"/>
      <url>/2017/05/31/%E8%AE%A9-macbook-%E8%AF%BB%E5%8F%96-txt-%E6%96%87%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>请问如何让 MacBook 读取Windows 下的 txt 文本？很多时候，每次打开都是乱码。</p><p>这个就是一个编码转换的问题。Linux 和 MacBook 都提供了一个强大的命令行命令：<code>iconv</code></p><a id="more"></a><p>步骤如下：</p><ol><li>打开terminal，在其中输入：<code>cd [文件所在目录]</code></li><li>回车之后，输入：<code>iconv -c -f GB2312 -t UTF-8 [你要看的文件] &gt;&gt; [新文件的名称]</code></li></ol><p>如上即可。</p><p>PS：需要注意的是，在上述命令中，GB2312指的是原文件的编码，UTF-8是要转换的目的文件的编码。GB2312这个是常用的中文编码，其他还有gbk等等编码，如果这个命令不行可以试试其他编码。UTF-8是MacBook能够识别的编码。</p>]]></content>
      
      <categories>
          
          <category> Apple </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>sshpass 的使用</title>
      <link href="/2017/05/20/sshpass-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/05/20/sshpass-%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>​    ssh远程连接时，每次都提示需要输入密码。需要ssh到多台机器时很不方便。sshpass可以解决这个问题。sshpass可以实现ssh的自动的登录。直接在命令里输入密码，但是安全性的问题需要自己判断。</p><a id="more"></a><h4 id="安装">安装</h4><ol><li><p><strong>Installing on Ubuntu</strong></p><p><code>apt-get install sshpass</code></p></li><li><p><strong>Installing on OS X</strong></p><ul><li><p>开始之前需要安装<code>install xcode and command line tools.</code></p></li><li><p>之后安装Installing with Homebrew</p></li><li><p>由于安全问题，brew 官方默认不允许安装，可以尝试如下方法：</p><p><code>brew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb</code></p></li></ul></li><li><p><strong>源码安装</strong></p><ul><li>Download the <a href="http://sourceforge.net/projects/sshpass/" target="_blank" rel="noopener">Source Code</a></li><li>Extract it and cd into the directory</li><li><code>./configure</code></li><li><code>sudo make install</code></li></ul></li></ol><h4 id="用法介绍">用法介绍</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@zhu ~]<span class="comment"># sshpass --help</span></span><br><span class="line">sshpass: invalid option -- <span class="string">'-'</span></span><br><span class="line">Usage: sshpass [-f|-d|-p|-e] [-hV] <span class="built_in">command</span> parameters</span><br><span class="line">   -f filename   Take password to use from file</span><br><span class="line">   -d number     Use number as file descriptor <span class="keyword">for</span> getting password</span><br><span class="line">   -p password   Provide password as argument (security unwise)</span><br><span class="line">   -e            Password is passed as env-var <span class="string">"SSHPASS"</span></span><br><span class="line">   With no parameters - password will be taken from stdin</span><br><span class="line">   -h            Show <span class="built_in">help</span> (this screen)</span><br><span class="line">   -V            Print version information</span><br><span class="line">At most one of -f, -d, -p or -e should be used</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-p password <span class="comment">#后跟密码</span></span><br><span class="line">[root@zhu ~]<span class="comment"># sshpass -p 123456 ssh root@192.168.56.102</span></span><br><span class="line">Last login: Wed Apr 16 15:35:22 2014 from 192.168.56.1</span><br><span class="line">[root@jiang ~]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line">Connection to 192.168.56.102 closed.</span><br><span class="line">-f filename <span class="comment">#后跟保存密码的文件名，密码是文件内容的第一行。</span></span><br><span class="line">[root@zhu ~]<span class="comment"># cat 1.txt</span></span><br><span class="line">123456</span><br><span class="line">[root@zhu ~]<span class="comment"># sshpass -f 1.txt  ssh root@192.168.56.102</span></span><br><span class="line">Last login: Fri Apr 18 13:48:20 2014 from 192.168.56.101</span><br><span class="line">[root@jiang ~]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line">Connection to 192.168.56.102 closed.</span><br><span class="line">-e <span class="comment">#将环境变量SSHPASS作为密码</span></span><br><span class="line">[root@zhu ~]<span class="comment"># export SSHPASS=123456</span></span><br><span class="line">[root@zhu ~]<span class="comment"># sshpass -e  ssh root@192.168.56.102</span></span><br><span class="line">Last login: Fri Apr 18 13:51:45 2014 from 192.168.56.101</span><br><span class="line">[root@jiang ~]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line">Connection to 192.168.56.102 closed.</span><br></pre></td></tr></table></figure><p>如果在多台主机执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@zhu ~]<span class="comment"># cat a.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(cat /root/1.txt)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">    sshpass -p123456 ssh root@<span class="variable">$i</span> <span class="string">'ls -l'</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python Pip 使用警告</title>
      <link href="/2017/05/17/Python-Pip-%E4%BD%BF%E7%94%A8%E8%AD%A6%E5%91%8A/"/>
      <url>/2017/05/17/Python-Pip-%E4%BD%BF%E7%94%A8%E8%AD%A6%E5%91%8A/</url>
      <content type="html"><![CDATA[<p>在macOS更新完pip(9.0.1)之后使用会出现如下警告：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEPRECATION: The default format will switch to columns <span class="keyword">in</span> the future. You can use --format=(legacy|columns) (or define a format=(legacy|columns) <span class="keyword">in</span> your pip.conf under the [list] section) to <span class="built_in">disable</span> this warning.</span><br></pre></td></tr></table></figure><p>虽然不影响使用，但是还是要解决。方法如下：</p><a id="more"></a><p>虽然不影响使用，但是还是要解决。方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir .pip</span><br><span class="line"><span class="built_in">cd</span> .pip/</span><br><span class="line">vi pip.conf</span><br></pre></td></tr></table></figure><p>接着在 vim 编辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[list]</span><br><span class="line">format=columns</span><br></pre></td></tr></table></figure><p>最后进行保存，</p><p>再次使用<code>pip list</code>，会发现效果如下。</p><p><img src="http://ww3.sinaimg.cn/large/006MhlIggy1ffo3b7rgkfj30ab0j8mzf" alt=""></p><p>至于 Windows 也依旧类似。</p><p>在<code>C:\Users\Administrator</code>下建立<code>pip</code>文件夹，在<code>pip</code>下新建<code>pip.ini</code>：</p><p>内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[list]</span><br><span class="line">format=columns</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python判断字符串是否是回文结构</title>
      <link href="/2017/05/16/Python%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E6%98%AF%E5%9B%9E%E6%96%87%E7%BB%93%E6%9E%84/"/>
      <url>/2017/05/16/Python%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E6%98%AF%E5%9B%9E%E6%96%87%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<p>​    回文（Palindrome），就是一个序列（如字符串）正着读反着读是一样的。生物信息学上最常见的就是转录因子在DNA上的结合位点通常都是回文结构。在 Python 应该如何判断字符串？</p><a id="more"></a><ol><li><p>递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(s) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> s[<span class="number">0</span>] == s[<span class="number">-1</span>] <span class="keyword">and</span> isPalindrome(s[<span class="number">1</span>:<span class="number">-1</span>])</span><br></pre></td></tr></table></figure></li><li><p>循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome1</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s))/<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s[i] == s[len(s)-i<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>python的切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome2</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s == s[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>以上的实现复杂度也是O(n)的。</p></li></ol>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python第三方库unrar</title>
      <link href="/2017/05/10/Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93unrar/"/>
      <url>/2017/05/10/Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93unrar/</url>
      <content type="html"><![CDATA[<p><strong>unrar模块介绍</strong></p><p>​    unrar第三方python库是解压rar压缩文件的扩展包，可实现对rar压缩文件的读取、解压等处理。也可以使用unrar这个模块来进行编写rar压缩文件暴力破解。</p><a id="more"></a><ul><li><p><strong>安装</strong></p><ol><li><p>直接利用 pip 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install unrar</span><br></pre></td></tr></table></figure></li><li><p>官网下载源文件安装</p><p><a href="https://pypi.python.org/pypi/rarfile/" target="_blank" rel="noopener">unrar 源文件</a></p><p>在官网下载文件，利用<code>python setup.py install</code>进行安装</p><p><a href="https://rarfile.readthedocs.io/en/latest/" target="_blank" rel="noopener">文档地址</a></p></li></ol></li><li><p>案例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from unrar import rarfile  <span class="comment">#导入rarfile，处理rar文件</span></span><br><span class="line">&gt;&gt;&gt; rar = rarfile.RarFile(<span class="string">'sample.rar'</span>)  <span class="comment">#读取rar文件</span></span><br><span class="line">&gt;&gt;&gt; rar.namelist() <span class="comment">#列出rar压缩文件中的文件列表</span></span><br><span class="line">[u<span class="string">'test_file.txt'</span>]</span><br><span class="line">&gt;&gt;&gt; rar.printdir() <span class="comment">#打印rar压缩文件中的文件列表</span></span><br><span class="line">File Name                                             Modified             Size</span><br><span class="line">test_file.txt                                  2013-04-14 08:20:28           17</span><br><span class="line">&gt;&gt;&gt; rar.testrar()</span><br><span class="line">&gt;&gt;&gt; info = rar.infolist()[0] <span class="comment">#通过索引获取压缩文件中的文件</span></span><br><span class="line">&gt;&gt;&gt; info.filename <span class="comment">#获取压缩文件名</span></span><br><span class="line">u<span class="string">'test_file.txt'</span></span><br><span class="line">&gt;&gt;&gt; info.file_size <span class="comment">#获取压缩文件大小</span></span><br><span class="line">17L</span><br><span class="line">&gt;&gt;&gt; info.date_time <span class="comment">#获取压缩文件创建日期</span></span><br><span class="line">(2013L, 4L, 14L, 8L, 20L, 28L)</span><br><span class="line">&gt;&gt;&gt; rar.read(<span class="string">'test_file.txt'</span>) <span class="comment">#读取压缩文件的内容</span></span><br><span class="line"><span class="string">'This is for test.'</span></span><br><span class="line">&gt;&gt;&gt; rar.extractall() <span class="comment">#解压rar压缩文件</span></span><br><span class="line">&gt;&gt;&gt; rar.close() <span class="comment">#关闭rar文件</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python 使用 paramiko 模块实现 ssh 和 scp</title>
      <link href="/2017/05/07/Python-%E4%BD%BF%E7%94%A8-paramiko-%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0-ssh-%E5%92%8C-scp/"/>
      <url>/2017/05/07/Python-%E4%BD%BF%E7%94%A8-paramiko-%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0-ssh-%E5%92%8C-scp/</url>
      <content type="html"><![CDATA[<ol><li><p><strong>介绍</strong></p><p>这篇文章简单地介绍了python的paramiko模块的用法，paramiko实现了SSH协议，能够方便地与远程计算机交互。简单的说，就是你在terminal下执行的如下语句，现在可以通过python的paramiko实现了。</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 执行shell语句</span></span><br><span class="line">ssh -i ~/.ssh/id_rsa -p 1098  rds@12.164.145.21 -e 'ls -al'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝数据到远程计算机</span></span><br><span class="line">scp -i ~/.ssh/id_rsa -P 1098 -r data rds@12.164.145.21:~/data</span><br></pre></td></tr></table></figure></li><li><p><strong>安装</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip instal paramiko</span><br></pre></td></tr></table></figure></li><li><p><strong>建立SSH连接</strong></p><ol><li><p>使用密码连接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line"></span><br><span class="line"><span class="comment">#这行代码的作用是允许连接不在know_hosts文件中的主机。</span></span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">ssh.connect(<span class="string">"IP"</span>,  port, <span class="string">"username"</span>, <span class="string">"password"</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用私钥连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh.connect('10.120.48.109', port, '用户名',key_filename='私钥')</span><br></pre></td></tr></table></figure></li><li><p>连接以后可以执行shell命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [8]: ssh.exec_command('ls')</span><br><span class="line">Out[8]:</span><br><span class="line">(&lt;paramiko.ChannelFile from &lt;paramiko.Channel 1 (open) window=2097152 -&gt; &lt;paramiko.Transport at 0x377c690L (cipher aes128-ctr, 128 bits) (active; 2 open channel(s))&gt;&gt;&gt;,</span><br><span class="line"> &lt;paramiko.ChannelFile from &lt;paramiko.Channel 1 (open) window=2097152 -&gt; &lt;paramiko.Transport at 0x377c690L (cipher aes128-ctr, 128 bits) (active; 2 open channel(s))&gt;&gt;&gt;,</span><br><span class="line"> &lt;paramiko.ChannelFile from &lt;paramiko.Channel 1 (open) window=2097152 -&gt; &lt;paramiko.Transport at 0x377c690L (cipher aes128-ctr, 128 bits) (active; 2 open channel(s))&gt;&gt;&gt;)</span><br></pre></td></tr></table></figure></li><li><p>执行shell命令以后，并不会立即打印命令的执行结果，而是返回几个Channel, 只能像下面这样获取输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [9]: stdin, stdout, stderr = ssh.exec_command('ls')</span><br><span class="line"></span><br><span class="line">In [10]: print stdout.readlines()</span><br><span class="line">['AgentBackkup_2015-06-11\n', 'AgentBackup\n', 'log\n', 'mysql.sh\n', 'rdsAgent\n']</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 命令执行出错并不会抛出异常，所以，对于命令出错需要根据自己的需求进行相应的处理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [54]: stdin, stdout, stderr = ssh.exec_command('cat file_not_found')</span><br><span class="line">In [55]: print stdout.readlines()</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">In [56]: print stderr.readlines()</span><br><span class="line">[u'cat: file_not_found: No such file or directory\n']</span><br><span class="line"></span><br><span class="line">In [57]: stdin, stdout, stderr = ssh.exec_command('ls')</span><br><span class="line">In [58]: print stderr.readlines()</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p><a href="[https://paramiko-docs.readthedocs.org/en/1.15/api/client.html](https://paramiko-docs.readthedocs.org/en/1.15/api/client.html">API文档</a>)</p></li></ol></li><li><p><strong>SCP vs SFTP</strong></p><p>通过paramiko还可以传输文件，这是我写这篇博客的主要原因。搜了很多博客，都没有说明白如何通过paramiko在计算机之间传输文件，通过阅读官方文档，发现有如下两种方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sftp = paramiko.SFTPClient.from_transport(ssh.get_transport())</span><br><span class="line">sftp = ssh.open_sftp()</span><br></pre></td></tr></table></figure><p>即新建一个SFTPClient对象，该对象复用之前的SSH连接，因此，我们使用sftp传输文件时，不需要再次进行用户认证。</p><ul><li><p>文件上传</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [59]: sftp.put('memory.py', 'memory.py')</span><br><span class="line">Out[59]: &lt;SFTPAttributes: [ size=288 uid=1000 gid=1000 mode=0100644 atime=1435391914 mtime=1435391914 ]&gt;</span><br></pre></td></tr></table></figure></li><li><p>文件下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [60]: sftp.get('memory.py', 'backup.py')</span><br></pre></td></tr></table></figure></li><li><p>执行命令</p><p>paramiko并没有提供一个叫做scp的子模块，如果我们希望在计算机之间传输数据，可以通过sftp(sftp实现了scp所有的功能，也就没有必再实现一个scp)传输文件，还可以通过sftp执行命令，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [44]: sftp.listdir()</span><br><span class="line">Out[44]:</span><br><span class="line">['.viminfo',</span><br><span class="line">'.bash_logout',</span><br><span class="line">'.bash_history',</span><br><span class="line">'AgentBackkup_2015-06-10',</span><br><span class="line">'AgentBackup',</span><br><span class="line">'rdsAgent']</span><br><span class="line"></span><br><span class="line">In [45]: sftp.rename('AgentBackkup_2015-06-10', 'AgentBackkup_2015-06-11')</span><br><span class="line"></span><br><span class="line">In [46]: sftp.listdir()</span><br><span class="line">Out[46]:</span><br><span class="line">['AgentBackkup_2015-06-11',</span><br><span class="line">'.viminfo',</span><br><span class="line">'.bash_logout',</span><br><span class="line">'.bash_history',</span><br><span class="line">'AgentBackup',</span><br><span class="line">'rdsAgent']</span><br></pre></td></tr></table></figure><p><a href="https://paramiko-docs.readthedocs.org/en/1.15/api/sftp.html" target="_blank" rel="noopener">SFTP官方文档</a></p></li></ul></li></ol>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux中的apt-get和apt-cache命令的原理</title>
      <link href="/2017/05/04/Linux%E4%B8%AD%E7%9A%84apt-get%E5%92%8Capt-cache%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/"/>
      <url>/2017/05/04/Linux%E4%B8%AD%E7%9A%84apt-get%E5%92%8Capt-cache%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p><strong>先介绍几个和apt-get相关的目录:</strong></p><p><code>/var/lib/dpkg/available</code>文件的内容是软件包的描述信息, 该软件包括当前系统所使用的 Debian 安装源中的所有软件包,其中包括当前系统中已安装的和未安装的软件包.</p><p><code>/var/cache/apt/archives</code>目录是在用 apt-get install 安装软件时，软件包的临时存放路径</p><a id="more"></a><p><code>/etc/apt/sources.list</code>存放的是软件源站点, 当你执行 <code>sudo apt-get install xxx</code>时，Ubuntu 就去这些站点下载软件包到本地并执行安装</p><p><code>/var/lib/apt/lists</code>使用<code>apt-get update</code>命令会从<code>/etc/apt/sources.list</code>中下载软件列表，并保存到该目录</p><p><strong>APT工作原理：</strong></p><p>Ubuntu采用集中式的软件仓库机制，将各式各样的软件包分门别类地存放在软件仓库中，进行有效地组织和管理。然后，将软件仓库置于许许多多的镜像服务器中，并保持基本一致。这样，所有的Ubuntu用户随时都能获得最新版本的安装软件包。因此，对于用户，这些镜像服务器就是他们的软件源（Reposity）。</p><p>然而，由于每位用户所处的网络环境不同，不可能随意地访问各镜像站点。为了能够有选择地访问，在Ubuntu系统中，使用软件源配置文件<code>/etc/apt/sources.list</code>列出最合适访问的镜像站点地址。</p><p>apt-get的更新过程:执行apt-get update程序分析/etc/apt/sources.list自动连网寻找list中对应的<code>Packages/Sources/Release</code>列表文件，如果有更新则下载之，存入<code>/var/lib/apt/lists/</code>目录然后 apt-get install 相应的包 ，下载并安装。</p><p>即使这样，软件源配置文件只是告知Ubuntu系统可以访问的镜像站点地址，但那些镜像站点具体都拥有什么软件资源并不清楚。若每安装一个软件包，就在服务器上寻找一遍，效率是很低的。因而，就有必要为这些软件资源列个清单（建立索引文件），以便本地主机查询。</p><p>apt-get install 下载的软件存放到 <code>/var/cache/apt/archives/</code>下。</p><p>同时，APT能够检查Ubuntu Linux系统中的软件包依赖关系，大大简化了Ubuntu用户安装和卸载软件包的过程。</p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python字符串处理</title>
      <link href="/2017/05/03/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
      <url>/2017/05/03/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p><strong>相关特性</strong></p><ol><li>属于Python基本数据类型和结构的一种。</li><li>本身是不可变的数据类型。</li><li>有很多内置的方法</li></ol><a id="more"></a><ol><li><p>字符串连接</p><ol><li><p><code>join</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line">content = <span class="string">''</span></span><br><span class="line">content = <span class="string">''</span>.join(a)</span><br><span class="line"><span class="keyword">print</span> content</span><br></pre></td></tr></table></figure></li><li><p>用字符串的占位符替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span><br><span class="line">content = <span class="string">''</span></span><br><span class="line">content = <span class="string">'%s%s%s%s'</span> % tuple(str)</span><br><span class="line"><span class="keyword">print</span> content</span><br></pre></td></tr></table></figure></li></ol></li><li><p>字符串截取</p><ol><li><p>从左到右索引默认0开始的，最大范围是字符串长度少1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'Python'</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># P</span></span><br></pre></td></tr></table></figure></li><li><p>是从右到左索引默认-1开始的，最大范围是字符串开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'Python'</span></span><br><span class="line"><span class="keyword">print</span> str[<span class="number">-1</span>]</span><br><span class="line"><span class="comment"># n</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>字符串替换</p><ol><li><p><code>replace</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'hello word'</span></span><br><span class="line">b = str.replace(<span class="string">'word'</span>,<span class="string">'python'</span>)</span><br><span class="line"><span class="keyword">print</span> b</span><br></pre></td></tr></table></figure></li><li><p>用正则来替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">str = <span class="string">'hello world'</span></span><br><span class="line">info = re.compile(<span class="string">'word'</span>)</span><br><span class="line">b = info.sub(<span class="string">'python'</span>, a)</span><br><span class="line"><span class="keyword">print</span> b</span><br></pre></td></tr></table></figure></li></ol></li><li><p>字符串比较</p><ol><li><p><code>cmp</code>比较两个对象，并根据结果返回一个整数。cmp(x,y)如果X&lt; Y,返回值是负数 如果X&gt;Y 返回的值为正数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sStr1 = <span class="string">'strch'</span></span><br><span class="line">sStr2 = <span class="string">'strchr'</span></span><br><span class="line"><span class="keyword">print</span> cmp(sStr1,sStr2)</span><br><span class="line"><span class="comment">#-1</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>字符串查找</p><ol><li><p><code>find()</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">info = <span class="string">'abca'</span></span><br><span class="line"><span class="keyword">print</span> info.find(<span class="string">'a'</span>)<span class="comment">##从下标0开始，查找在字符串里第一个出现的子串，返回结果：0</span></span><br><span class="line"></span><br><span class="line">info = <span class="string">'abca'</span></span><br><span class="line"><span class="keyword">print</span> info.find(<span class="string">'a'</span>,<span class="number">1</span>)<span class="comment">##从下标1开始，查找在字符串里第一个出现的子串：返回结果3</span></span><br><span class="line"></span><br><span class="line">info = <span class="string">'abca'</span></span><br><span class="line"><span class="keyword">print</span> info.find(<span class="string">'333'</span>)<span class="comment">##返回-1,查找不到返回-1</span></span><br></pre></td></tr></table></figure></li><li><p><code>index()</code>方法</p><p>python 的<code>index</code>方法是在字符串里查找子串第一次出现的位置，类似字符串的find方法，不过比find方法更好的是，如果查找不到子串，会抛出异常，而不是返回-1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = <span class="string">'abca'</span></span><br><span class="line"><span class="keyword">print</span> info.index(<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">print</span> info.index(<span class="string">'33'</span>)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>字符串分隔</p><ol><li><p><code>split</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = <span class="string">'name:haha,age:20$name:python,age:30$name:fef,age:55'</span></span><br><span class="line">content = info.split(<span class="string">'$'</span>)</span><br><span class="line"><span class="keyword">print</span> content</span><br></pre></td></tr></table></figure></li></ol></li><li><p>字符串反转</p><ol><li><p>通过步进反转[::-1]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'abcd'</span></span><br><span class="line">b = a[::<span class="number">-1</span>]<span class="comment">##[::-1]通过步进反转</span></span><br><span class="line"><span class="keyword">print</span> b</span><br></pre></td></tr></table></figure></li></ol></li><li><p>字符串追加和拼接</p><ol><li><p>元组拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="string">'python'</span></span><br><span class="line">astr = <span class="string">'i love %s'</span> % m</span><br><span class="line"><span class="keyword">print</span> astr</span><br></pre></td></tr></table></figure></li><li><p>字符串的format方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="string">'python'</span></span><br><span class="line">astr = <span class="string">"i love &#123;python&#125;"</span>.format(python=m)</span><br><span class="line"><span class="keyword">print</span> astr</span><br></pre></td></tr></table></figure></li><li><p>字典格式化字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="string">'python'</span></span><br><span class="line">astr = <span class="string">"i love %(python)s "</span> % &#123;<span class="string">'python'</span>:m&#125;</span><br><span class="line"><span class="keyword">print</span> astr</span><br></pre></td></tr></table></figure></li></ol></li><li><p>字符串大小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">S = <span class="string">'abc'</span></span><br><span class="line">S.upper()<span class="comment">#S中的字母大写 </span></span><br><span class="line">S.lower() <span class="comment">#S中的字母小写 </span></span><br><span class="line">S.capitalize() <span class="comment">#首字母大写 </span></span><br><span class="line">S.istitle() <span class="comment">#S是否是首字母大写的 </span></span><br><span class="line">S.isupper() <span class="comment">#S中的字母是否便是大写 </span></span><br><span class="line">S.islower() <span class="comment">#S中的字母是否全是小写</span></span><br></pre></td></tr></table></figure></li><li><p>字符串去掉空格</p><ol><li><p>通过<code>strip()</code>,<code>lstrip()</code>,<code>rstrip()</code>方法去除字符串的空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S.strip()<span class="comment">#去掉字符串的左右空格</span></span><br><span class="line">S.lstrip()<span class="comment">#去掉字符串的左边空格</span></span><br><span class="line">S.rstrip()<span class="comment">#去掉字符串的右边空格</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>字符串其他方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">S.center(width, [fillchar]) <span class="comment">#中间对齐</span></span><br><span class="line">S.count(substr, [start, [end]]) <span class="comment">#计算substr在S中出现的次数</span></span><br><span class="line">S.expandtabs([tabsize]) <span class="comment">#把S中的tab字符替换没空格，每个tab替换为tabsize个空格，默认是8个 </span></span><br><span class="line">S.isalnum() <span class="comment">#是否全是字母和数字，并至少有一个字符 </span></span><br><span class="line">S.isalpha() <span class="comment">#是否全是字母，并至少有一个字符 </span></span><br><span class="line">S.isspace() <span class="comment">#是否全是空白字符，并至少有一个字符</span></span><br><span class="line">S.join()<span class="comment">#S中的join，把列表生成一个字符串对象</span></span><br><span class="line">S.ljust(width,[fillchar]) <span class="comment">#输出width个字符，S左对齐，不足部分用fillchar填充，默认的为空格。</span></span><br><span class="line">S.rjust(width,[fillchar]) <span class="comment">#右对齐 </span></span><br><span class="line">S.splitlines([keepends]) <span class="comment">#把S按照行分割符分为一个list，keepends是一个bool值，如果为真每行后而会保留行分割符。</span></span><br><span class="line">S.swapcase() <span class="comment">#大小写互换</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>案例</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"Hello My friend"</span></span><br><span class="line"><span class="comment">#字符串是一个整体。如果你想直接修改字符串的某一部分，是不可能的。但我们能够读出字符串的某一部分。</span></span><br><span class="line"><span class="comment">#子字符串的提取</span></span><br><span class="line">str[:<span class="number">6</span>]</span><br><span class="line"><span class="comment">#字符串包含判断操作符：in，not in</span></span><br><span class="line"><span class="string">"He"</span> <span class="keyword">in</span> str</span><br><span class="line"><span class="string">"she"</span> <span class="keyword">not</span> <span class="keyword">in</span> str</span><br><span class="line"></span><br><span class="line"><span class="comment">#string模块，还提供了很多方法，如</span></span><br><span class="line">S.find(substring, [start [,end]]) <span class="comment">#可指范围查找子串，返回索引值，否则返回-1</span></span><br><span class="line">S.rfind(substring,[start [,end]]) <span class="comment">#反向查找</span></span><br><span class="line">S.index(substring,[start [,end]]) <span class="comment">#同find，只是找不到产生ValueError异常</span></span><br><span class="line">S.rindex(substring,[start [,end]])<span class="comment">#同上反向查找</span></span><br><span class="line">S.count(substring,[start [,end]]) <span class="comment">#返回找到子串的个数</span></span><br><span class="line"></span><br><span class="line">S.lowercase()</span><br><span class="line">S.capitalize()      <span class="comment">#首字母大写</span></span><br><span class="line">S.lower()           <span class="comment">#转小写</span></span><br><span class="line">S.upper()           <span class="comment">#转大写</span></span><br><span class="line">S.swapcase()        <span class="comment">#大小写互换</span></span><br><span class="line"></span><br><span class="line">S.split(str, <span class="string">' '</span>)   <span class="comment">#将string转list，以空格切分</span></span><br><span class="line">S.join(list, <span class="string">' '</span>)   <span class="comment">#将list转string，以空格连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#处理字符串的内置函数</span></span><br><span class="line">len(str)                <span class="comment">#串长度</span></span><br><span class="line">cmp(<span class="string">"my friend"</span>, str)   <span class="comment">#字符串比较。第一个大，返回1</span></span><br><span class="line">max(<span class="string">'abcxyz'</span>)           <span class="comment">#寻找字符串中最大的字符</span></span><br><span class="line">min(<span class="string">'abcxyz'</span>)           <span class="comment">#寻找字符串中最小的字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#string的转换</span></span><br><span class="line">            </span><br><span class="line">float(str) <span class="comment">#变成浮点数，float("1e-1")  结果为0.1</span></span><br><span class="line">int(str)        <span class="comment">#变成整型，  int("12")  结果为12</span></span><br><span class="line">int(str,base)   <span class="comment">#变成base进制整型数，int("11",2) 结果为2</span></span><br><span class="line">long(str)       <span class="comment">#变成长整型，</span></span><br><span class="line">long(str,base)  <span class="comment">#变成base进制长整型，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串的格式化（注意其转义字符，大多如C语言的，略）</span></span><br><span class="line">str_format % (参数列表) <span class="comment">#参数列表是以tuple的形式定义的，即不可运行中改变</span></span><br><span class="line">&gt;&gt;&gt;<span class="keyword">print</span> <span class="string">""</span>%s<span class="string">'s height is %dcm" % ("My brother", 180)</span></span><br><span class="line"><span class="string">          #结果显示为 My brother'</span>s height <span class="keyword">is</span> <span class="number">180</span>cm</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux 免密登录</title>
      <link href="/2017/04/27/Linux-%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
      <url>/2017/04/27/Linux-%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>A为本地主机(即用于控制其他主机的机器) ;<br>B为远程主机(即被控制的机器Server), 假如ip为<code>192.168.1.1</code> ;<br>A和B的系统都是Linux.</p><a id="more"></a><ol><li><p>什么是 SSH？</p><blockquote><p>Secure Shell（缩写为SSH），由IETF的网络工作小组（Network Working Group）所制定；SSH为一项创建在应用层和传输层基础上的安全协议，为计算机上的Shell（壳层）提供安全的传输和使用环境。</p><p>传统的网络服务程序，如rsh、FTP、POP和Telnet其本质上都是不安全的；因为它们在网络上用明文传送数据、用户帐号和用户口令，很容易受到中间人（man-in-the-middle）攻击方式的攻击。就是存在另一个人或者一台机器冒充真正的服务器接收用户传给服务器的数据，然后再冒充用户把数据传给真正的服务器。</p><p>而SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。通过SSH可以对所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。</p><p>SSH之另一项优点为其传输的数据可以是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、POP、甚至为PPP提供一个安全的“通道”。</p><p><a href="https://www.wikiwand.com/zh-cn/Secure_Shell" target="_blank" rel="noopener">Secure Shell</a></p></blockquote></li><li><p>基本用法</p><p>假设要以用户名 <code>user</code>,远程登录主机 <code>host</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@host</span><br></pre></td></tr></table></figure><p>SSH的默认端口是<code>22</code>，如果不是这个端口登录，需要添加<code>-p</code>参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p port user@host</span><br></pre></td></tr></table></figure></li><li><p>公钥登录</p><p>如最开始的说明，每次登录固定的 <code>host</code>，不想输入密码在怎么登录。</p><p>​</p><p>在A上的命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa #(连续三次回车,即在本地生成了公钥和私钥,不设置密码)</span><br><span class="line">ssh root@172.24.253.2 "mkdir .ssh;chmod 0700 .ssh" #(需要输入密码， 注:必须将.ssh的权限设为700)</span><br><span class="line">scp ~/.ssh/id_rsa.pub root@172.24.253.2:.ssh/id_rsa.pub #(需要输入密码)</span><br></pre></td></tr></table></figure><p>在 B 上的命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch /root/.ssh/authorized_keys #(如果已经存在这个文件, 跳过这条)</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys  #(# 注意： 必须将~/.ssh/authorized_keys的权限改为600, 该文件用于保存ssh客户端生成的公钥，可以修改服务器的ssh服务端配置文件/etc/ssh/sshd_config来指定其他文件名）</span><br><span class="line">cat /root/.ssh/id_rsa.pub  &gt;&gt; /root/.ssh/authorized_keys #(将id_rsa.pub的内容追加到 authorized_keys 中, 注意不要用 &gt; ，否则会清空原有的内容，使其他人无法使用原有的密钥登录)</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iTerm2保持 SSH 连接</title>
      <link href="/2017/04/20/iTerm2%E4%BF%9D%E6%8C%81-SSH-%E8%BF%9E%E6%8E%A5/"/>
      <url>/2017/04/20/iTerm2%E4%BF%9D%E6%8C%81-SSH-%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<p>使用 iTerm2的时候，在 SSH 连接 VPS 过程中，要是有段时间不操作就会断开连接。其中要是有写了一半的数据，那就呵呵呵了。有两种方法暂时可以解决该问题。</p><a id="more"></a><p>第一种方法：</p><p>iTerm2 中有一个选项： <code>When idle, send ASCII code 0 every 10 seconds</code>，其中，ASCII code 和时间可指定。</p><p>这样定时操作一下保持SSH 连接，但是有副作用：</p><ol><li>一些命令行输出中会有不期待出现的字符；</li><li>Vi 中会插入一些不想要的内容</li></ol><p>第二种方法：</p><p>正确的做法是，通过配置 <code>ServerAliveInterval</code> 来实现，在 <code>~/.ssh/config</code> 中加入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerAliveInterval=30</span><br></pre></td></tr></table></figure><p>如果没有<code>config</code>文件，那就新建一个。要修改该文件的权限，否则配置将不起作用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 ~/.ssh/config</span><br></pre></td></tr></table></figure><p>当然，各个服务器的配置不一样，也可以做差异化的配置，以减少不必要的发包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host *hostname.com</span><br><span class="line">   ServerAliveInterval 60</span><br></pre></td></tr></table></figure><p>以上就能解决了。</p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python 统计列表中重复项</title>
      <link href="/2017/04/13/Python-%E7%BB%9F%E8%AE%A1%E5%88%97%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
      <url>/2017/04/13/Python-%E7%BB%9F%E8%AE%A1%E5%88%97%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
      <content type="html"><![CDATA[<p>对一个列表，比如<code>[1,2,2,2,2,3,3,3,4,4,4,4]</code>，要统计这个列表里的重复项，以及相应的次数。</p><p>有三种方法，<code>set</code>,<code>dict</code>以及<code>Counter</code></p><a id="more"></a><p>第一种：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line">myset = set(L)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> myset:</span><br><span class="line">    print(<span class="string">"the %d has found %d"</span> %(item,L.count(item)))</span><br></pre></td></tr></table></figure><p> 第二种：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>]</span><br><span class="line">a = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> List:</span><br><span class="line">    <span class="keyword">if</span> List.count(i)&gt;<span class="number">1</span>:</span><br><span class="line">        a[i] = List.count(i)</span><br><span class="line"><span class="keyword">print</span> (a)</span><br></pre></td></tr></table></figure><p>第三种：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">print</span> Counter([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>])</span><br><span class="line"><span class="comment"># Counter(&#123;1: 5, 2: 3, 3: 2&#125;)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python OS文件操作模块常用函数</title>
      <link href="/2017/04/12/Python-OS%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9D%97%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2017/04/12/Python-OS%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%9D%97%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h4 id="Python提供了一个os模块，里面包含了很多操作文件和目录的函数">Python提供了一个os模块，里面包含了很多操作文件和目录的函数</h4><p>全部函数可以用<code>help(os)</code>或是<code>dir(os)</code>查看其用法。</p><a id="more"></a><blockquote><p>1.重命名：<code>os.rename(old, new)</code></p><p>2.删除：<code>os.remove(file)</code></p><p>3.列出目录下的文件 ：<code>os.listdir(path)</code></p><p>4.获取当前工作目录：<code>os.getcwd()</code></p><p>5.改变工作目录：<code>os.chdir(newdir)</code></p><p>6.创建多级目录：<code>os.makedirs(r&quot;c:\python \test&quot;)</code></p><p>7.创建单个目录：<code>os.mkdir(&quot;test&quot;)</code></p><p>8.删除多个目录：<code>os.removedirs(r&quot;c:\python&quot;)</code> <code>#删除所给路径最后一个目录下所有空目录。</code></p><p>9.删除单个目录：<code>os.rmdir(&quot;test&quot;)</code></p><p>10.获取文件属性：<code>os.stat(file)</code></p><p>11.修改文件权限与时间戳：<code>os.chmod(file)</code></p><p>12.执行操作系统命令：<code>os.system(&quot;dir&quot;)</code></p><p>13.启动新进程：<code>os.exec()</code>, `os.execvp()</p><p>14.在后台执行程序：<code>osspawnv()</code></p><p>15.终止当前进程：<code>os.exit()</code>, <code>os._exit()</code></p><p>16.分离文件名：<code>os.path.split(r&quot;c:\python\hello.py&quot;)</code> –&gt; <code>(&quot;c:\\python&quot;, &quot;hello.py&quot;)</code></p><p>17.分离扩展名：<code>os.path.splitext(r&quot;c:\python\hello.py&quot;)</code> –&gt; <code>(&quot;c:\\python\\hello&quot;, &quot;.py&quot;)</code></p><p>18.获取路径名：<code>os.path.dirname(r&quot;c:\python\hello.py&quot;)</code> –&gt; <code>&quot;c:\\python&quot;</code></p><p>19.获取文件名：<code>os.path.basename(r&quot;r:\python\hello.py&quot;)</code> –&gt; <code>&quot;hello.py&quot;</code></p><p>20.判断文件或目录是否存在：<code>os.path.exists(r&quot;c:\python\hello.py&quot;)</code> –&gt; <code>True</code></p><p>21.判断是否是绝对路径：<code>os.path.isabs(r&quot;.\python\&quot;)</code> –&gt; <code>False</code></p><p>22.判断是否是目录：<code>os.path.isdir(r&quot;c:\python&quot;)</code> –&gt; <code>True</code></p><p>23.判断是否是文件：<code>os.path.isfile(r&quot;c:\python\hello.py&quot;)</code> –&gt; <code>True</code></p><p>24.判断是否是链接文件：<code>os.path.islink(r&quot;c:\python\hello.py&quot;)</code> –&gt; <code>False</code></p><p>25.获取文件大小：<code>os.path.getsize(filename)</code></p><p>26.搜索目录下的所有文件：<code>os.path.walk()</code></p></blockquote>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux自定义命令</title>
      <link href="/2017/03/23/Linux%E8%87%AA%E5%AE%9A%E4%B9%89%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/03/23/Linux%E8%87%AA%E5%AE%9A%E4%B9%89%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>很多常用的命令，很长的路径输出很麻烦，用户可利用alias，自定指令的别名。</p><p>可以利用 alias 来解决</p><p><strong>语　　法：</strong><code>alias[别名]=[指令名称]</code></p><p><strong>补充说明：</strong>若仅输入alias，则可列出目前所有的别名设置。alias的效力仅及于该次登入的操作。若要每次登入是即自动设好别名，可在<code>/etc/profile</code>或自己的<code>~/.bashrc</code>中设定指令的别名。</p><a id="more"></a><p>bashrc是环境变量的配置文件 <code>/etc/bashrc</code>和<code>~/.bashrc</code> 区别就在于</p><p><code>/etc/bashrc</code> 是设置给全系统</p><p><code>~/.bashrc</code> 是设置给单用户使用.</p><p>有的系统里没有ll这个命令,原因就是没有定义ll=’ls -l –color=tty’这个别名.</p><p>如果想永久生效,就把这条写入到 /etc/bashrc里面</p><p>修改后，通过以下命令即可生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#全局配置</span></span><br><span class="line"><span class="built_in">source</span> /etc/bashrc</span><br><span class="line"><span class="comment">#个人配置</span></span><br><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python2.7的UnicodeEncodeError</title>
      <link href="/2017/03/22/Python2-7%E7%9A%84UnicodeEncodeError/"/>
      <url>/2017/03/22/Python2-7%E7%9A%84UnicodeEncodeError/</url>
      <content type="html"><![CDATA[<p><code>UnicodeEncodeError: ‘ascii’ codec can’t encode</code>异常错误</p><p>​    这个错误是编码问题，Unicode编码与ASCII编码的不兼容，现在Python脚本文件是由utf-8编码的，但是 Python2的默认是<code>ASCII</code>的，Python默认环境编码通过下面的方法可以获取：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">print</span> sys.getdefaultencoding()</span><br><span class="line"><span class="comment"># 'ascii'</span></span><br></pre></td></tr></table></figure><p>​    基本上是ascii编码方式，由此Python自然调用ascii编码解码程序去处理字符流，当字符流不属于ascii范围内，就会抛出异常（ordinal not in range(128)）。</p><p>​    解决的方案很简单，修改默认的编码模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><p>​    还有一种更好的方法，在输出的时候，对文件制定特定的UTF-8编码即可。</p><p>​    就是在打开一个文件的时候，不是用<code>open</code>而是用<code>codecs</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fp = codecs.open(‘output.txt’, ‘a+’, ‘utf<span class="number">-8</span>’)</span><br><span class="line">fp.write(row[<span class="number">1</span>])</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python去重列表的重复元素</title>
      <link href="/2017/03/20/Python%E5%8E%BB%E9%87%8D%E5%88%97%E8%A1%A8%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
      <url>/2017/03/20/Python%E5%8E%BB%E9%87%8D%E5%88%97%E8%A1%A8%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
      <content type="html"><![CDATA[<p>有一个List：</p><p><code>l1 = [&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;b&#39;,&#39;c&#39;,&#39;a&#39;,&#39;a&#39;]</code></p><p>要去除其中的重复部分</p><a id="more"></a><p>有两个方法，一个是 <code>set</code>一个是<code>fromkeys</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>,<span class="string">'a'</span>]</span><br><span class="line">l2 = list(set(l1))</span><br><span class="line"><span class="keyword">print</span> l2</span><br><span class="line">l3 = &#123;&#125;.fromkeys(l1).keys()</span><br><span class="line"><span class="keyword">print</span> l3</span><br></pre></td></tr></table></figure><p>但是上面的有个缺点，就是执行完，lsit 的顺序就跟之前不一样了。</p><p><strong>如果想要保持他们原来的排序：</strong></p><p>可以用list类的<code>sort</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>,<span class="string">'a'</span>]</span><br><span class="line">l2 = list(set(l1))</span><br><span class="line">l2.sort(key=l1.index)</span><br><span class="line"><span class="keyword">print</span> l2</span><br><span class="line">l3 = sorted(set(l1),key=l1.index)</span><br><span class="line"><span class="keyword">print</span> l3</span><br></pre></td></tr></table></figure><p>也可以用遍历的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'a'</span>,<span class="string">'a'</span>]</span><br><span class="line">l2 = []</span><br><span class="line">[l2.append(i) <span class="keyword">for</span> i <span class="keyword">in</span> l1 <span class="keyword">if</span> <span class="keyword">not</span> i <span class="keyword">in</span> l2]</span><br><span class="line"><span class="keyword">print</span> l2</span><br></pre></td></tr></table></figure><p>这样输出的列表的顺序就不会变了。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python 两个列表合并</title>
      <link href="/2017/03/20/Python-%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E5%90%88%E5%B9%B6/"/>
      <url>/2017/03/20/Python-%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E5%90%88%E5%B9%B6/</url>
      <content type="html"><![CDATA[<p>有两个列表，分别为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">names</span> = [<span class="string">'Alice'</span>, <span class="string">'Beth'</span>, <span class="string">'Ceil'</span>]</span><br><span class="line"><span class="attr">numbers</span> = [<span class="string">'2341'</span>, <span class="string">'9102'</span>, <span class="string">'3158'</span>]</span><br></pre></td></tr></table></figure><p>生成一个字典：</p><p><code>book = {&#39;Alice&#39;: &#39;2341&#39;, &#39;Beth&#39;: &#39;9102&#39;, &#39;Ceil&#39;: &#39;3158&#39;}</code></p><a id="more"></a><p>有两种方法，一个是不断迭代，另外一种就是用<code>zip</code>函数</p><p>方法一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">book = &#123;&#125;</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;len(names):</span><br><span class="line">    phonebook[names[i]]=numbers[i]</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> book</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">book = dict(zip(names, numbers))</span><br><span class="line"><span class="keyword">print</span> phone</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python 按行切割文件</title>
      <link href="/2017/03/13/Python-%E6%8C%89%E8%A1%8C%E5%88%87%E5%89%B2%E6%96%87%E4%BB%B6/"/>
      <url>/2017/03/13/Python-%E6%8C%89%E8%A1%8C%E5%88%87%E5%89%B2%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>在遇到各种比较大的问题时候，行数过多导致打开处理会出问题，则需要切割，则可以用按行数切割的方法来处理。</p><p>代码如下：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python  </span></span><br><span class="line"><span class="comment">#--*-- coding:utf-8 --*--  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SplitFiles</span><span class="params">()</span>:</span>  </span><br><span class="line">    <span class="string">"""按行分割文件"""</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, file_name, line_count=<span class="number">200</span>)</span>:</span>  </span><br><span class="line">        <span class="string">"""初始化要分割的源文件名和分割后的文件行数"""</span>  </span><br><span class="line">        self.file_name = file_name  </span><br><span class="line">        self.line_count = line_count  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">split_file</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        <span class="keyword">if</span> self.file_name <span class="keyword">and</span> os.path.exists(self.file_name):  </span><br><span class="line">            <span class="keyword">try</span>:  </span><br><span class="line">                <span class="keyword">with</span> open(self.file_name) <span class="keyword">as</span> f : <span class="comment"># 使用with读文件  </span></span><br><span class="line">                    temp_count = <span class="number">0</span>  </span><br><span class="line">                    temp_content = []  </span><br><span class="line">                    part_num = <span class="number">1</span>  </span><br><span class="line">                    <span class="keyword">for</span> line <span class="keyword">in</span> f:  </span><br><span class="line">                        <span class="keyword">if</span> temp_count &lt; self.line_count:  </span><br><span class="line">                            temp_count += <span class="number">1</span>  </span><br><span class="line">                        <span class="keyword">else</span> :  </span><br><span class="line">                            self.write_file(part_num, temp_content)  </span><br><span class="line">                            part_num += <span class="number">1</span>  </span><br><span class="line">                            temp_count = <span class="number">1</span>  </span><br><span class="line">                            temp_content = []  </span><br><span class="line">                        temp_content.append(line)  </span><br><span class="line">                    <span class="keyword">else</span> : <span class="comment"># 正常结束循环后将剩余的内容写入新文件中  </span></span><br><span class="line">                        self.write_file(part_num, temp_content)  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">except</span> IOError <span class="keyword">as</span> err:  </span><br><span class="line">                print(err)  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            print(<span class="string">"%s is not a validate file"</span> % self.file_name)  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_part_file_name</span><span class="params">(self, part_num)</span>:</span>  </span><br><span class="line">        <span class="string">""""获取分割后的文件名称：在源文件相同目录下建立临时文件夹temp_part_file，然后将分割后的文件放到该路径下"""</span>  </span><br><span class="line">        temp_path = os.path.dirname(self.file_name) <span class="comment"># 获取文件的路径（不含文件名）  </span></span><br><span class="line">        part_file_name = temp_path + <span class="string">"temp_part_file"</span>  </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(temp_path) : <span class="comment"># 如果临时目录不存在则创建  </span></span><br><span class="line">            os.makedirs(temp_path)  </span><br><span class="line">        part_file_name += os.sep + <span class="string">"temp_file_"</span> + str(part_num) + <span class="string">".part"</span>  </span><br><span class="line">        <span class="keyword">return</span> part_file_name  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_file</span><span class="params">(self, part_num, *line_content)</span>:</span>  </span><br><span class="line">        <span class="string">"""将按行分割后的内容写入相应的分割文件中"""</span>  </span><br><span class="line">        part_file_name = self.get_part_file_name(part_num)  </span><br><span class="line">        print(line_content)  </span><br><span class="line">        <span class="keyword">try</span> :  </span><br><span class="line">            <span class="keyword">with</span> open(part_file_name, <span class="string">"w"</span>) <span class="keyword">as</span> part_file:  </span><br><span class="line">                part_file.writelines(line_content[<span class="number">0</span>])  </span><br><span class="line">        <span class="keyword">except</span> IOError <span class="keyword">as</span> err:  </span><br><span class="line">            print(err)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:  </span><br><span class="line">    sf = SplitFiles(<span class="string">r"F:\multiple_thread_read_file.txt"</span>)  </span><br><span class="line">    sf.split_file()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Pyhton遍历文件夹</title>
      <link href="/2017/03/10/Pyhton%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>/2017/03/10/Pyhton%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      <content type="html"><![CDATA[<p>这是一个常用的功能，可以有两种方法，<code>os.walk</code>和<code>os.listdir</code></p><p>文档是这么解释的：</p><blockquote><p>os.<strong>listdir</strong>(<em>path</em>)</p></blockquote><blockquote><p>Return a list containing the names of the entries in the directory given by <em>path</em>. The list is in arbitrary order. It does not include the special entries ‘.’ and ‘..’ even if they are present in the directory.</p></blockquote><a id="more"></a><blockquote><p>os.<strong>walk</strong>(<em>top</em>, <em>topdown=True</em>, <em>onerror=None</em>, <em>followlinks=False</em>)</p></blockquote><blockquote><p>Generate the file names in a directory tree by walking the tree either top-down or bottom-up. For each directory in the tree rooted at directory <em>top</em> (including <em>top</em> itself), it yields a 3-tuple (dirpath, dirnames, filenames).</p></blockquote><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*- </span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_dir</span><span class="params">(rootDir)</span>:</span> </span><br><span class="line">    list_dirs = os.walk(rootDir) </span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> list_dirs: </span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> dirs: </span><br><span class="line">            <span class="keyword">print</span> os.path.join(root, d)      </span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files: </span><br><span class="line">            <span class="keyword">print</span> os.path.join(root, f)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*- </span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_dir</span><span class="params">(rootDir)</span>:</span> </span><br><span class="line">    <span class="keyword">for</span> lists <span class="keyword">in</span> os.listdir(rootDir): </span><br><span class="line">        path = os.path.join(rootDir, lists) </span><br><span class="line">        <span class="keyword">print</span> path </span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(path): </span><br><span class="line">            list_dir(path)</span><br></pre></td></tr></table></figure><p>对于第一种方法，输出总是先文件夹后文件名的，对于第二种，则是按照目录树结构以及按照首字母排序进行输出的。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Ubuntu 16.04LTS 搭建 Shadowsocks</title>
      <link href="/2017/02/28/Ubuntu-16-04LTS-%E6%90%AD%E5%BB%BA-Shadowsocks/"/>
      <url>/2017/02/28/Ubuntu-16-04LTS-%E6%90%AD%E5%BB%BA-Shadowsocks/</url>
      <content type="html"><![CDATA[<p>只针对Ubuntu16以上的版本。</p><p>执行很简单，首先是三条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><a id="more"></a><p>pip 是 Python 下方便的包管理工具</p><p>之后在<code>/etc/shadowsocks</code>编写配置文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"my_server_ip"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">8388</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"mypassword"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面一些数值，替换成自己相应的就好，<code>method</code>建议128的就好。</p><p>接下来运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure><p>为了能够开机自启，把上面的命令加入到<code>/etc/rc.loacl</code>里面，在 <code>exit</code>之前就行。</p><p>最后下载客户端：<a href="https://shadowsocks.org/en/download/clients.html" target="_blank" rel="noopener">SS客户端</a></p><p>可能在 VPS 会遇到以下的一个错误：<br><code>Python locale error: unsupported locale setting</code></p><p>只要执行以下几行命令就可以了:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LC_ALL=<span class="string">"en_US.UTF-8"</span></span><br><span class="line"><span class="built_in">export</span> LC_CTYPE=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android java.lang.OutOfMemoryError: GC overhead limit exceeded</title>
      <link href="/2017/02/13/Android-java-lang-OutOfMemoryError-GC-overhead-limit-exceeded/"/>
      <url>/2017/02/13/Android-java-lang-OutOfMemoryError-GC-overhead-limit-exceeded/</url>
      <content type="html"><![CDATA[<p>​    再用 Android Studio 编辑项目的时候，会出现如下错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutOfMemoryError: GC overhead <span class="built_in">limit</span> exceeded</span><br></pre></td></tr></table></figure><p>​    根据 Sun 的描述：<br>    <figure class="highlight mizar"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"if too much time <span class="keyword">is</span> <span class="keyword">being</span> spent <span class="keyword">in</span> garbage collection: if more than 98% <span class="keyword">of</span> the total time <span class="keyword">is</span> spent <span class="keyword">in</span> garbage collection <span class="keyword">and</span> less than 2% <span class="keyword">of</span> the heap <span class="keyword">is</span> recovered, an OutOfMemoryError will <span class="keyword">be</span> thrown."</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>​    首先更改 Android Studio 的运行内存，MacBook 在<code>Content/bin/studio.vmoptions</code>,修改如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># *DO NOT* modify this file directly. If there is a value that you would like to override,</span></span><br><span class="line"><span class="comment"># please add it to your user specific configuration file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See http://tools.android.com/tech-docs/configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">-Xms256m</span><br><span class="line">-Xmx4096m</span><br><span class="line">-XX:MaxPermSize=1024m</span><br><span class="line">-XX:ReservedCodeCacheSize=768m</span><br><span class="line">-XX:+UseCompressedOops</span><br></pre></td></tr></table></figure><p>​    之后在项目的<code>build.gradle</code>中添加一个设置:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exOptions &#123;</span><br><span class="line">        javaMaxHeapSize "4g"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    接下来运行就能通过。</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Hexo教程 error</title>
      <link href="/2017/02/12/hexo%E6%95%99%E7%A8%8B-error/"/>
      <url>/2017/02/12/hexo%E6%95%99%E7%A8%8B-error/</url>
      <content type="html"><![CDATA[<p>​    MacBook在安装好 hexo 和 node 之后，还是会出现如下的错误。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">全局已经安装hexo，当前项目下也装了</span><br><span class="line">blog git:(master) ✗ hexo</span><br><span class="line">&#123; [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">&#123; [Error: Cannot find module &apos;./build/Release/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">&#123; [Error: Cannot find module &apos;./build/default/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">&#123; [Error: Cannot find module &apos;./build/Debug/DTraceProviderBindings&apos;] code: &apos;MODULE_NOT_FOUND&apos; &#125;</span><br><span class="line">ERROR Local hexo not found in ~/Documents/DATA/github/blog</span><br><span class="line">ERROR Try running: &apos;npm install hexo --save&apos;</span><br></pre></td></tr></table></figure><p>可以尝试如下的方式，我已经解决。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo --no-optional</span><br><span class="line">if it doesn't work</span><br><span class="line">try</span><br><span class="line">$ npm uninstall hexo-cli -g</span><br><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> hexo教程 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Hexo添加文章自动打开编辑器</title>
      <link href="/2017/02/11/Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2017/02/11/Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>​    Hexo新建一篇文章的命令很简单<code>hexo new arctical&#39;s title</code>，然后在Hexo的根目录的<code>source</code>文件夹下的<code>_posts</code>目录下自动创建相应的md文件，之后打开该目录，找到Hexo自动生成的文件打开编辑即可。但是当文件比较多的时候，找一个新的文件是很麻烦的一件事。那么我们便可以通过 js 脚本自动打开相应的编辑器来省事。</p><a id="more"></a><p>分为两个平台，如果是 Windows 平台</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"><span class="comment">// Hexo 2.x 用户复制这段</span></span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">  exec(<span class="string">'start  "markdown编辑器绝对路径.exe" '</span> + path);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Hexo 3 用户复制这段</span></span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  exec(<span class="string">'start  "markdown编辑器绝对路径.exe" '</span> + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果是MacBook 平台</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"><span class="comment">// Hexo 2.x 用户复制这段</span></span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    exec(<span class="string">'open -a "markdown编辑器绝对路径.app" '</span> + path);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Hexo 3 用户复制这段</span></span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    exec(<span class="string">'open -a "markdown编辑器绝对路径.app" '</span> + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>之后重新新建文件，变回自动打开文件。</p>]]></content>
      
      <categories>
          
          <category> hexo教程 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Xshell配色方案</title>
      <link href="/2017/01/20/Xshell%E9%85%8D%E8%89%B2%E6%96%B9%E6%A1%88/"/>
      <url>/2017/01/20/Xshell%E9%85%8D%E8%89%B2%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>Xshell是Windows下很好用的一款SSH软件，但是性冷淡的配色终究还是有点枯燥，分享两个还可以的配色方案。</p><a id="more"></a><ol><li><p>第一个<strong>isayme.xcs</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[isayme]</span><br><span class="line">text(bold)=eaeaea</span><br><span class="line">magenta(bold)=ff00ff</span><br><span class="line">text=ffffff</span><br><span class="line">white(bold)=eaeaea</span><br><span class="line">green=00c000</span><br><span class="line">red(bold)=d20000</span><br><span class="line">green(bold)=00ff00</span><br><span class="line">black(bold)=808080</span><br><span class="line">red=c00000</span><br><span class="line">blue=113fcc</span><br><span class="line">black=000000</span><br><span class="line">blue(bold)=0080ff</span><br><span class="line">yellow(bold)=ffff00</span><br><span class="line">cyan(bold)=00ffff</span><br><span class="line">yellow=c0c000</span><br><span class="line">magenta=c000c0</span><br><span class="line">background=222222</span><br><span class="line">white=c0c0c0</span><br><span class="line">cyan=00c0c0</span><br><span class="line">[Names]</span><br><span class="line">count=1</span><br><span class="line">name0=isayme</span><br></pre></td></tr></table></figure></li><li><p>第二个<strong>ubuntu.xcs</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[ubuntu]</span><br><span class="line">text(bold)=ffffff</span><br><span class="line">magenta(bold)=ad7fa8</span><br><span class="line">text=ffffff</span><br><span class="line">white(bold)=eeeeec</span><br><span class="line">green=4e9a06</span><br><span class="line">red(bold)=ef2929</span><br><span class="line">green(bold)=8ae234</span><br><span class="line">black(bold)=555753</span><br><span class="line">red=cc0000</span><br><span class="line">blue=3465a4</span><br><span class="line">black=000000</span><br><span class="line">blue(bold)=729fcf</span><br><span class="line">yellow(bold)=fce94f</span><br><span class="line">cyan(bold)=34e2e2</span><br><span class="line">yellow=c4a000</span><br><span class="line">magenta=75507b</span><br><span class="line">background=300a24</span><br><span class="line">white=d3d7cf</span><br><span class="line">cyan=06989a</span><br><span class="line">[Names]</span><br><span class="line">count=1</span><br><span class="line">name0=ubuntu</span><br></pre></td></tr></table></figure></li></ol><p>保存为xcs格式文件就好，然后导入到Xshell</p><p>工具——&gt;配色方案——&gt;导入</p>]]></content>
      
      <categories>
          
          <category> Soft </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python两个字典的合并</title>
      <link href="/2017/01/17/Python%E4%B8%A4%E4%B8%AA%E5%AD%97%E5%85%B8%E7%9A%84%E5%90%88%E5%B9%B6/"/>
      <url>/2017/01/17/Python%E4%B8%A4%E4%B8%AA%E5%AD%97%E5%85%B8%E7%9A%84%E5%90%88%E5%B9%B6/</url>
      <content type="html"><![CDATA[<p>两个字典合并的，有几种方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict1=&#123;<span class="number">1</span>:[<span class="number">1</span>,<span class="number">11</span>,<span class="number">111</span>],<span class="number">2</span>:[<span class="number">2</span>,<span class="number">22</span>,<span class="number">222</span>]&#125;</span><br><span class="line">dict2=&#123;<span class="number">3</span>:[<span class="number">3</span>,<span class="number">33</span>,<span class="number">333</span>],<span class="number">4</span>:[<span class="number">4</span>,<span class="number">44</span>,<span class="number">444</span>]&#125;</span><br><span class="line"><span class="comment">#得到如下的结果</span></span><br><span class="line">&#123;<span class="number">1</span>:[<span class="number">1</span>,<span class="number">11</span>,<span class="number">111</span>],<span class="number">2</span>:[<span class="number">2</span>,<span class="number">22</span>,<span class="number">222</span>],<span class="number">3</span>:[<span class="number">3</span>,<span class="number">33</span>,<span class="number">333</span>],<span class="number">4</span>:[<span class="number">4</span>,<span class="number">44</span>,<span class="number">444</span>]&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>两个方法：</p><ol><li><p><code>dictMerged=dict(dict1.items()+dict2.items())</code></p></li><li><p><code>dictMerged2=dict(dict1, **dict2)</code></p><p>其中方法2类似于：</p><p><code>dictMerged=dict1.copy()</code><br><code>dictMerged.update(dict2)</code></p></li></ol><p>但是如果两个字典中有相同的key怎么办？</p><p>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = dict(a=<span class="number">1</span>, b=<span class="keyword">None</span>, c=<span class="number">3</span>)</span><br><span class="line">b = dict(a=<span class="keyword">None</span>, b=<span class="number">2</span>, c=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>要合并这两个字典该怎么办？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> b.items():</span><br><span class="line">    <span class="keyword">if</span> v:</span><br><span class="line">        a[k] = v</span><br><span class="line"><span class="keyword">print</span> a</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Pyhton的文件操作</title>
      <link href="/2017/01/12/Pyhton%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2017/01/12/Pyhton%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>​    最近搞处理文件，各种命令搞的头晕眼花，此处做个合并，以便之后观察使用。</p><a id="more"></a><p>1.重命名：<code>os.rename(old, new)</code><br>2.删除：<code>os.remove(file)</code><br>3.列出目录下的文件 ：<code>os.listdir(path)</code><br>4.获取当前工作目录：<code>os.getcwd()</code><br>5.改变工作目录：<code>os.chdir(newdir)</code><br>6.创建多级目录：<code>os.makedirs(r&quot;c:\python \test&quot;)</code><br>7.创建单个目录：<code>os.mkdir(&quot;test&quot;)</code><br>8.删除多个目录：<code>os.removedirs(r&quot;c:\python&quot;)</code> #删除所给路径最后一个目录下所有空目录。也可用<code>shutil.rmtree()</code><br>9.删除单个目录：<code>os.rmdir(&quot;test&quot;)</code><br>10.获取文件属性：<code>os.stat(file)</code><br>11.修改文件权限与时间戳：<code>os.chmod(file)</code><br>12.执行操作系统命令：<code>os.system(&quot;dir&quot;)</code><br>13.启动新进程：<code>os.exec()</code>, <code>os.execvp()</code><br>14.在后台执行程序：<code>osspawnv()</code><br>15.终止当前进程：<code>os.exit()</code>, <code>os._exit()</code><br>16.分离文件名：<code>os.path.split(r&quot;c:\python\hello.py&quot;) --&gt; (&quot;c:\\python&quot;, &quot;hello.py&quot;)</code><br>17.分离扩展名：<code>os.path.splitext(r&quot;c:\python\hello.py&quot;) --&gt; (&quot;c:\\python\\hello&quot;, &quot;.py&quot;)</code><br>18.获取路径名：<code>os.path.dirname(r&quot;c:\python\hello.py&quot;) --&gt; &quot;c:\\python&quot;</code><br>19.获取文件名：<code>os.path.basename(r&quot;r:\python\hello.py&quot;) --&gt; &quot;hello.py&quot;</code><br>20.判断文件或目录是否存在：<code>os.path.exists(r&quot;c:\python\hello.py&quot;) --&gt; True</code><br>21.判断是否是绝对路径：<code>os.path.isabs(r&quot;.\python\&quot;) --&gt; False</code><br>22.判断是否是目录：<code>os.path.isdir(r&quot;c:\python&quot;) --&gt; True</code><br>23.判断是否是文件：<code>os.path.isfile(r&quot;c:\python\hello.py&quot;) --&gt; True</code><br>24.判断是否是链接文件：<code>os.path.islink(r&quot;c:\python\hello.py&quot;) --&gt; False</code><br>25.获取文件大小：<code>os.path.getsize(filename)</code><br>26.搜索目录下的所有文件：<code>os.path.walk()</code></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux提示Give root password for maintenance</title>
      <link href="/2017/01/09/Linux%E6%8F%90%E7%A4%BAGive-root-password-for-maintenance/"/>
      <url>/2017/01/09/Linux%E6%8F%90%E7%A4%BAGive-root-password-for-maintenance/</url>
      <content type="html"><![CDATA[<p>由于非法重启或硬盘故障，会导致linux系统无法启动，无法进入操作系统。当你看到提示：<code>give root password for maintenance(or type control-D to continue):</code>的时候，你还有补救的机会。问题原因应该是/usr /home /boot分区磁盘检测出了问题。</p><a id="more"></a><p>用两个办法可以尝试。</p><p>方法一：</p><ol><li>输入root密码，回车</li><li>此时画面便会出现以下指令提示：<code>(Repair filesystem)1#:</code></li><li>在提示后输入<code>e2fsck -y /dev/hda2</code>，再按回车，便可检查档案系统</li><li>系统即会自动进行修复并于画面显示修复进度</li><li>完成后会自动重启，或者输入<code>exit</code></li></ol><p>大部份档案系统都可用此方法修复好，但如系统或重要的系统档案损毁严重，则必须重新安装系统</p><p>方法二：</p><ol><li><p>重启后界面停在：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">give root password for maintenance</span><br><span class="line">(or type control-D to continue):</span><br></pre></td></tr></table></figure><p>此时输入root密码，回车</p></li><li><p>输入<code>fsck -y</code>回车，会开始修复文件系统，时间长短不一。</p></li><li><p>修复完成后输入<code>reboot</code>回车重启电脑即可</p></li></ol>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python创建目录</title>
      <link href="/2016/12/30/Python%E5%88%9B%E5%BB%BA%E7%9B%AE%E5%BD%95/"/>
      <url>/2016/12/30/Python%E5%88%9B%E5%BB%BA%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>流程如下：</p><ol><li>判断目录是否存在<code>os.path.exists(path)</code></li><li>创建多层目录<code>os.path.makedirs(path)</code></li><li>创建目录<code>os.mkdir(path)</code></li></ol><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mkdir</span><span class="params">(path)</span>:</span></span><br><span class="line">path = path.strip() <span class="comment">#去除首位空格</span></span><br><span class="line">path = path.rstrip(<span class="string">"\\"</span>) <span class="comment">#去除尾部 \ 符号</span></span><br><span class="line"></span><br><span class="line">isExists = os.path.exists(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> isExists:</span><br><span class="line">os.makedirs(path)</span><br><span class="line"><span class="keyword">print</span> path + <span class="string">'创建成功'</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> path + <span class="string">' 目录已经存在'</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkpath = <span class="string">'c:\\test'</span></span><br><span class="line">mkdir(mkpath)</span><br></pre></td></tr></table></figure><p><strong>当父目录不存在的时候os.mkdir(path)不会创建，os.makedirs(path)则会创建父目录</strong></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux防火墙的关闭</title>
      <link href="/2016/12/02/Linux%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E5%85%B3%E9%97%AD/"/>
      <url>/2016/12/02/Linux%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E5%85%B3%E9%97%AD/</url>
      <content type="html"><![CDATA[<h3 id="在连接MySQL中，遇到ERROR_2002_(HY000):_mysql">在连接MySQL中，遇到ERROR 2002 (HY000): mysql</h3><p>这个其实是Linux防火墙的阻拦</p><p>解决办法就是关闭防火墙即可。</p><a id="more"></a><p>步骤如下：</p><ol><li>立即关闭：<code>service iptables stop</code></li><li>永久关闭：<code>iptables -F</code></li><li>禁止启动：<code>chkconfig iptables off</code></li><li>另外，运行 setup 在界面，选择Firewall configuration，进入下一界面，选择  Security Level为Disabled，保存。</li></ol>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>统计一个文件中某个单词的出现次数</title>
      <link href="/2016/11/30/%E7%BB%9F%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0/"/>
      <url>/2016/11/30/%E7%BB%9F%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>首先有一个最简单的方法，就是用正则匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">tmp = open(<span class="string">"123.txt"</span>, <span class="string">"r"</span>).read()</span><br><span class="line"><span class="keyword">print</span> len(re.findall(<span class="string">"hello"</span>, tmp))</span><br></pre></td></tr></table></figure><p>还可以利用Counter来实现更多的功能</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">pa = re.compile(<span class="string">"\w+"</span>)</span><br><span class="line">counter = collections.Counter(patt.findall(open(<span class="string">'reparser.py'</span>,<span class="string">'rt'</span>).read()))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># top 100</span></span><br><span class="line"><span class="keyword">for</span> word, times <span class="keyword">in</span> counter.most_common(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">print</span> word, times</span><br><span class="line"> </span><br><span class="line"><span class="comment"># find word</span></span><br><span class="line">counter_dict = dict(counter.most_common(<span class="number">0</span>))</span><br><span class="line">tobefind = <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">print</span> tobefind, counter_dict.get(tobefind, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>把SQL的显示结果输出到文本中</title>
      <link href="/2016/11/30/%E6%8A%8ASQL%E7%9A%84%E6%98%BE%E7%A4%BA%E7%BB%93%E6%9E%9C%E8%BE%93%E5%87%BA%E5%88%B0%E6%96%87%E6%9C%AC%E4%B8%AD/"/>
      <url>/2016/11/30/%E6%8A%8ASQL%E7%9A%84%E6%98%BE%E7%A4%BA%E7%BB%93%E6%9E%9C%E8%BE%93%E5%87%BA%E5%88%B0%E6%96%87%E6%9C%AC%E4%B8%AD/</url>
      <content type="html"><![CDATA[<h3 id="MySQL查询结果有三种方法输出到文本中">MySQL查询结果有三种方法输出到文本中</h3><ol><li><p>直接执行命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; select name from table  into outfile '/tmp/test.txt';</span><br></pre></td></tr></table></figure><a id="more"></a><p>在目录<code>/tmp/</code>下会产生文件test.txt</p><p>报错：<code>ERROR 1 (HY000): Can&#39;t create/write to file &#39;/data/test.xls&#39; (Errcode: 13)</code></p><p>mysql没有写权限</p></li><li><p>查询时自动写入文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; pager cat &gt; /tmp/test.txt ;</span><br><span class="line">PAGER <span class="keyword">set</span> <span class="keyword">to</span> <span class="string">'cat &gt; /tmp/test.txt'</span></span><br></pre></td></tr></table></figure><p>之后的所有查询结果都自动写入<code>/tmp/test.txt&#39;</code>，并前后覆盖</p></li><li><p>直接在bash下执行</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mysql -h 127.0.0.1 -u root -p dabase_name -P 3306 -e "select * from table"  &gt; /tmp/test.txt</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Git移除.deal等配置文件</title>
      <link href="/2016/11/10/Git%E7%A7%BB%E9%99%A4-deal%E7%AD%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2016/11/10/Git%E7%A7%BB%E9%99%A4-deal%E7%AD%89%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="如何在已经提交代码之后，移除-idea等配置文件">如何在已经提交代码之后，移除<code>.idea</code>等配置文件</h3><p>总结，先删除，再提交。</p><a id="more"></a><ol><li>先把<code>.idea</code>的配置文件剪贴到别的地方</li><li>通过git提交<ol><li><code>git add .</code></li><li><code>git commit -m &quot;&quot;</code></li><li><code>git push origin master</code></li></ol></li><li>去git仓库会发现配置文件已经没有了</li><li>干净后，<code>git rm -r --cached .idea</code> 取消跟踪</li><li>新建<code>.gitignore</code>文件，由于在windows中，无法新建没有名称的txt文件，所以需要通过git bash来创建。<ol><li>在项目根目录下打开git bash</li><li><code>touch .gitignore</code></li><li>打开新建的文件，添加<code>.idea</code>等要忽略的文件</li></ol></li><li>把第一部的配置文件重新剪切回来</li><li>重新添加提交</li></ol>]]></content>
      
      <categories>
          
          <category> GIT </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SSL证书的配置过程</title>
      <link href="/2016/10/27/SSL%E8%AF%81%E4%B9%A6%E7%9A%84%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B/"/>
      <url>/2016/10/27/SSL%E8%AF%81%E4%B9%A6%E7%9A%84%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="Apache_2配置SSL证书">Apache 2配置SSL证书</h3><p>本文描述在 Apache 2.x HTTP 服务器上安装并配置 SSL 证书。</p><a id="more"></a><h4 id="确保Apache_SSL模块的开启">确保Apache SSL模块的开启</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod ssl</span><br></pre></td></tr></table></figure><h4 id="配置SSL证书">配置SSL证书</h4><p>完整的SSL证书分为四个部分：</p><ul><li>CA 根证书 (root CA)</li><li>中级证书 (Intermediate Certificate)</li><li>域名证书</li><li>证书密钥 (仅本人持有)</li></ul><p>以 COMODO PositiveSSL 证书为例，将收到四份文件：</p><ul><li>根证书 - <code>AddTrustExternalCARoot.crt</code></li><li>中级证书 - <code>COMODORSAAddTrustCA.crt</code></li><li>中级证书 - <code>COMODORSADomainValidationSecureServerCA.crt</code></li><li>您的域名证书 - <code>example_com.crt</code></li></ul><p>要依照 <strong>中间证书 -&gt; 根证书</strong> 的顺序串联为证书链，才能被绝大多数浏览器信任。使用 <code>cat</code> 命令串联证书：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat COMODORSADomainValidationSecureServerCA.crt COMODORSAAddTrustCA.crt AddTrustExternalCARoot.crt &gt; ca-bundle.crt</span><br></pre></td></tr></table></figure><p>得到 <code>ca-bundle.crt</code> 后，和证书文件 <code>example_com.crt</code>，密钥文件 <code>example_com.key</code> 一同上传至服务器并保存在安全的位置，例如 <code>/etc/ssl/private</code> 目录下 (没有此目录请创建)。</p><h4 id="修改Apache站点配置">修改Apache站点配置</h4><p>下面是一份针对 Apache 2.4 的 SSL 部分配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SSLEngine on</span><br><span class="line">SSLCertificateFile    <span class="regexp">/etc/</span>ssl<span class="regexp">/private/</span>example_com.crt</span><br><span class="line">SSLCertificateKeyFile <span class="regexp">/etc/</span>ssl<span class="regexp">/private/</span>example_com.key</span><br><span class="line">SSLCertificateChainFile <span class="regexp">/etc/</span>ssl<span class="regexp">/private/</span>ca-bundle.crt</span><br></pre></td></tr></table></figure><p>以下为 <virtualhost> 的详细配置</virtualhost></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:443&gt;</span><br><span class="line">DocumentRoot /var/www/</span><br><span class="line">SSLEngine on</span><br><span class="line">SSLCertificateFile    /etc/ssl/private/example_com.crt</span><br><span class="line">SSLCertificateKeyFile /etc/ssl/private/example_com.key</span><br><span class="line">SSLCertificateChainFile /etc/ssl/private/ca-bundle.crt</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p><strong>请注意如果你的 Apache2 版本大于 2.4.8，您可以将所有证书串联为一个文件作为 SSLCertificateFile 的值，而不必写 SSLCertificateChainFile</strong></p><h4 id="强制定向到HTTPS">强制定向到HTTPS</h4><p>首先，我们需要确认 Apache 开启 <code>mod_rewrite</code> 模块，如果没有开启，请使用 <code>sudo a2enmod rewrite</code> 命令开启。</p><p>其次，你需要在站点配置文件中开启 <code>AllowOverride</code>，这样 <code>.htaccess</code> 文件才会起作用。</p><p>开启并重启 <code>Apache</code> 后，复制一下代码到你目录的 <code>.htaccess</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;HTTPS&#125; off</span><br><span class="line">RewriteRule (.*) https://%&#123;HTTP_HOST&#125;%&#123;REQUEST_URI&#125;</span><br></pre></td></tr></table></figure><h4 id="SSL安全配置">SSL安全配置</h4><h5 id="禁用压缩">禁用压缩</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">SSLCompression</span> <span class="literal">off</span></span><br></pre></td></tr></table></figure><h5 id="禁用_SSLv2_和_SSLv3">禁用 SSLv2 和 SSLv3</h5><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSLProtocol All -SSLv2 -SSLv3</span><br></pre></td></tr></table></figure><h5 id="抵御_Poodle_和_SSL_Downgrade_攻击">抵御 Poodle 和 SSL Downgrade 攻击</h5><p>您需要支持 <code>TLS-FALLBACK-SCSV</code> 以自动开启此功能。下列 OpenSSL 版本包含对 <code>TLS-FALLBACK-SCSV</code> 的支持，Lighttpd 会自动启用此特性。</p><ul><li>OpenSSL <strong>1.0.1</strong> 在 <code>1.0.1j</code> 及之后的版本中支持</li><li>OpenSSL <strong>1.0.0</strong> 在 <code>1.0.0o</code> 及之后的版本中支持</li><li>OpenSSL <strong>0.9.8</strong> 在 <code>0.9.8zc</code> 及之后的版本中支持</li></ul><h5 id="加密和交换算法">加密和交换算法</h5><p>一份推荐的配置：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSLCipherSuite <span class="number">EECDH</span>+AESGCM:<span class="number">EDH</span>+AESGCM:AES256+<span class="number">EECDH</span>:AES256+<span class="number">EDH</span></span><br></pre></td></tr></table></figure><p>如果您需要兼容老式系统和浏览器 (Windows XP, IE6)，请使用下面的：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSLCipherSuite EECDH+<span class="string">AESGCM:</span>EDH+<span class="string">AESGCM:</span>AES256+<span class="string">EECDH:</span>ECDHE-RSA-AES128-<span class="string">SHA:</span>DHE-RSA-AES128-GCM-<span class="string">SHA256:</span>AES256+<span class="string">EDH:</span>ECDHE-RSA-AES256-GCM-<span class="string">SHA384:</span>ECDHE-RSA-AES128-GCM-<span class="string">SHA256:</span>DHE-RSA-AES256-GCM-<span class="string">SHA384:</span>ECDHE-RSA-AES256-<span class="string">SHA384:</span>ECDHE-RSA-AES128-<span class="string">SHA256:</span>ECDHE-RSA-AES256-<span class="string">SHA:</span>DHE-RSA-AES256-<span class="string">SHA256:</span>DHE-RSA-AES128-<span class="string">SHA256:</span>DHE-RSA-AES256-<span class="string">SHA:</span>DHE-RSA-AES128-<span class="string">SHA:</span>ECDHE-RSA-DES-CBC3-<span class="string">SHA:</span>EDH-RSA-DES-CBC3-<span class="string">SHA:</span>AES256-GCM-<span class="string">SHA384:</span>AES128-GCM-<span class="string">SHA256:</span>AES256-<span class="string">SHA256:</span>AES128-<span class="string">SHA256:</span>AES256-<span class="string">SHA:</span>AES128-<span class="string">SHA:</span>DES-CBC3-<span class="string">SHA:</span><span class="string">HIGH:</span>!<span class="string">aNULL:</span>!<span class="string">eNULL:</span>!<span class="string">EXPORT:</span>!<span class="string">DES:</span>!<span class="string">MD5:</span>!<span class="string">PSK:</span>!RC4</span><br></pre></td></tr></table></figure><h5 id="Forward_Secrecy_和_DHE_参数">Forward Secrecy 和 DHE 参数</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/ssl/certs</span><br><span class="line">openssl dhparam -out dhparam.pem 4096</span><br></pre></td></tr></table></figure><p><strong>建议您使用性能强劲的平台生成此文件</strong>，例如最新版的至强物理机。如果您只有一台小型 VPS，请使用 <code>openssl dhparam -out dhparam.pem 2048</code> 命令生成 2048bit 的参数文件。</p><p>添加到配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSLOpenSSLConfCmd DHParameters "/etc/ssl/certs/dhparam.pem"</span><br></pre></td></tr></table></figure><h5 id="启用_HSTS">启用 HSTS</h5><p>添加到配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Optionally load the headers module:</span></span><br><span class="line">LoadModule headers_module modules/mod_headers.so</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost 67.89.123.45:443&gt;</span><br><span class="line">    Header always set Strict-Transport-Security "max-age=63072000; includeSubdomains; preload"</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><h2 id="重启_Apache">重启 Apache</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux虚拟机分辨率设置</title>
      <link href="/2016/10/24/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%86%E8%BE%A8%E7%8E%87%E8%AE%BE%E7%BD%AE/"/>
      <url>/2016/10/24/Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%86%E8%BE%A8%E7%8E%87%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="虚拟机中的Ubuntu16-04启动时自动设置分辨率1920x1080">虚拟机中的Ubuntu16.04启动时自动设置分辨率1920x1080</h2><p>​    vmware不能自动适应Ubuntu16.04的分辨率，而且Ubuntu16.04的display设置中也没有1920x1080的分辨率，因此需要通过修改<code>/etc/profile</code>文件文件来实现登录时自动设置分辨率为1920x1080。</p><p>​    <a id="more"></a></p><p>步骤如下：</p><ol><li>打开Terminal终端</li><li>输入如下命令<code>cvt 1920 1080</code>，得到结果<code>1920x108059.96 Hz(CVT 2.07M9) hsync:67.16kHz; pclk: 173.00 MHz Modeline &quot;1920x1080_60.00&quot; 173.00 1920 2048 2248 2576 1080 1083 10881120 -hsync +vsync</code></li><li>再输入<code>xrandr</code>结果中有显示器的名称</li><li>再输入<code>sudo xrandr --newmode &quot;1920x1080_60.00&quot; 173.00 1920 2048 2248 2576 1080 1083 1088 1120 -hsync +vsync</code> 和<code>sudo xrandr --addmode Virtual-0 &quot;1920x1080_60.00&quot;</code></li><li>找到<code>system setting &gt; display</code>, 在resolution列表下可以看到1920x1080的选项，勾选并apply</li></ol><p>完成之后保存退出</p>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python列出目录下的所有文件夹和文件</title>
      <link href="/2016/10/13/Python%E5%88%97%E5%87%BA%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E6%96%87%E4%BB%B6/"/>
      <url>/2016/10/13/Python%E5%88%97%E5%87%BA%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>Python版本：2.7.x</p><p>代码如下：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">allFileNum = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printPath</span><span class="params">(level, path)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> allFileNum</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        打印一个目录下的所有文件夹和文件</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 所有文件夹，第一个字段是次目录的级别</span></span><br><span class="line">    dirList = []</span><br><span class="line">    <span class="comment"># 所有文件</span></span><br><span class="line">    fileList = []</span><br><span class="line">    <span class="comment"># 返回一个列表</span></span><br><span class="line">    files = os.listdir(path)</span><br><span class="line">    <span class="comment"># 添加目录级别</span></span><br><span class="line">    dirList.append(str(level))</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span>(os.path.isdir(path + <span class="string">'/'</span> + f)):</span><br><span class="line">            <span class="keyword">if</span>(f[<span class="number">0</span>] == <span class="string">"."</span>):</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 添加非隐藏文件夹</span></span><br><span class="line">                dirList.append(f)</span><br><span class="line">        <span class="keyword">if</span>(os.path.isfile(path + <span class="string">'/'</span> + f)):</span><br><span class="line">            fileList.append(f)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当一个标志使用，文件夹列表第一个级别不打印</span></span><br><span class="line">    i_dl = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> dl <span class="keyword">in</span> dirList:</span><br><span class="line">        <span class="keyword">if</span> (i_dl == <span class="number">0</span>):</span><br><span class="line">            i_dl += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 打印至控制台，不是第一个的目录</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'-'</span> * (int(dirList[<span class="number">0</span>])), dl</span><br><span class="line">            <span class="comment"># 打印目录下的所有文件夹和文件，目录级别+1</span></span><br><span class="line">            printPath((int(dirList[<span class="number">0</span>]) + <span class="number">1</span>), path + <span class="string">'/'</span> + dl)</span><br><span class="line">    <span class="keyword">for</span> fl <span class="keyword">in</span> fileList:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'-'</span> * (int(dirList[<span class="number">0</span>])), fl</span><br><span class="line">        allFileNum = allFileNum + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    printPath(<span class="number">1</span>, <span class="string">'D:\python\python_tool'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"总文件数 = "</span>, allFileNum</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python中把列表转换为字典</title>
      <link href="/2016/10/01/Python%E4%B8%AD%E6%8A%8A%E5%88%97%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E5%85%B8/"/>
      <url>/2016/10/01/Python%E4%B8%AD%E6%8A%8A%E5%88%97%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E5%85%B8/</url>
      <content type="html"><![CDATA[<p>有以下几个方法：</p><p>1、    现在有两个列表，<code>list1 = [&#39;key1&#39;,&#39;key2&#39;,&#39;key3&#39;]</code>和<code>list2 = [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;]</code>，把他们转为这样的字典：<code>{&#39;key1&#39;:&#39;1&#39;,&#39;key2&#39;:&#39;2&#39;,&#39;key3&#39;:&#39;3&#39;}</code></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'key1'</span>,<span class="string">'key2'</span>,<span class="string">'key3'</span>]</span><br><span class="line">list2 = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>]</span><br><span class="line"><span class="keyword">print</span> dict(zip(list1, list2))</span><br><span class="line"><span class="comment"># &#123;'key3': 'value3', 'key2': 'value2', 'key1': 'value1'&#125;</span></span><br></pre></td></tr></table></figure><p>2、    将嵌套列表转为字典，有两种方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new_list= [[<span class="string">'key1'</span>,<span class="string">'value1'</span>],[<span class="string">'key2'</span>,<span class="string">'value2'</span>],[<span class="string">'key3'</span>,<span class="string">'value3'</span>]]</span><br><span class="line">new_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> new_list:</span><br><span class="line">new_dict[i[<span class="number">0</span>]] = i[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">print</span> new_dict()</span><br><span class="line"><span class="comment">#&#123;'key3': 'value3', 'key2': 'value2', 'key1': 'value1'&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new_list= [[<span class="string">'key1'</span>,<span class="string">'value1'</span>],[<span class="string">'key2'</span>,<span class="string">'value2'</span>],[<span class="string">'key3'</span>,<span class="string">'value3'</span>]]</span><br><span class="line"><span class="keyword">print</span> dict(new_list)</span><br><span class="line"><span class="comment">#&#123;'key3': 'value3', 'key2': 'value2', 'key1': 'value1'&#125;</span></span><br></pre></td></tr></table></figure><p>3、    list1 = [k1 : {key1 : value1,  key2 : value3}] 转变成 list2 = [k1: [ {key1 : value1}, {key2 : value2}] ]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> list1.items:</span><br><span class="line">    sm = &#123;&#125;</span><br><span class="line">    sm[k] = v</span><br><span class="line">    list2.append(sm)</span><br><span class="line"><span class="keyword">print</span> list2</span><br><span class="line"><span class="comment"># [k1: [ &#123;key1 : value1&#125;, &#123;key2 : value2&#125;] ]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux压缩解压的几个命令</title>
      <link href="/2016/09/21/Linux%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E7%9A%84%E5%87%A0%E4%B8%AA%E5%91%BD%E4%BB%A4/"/>
      <url>/2016/09/21/Linux%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E7%9A%84%E5%87%A0%E4%B8%AA%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h4 id="该Linux解压是在Ubuntu14LTS下进行的，主要是几个常见的命令">该Linux解压是在Ubuntu14LTS下进行的，主要是几个常见的命令</h4><ol><li><p><code>.tar</code></p><p>解包：<code>tar xvf FileName.tar</code></p><p>打包：<code>tar cvf FileName.tar DirName</code></p><p>PS：打包和压缩是两个概念</p><a id="more"></a></li><li><p><code>.gz</code></p><p>解压1：<code>gunzip FileName.gz</code><br>解压2：<code>gzip -d FileName.gz</code><br>压缩：<code>gzip FileName</code></p><p><code>.tar.gz</code> 和 <code>.tgz</code><br>解压：<code>tar zxvf FileName.tar.gz</code><br>压缩：<code>tar zcvf FileName.tar.gz DirName</code></p></li><li><p><code>.bz2</code></p><p>解压1：<code>bzip2 -d FileName.bz2</code><br>解压2：<code>bunzip2 FileName.bz2</code><br>压缩： <code>bzip2 -z FileName</code></p><p><code>.tar.bz2</code><br>解压：<code>tar jxvf FileName.tar.bz2</code><br>压缩：<code>tar jcvf FileName.tar.bz2 DirName</code></p></li><li><p><code>.zip</code></p><p>解压：<code>unzip FileName.zip</code><br>压缩：<code>zip FileName.zip DirName</code></p></li><li><p><code>.rar</code></p><p>解压：<code>rar x FileName.rar</code><br>压缩：<code>rar a FileName.rar DirName</code></p></li><li><p><code>.rmp</code></p><p>解包：<code>rpm2cpio FileName.rpm | cpio -div</code></p></li><li><p><code>.deb</code></p><p>解包：<code>ar p FileName.deb data.tar.gz | tar zxf -</code></p></li><li><p>.tar .tgz .tar.gz .tar.Z .tar.bz .tar.bz2 .zip .cpio .rpm .deb .slp .arj .rar .ace .lha .lzh .lzx .lzs .arc .sda .sfx .lnx .zoo .cab .kar .cpt .pit .sit .sea</p><p>解压：<code>sEx x FileName.*</code><br>压缩：<code>sEx a FileName.* FileName</code></p><p>PS：sEx只是调用相关程序，本身并无压缩、解压功能，请注意！</p><p>​</p><p>​</p></li></ol>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python进行URL解码</title>
      <link href="/2016/09/18/Python%E8%BF%9B%E8%A1%8CURL%E8%A7%A3%E7%A0%81/"/>
      <url>/2016/09/18/Python%E8%BF%9B%E8%A1%8CURL%E8%A7%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<h4 id="Python进行URL解码">Python进行URL解码</h4><p>所用模块：<code>urllib</code></p><p>所用函数：<code>urllib.unquote()</code></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">rawurl = <span class="string">"%E8%A7%A3%E7%A0%81"</span></span><br><span class="line">url = urllib.unquote(rawurl)</span><br><span class="line"><span class="keyword">print</span> url</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解码</span><br></pre></td></tr></table></figure><p>与上述函数对应的是编码函数:<code>urllib.quote()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">urllib.quote(<span class="string">"解码"</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="perl">%E8%A7%A3%E7%A0%81</span><span class="xml"></span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python批量重命名</title>
      <link href="/2016/09/14/Python%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D/"/>
      <url>/2016/09/14/Python%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D/</url>
      <content type="html"><![CDATA[<h4 id="使用Python2-7版本">使用Python2.7版本</h4><p>代码如下：</p><a id="more"></a><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /user/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding=UTF-8 -*-   </span></span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#执行重命名  </span></span><br><span class="line">path = <span class="string">'D:\\check\\Images'</span>  </span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):  </span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(os.path.join(path,file))==<span class="keyword">True</span>:  </span><br><span class="line">        newname = file.replace(<span class="string">"test"</span>,<span class="string">"a.xml"</span>)  </span><br><span class="line">        os.rename(os.path.join(path,file),os.path.join(path,newname))  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#打印文件名列表          </span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):  </span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(os.path.join(path,file))==<span class="keyword">True</span>:  </span><br><span class="line">        print file&lt;/span&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>SSH文件上传错误</title>
      <link href="/2016/09/05/SSH%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%94%99%E8%AF%AF/"/>
      <url>/2016/09/05/SSH%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<h4 id="SSH_文件上传错误：encountered_1_errors_during_the_transfer解决方法">SSH 文件上传错误：encountered 1 errors during the transfer解决方法</h4><p>​    这个错误Google一下会发现有很多，基本的解决情况如下四种：</p><ol><li><p>在SSH Secure File Transfer，打开“Operation”菜单，打开“File Transfer Mode”子菜单，再选择“Binary”</p><a id="more"></a></li><li><p>把服务器上同名文件删掉再传</p></li><li><p>如果文件在中文路径下，将要上传的文件复制到其它英文路径下，再上传！</p></li><li><p>到<a href="http://winscp.net/eng/index.php" target="_blank" rel="noopener">winsco</a>下载 WInSCP，再传！</p></li></ol>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>搞了台台式机</title>
      <link href="/2016/09/04/%E6%90%9E%E4%BA%86%E5%8F%B0%E5%8F%B0%E5%BC%8F%E6%9C%BA/"/>
      <url>/2016/09/04/%E6%90%9E%E4%BA%86%E5%8F%B0%E5%8F%B0%E5%BC%8F%E6%9C%BA/</url>
      <content type="html"><![CDATA[<ol><li><p>CPU：<a href="https://item.taobao.com/item.htm?spm=a230r.1.14.22.r8EkjI&amp;id=521139022497&amp;ns=1&amp;abbucket=10#detail" target="_blank" rel="noopener">https://item.taobao.com/item.htm?spm=a230r.1.14.22.r8EkjI&amp;id=521139022497&amp;ns=1&amp;abbucket=10#detail</a></p><p>1185</p><a id="more"></a></li><li><p>主板：<a href="http://item.jd.com/1853383.html" target="_blank" rel="noopener">http://item.jd.com/1853383.html</a></p><p>599</p></li><li><p>内存：<a href="http://item.jd.com/10512793114.html" target="_blank" rel="noopener">http://item.jd.com/10512793114.html</a></p><p>299</p></li><li><p>显卡：RX470 肥猫家的玩家版<br>1389</p></li><li><p>硬盘：<a href="http://item.jd.com/1154863.html?jd_pop=1ffd9d60-338f-4cd6-a9c7-b2ef0beddf1a&amp;abt=0" target="_blank" rel="noopener">http://item.jd.com/1154863.html?jd_pop=1ffd9d60-338f-4cd6-a9c7-b2ef0beddf1a&amp;abt=0</a></p><p>299</p><p><a href="https://item.jd.com/2073071.html" target="_blank" rel="noopener">https://item.jd.com/2073071.html</a></p><p>310</p></li><li><p>电源：<a href="https://item.jd.com/491717.html" target="_blank" rel="noopener">https://item.jd.com/491717.html</a></p><p>339</p></li><li><p>主机箱：<a href="http://item.jd.com/1842778.html?jd_pop=8f9c3391-3049-4802-8f10-c2c52b62cc79&amp;abt=3" target="_blank" rel="noopener">http://item.jd.com/1842778.html?jd_pop=8f9c3391-3049-4802-8f10-c2c52b62cc79&amp;abt=3</a></p><p>199</p></li></ol>]]></content>
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>解决Win10下WIFI无法连接到网络</title>
      <link href="/2016/08/27/%E8%A7%A3%E5%86%B3Win10%E4%B8%8BWIFI%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E5%88%B0%E7%BD%91%E7%BB%9C/"/>
      <url>/2016/08/27/%E8%A7%A3%E5%86%B3Win10%E4%B8%8BWIFI%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5%E5%88%B0%E7%BD%91%E7%BB%9C/</url>
      <content type="html"><![CDATA[<p>​    最近在家连接WIFI，出现了【无法连接到网络】的问题。</p><p>​    具体表现为：在WIFI列表中，可以搜索到WIFI信号，但是连接的时候，就出现了【无法连接到网络】的报错提示。或者在连接上之后，出现了无Internet，安全字样。</p><a id="more"></a><p>解决办法：</p><ol><li>看其余笔记本和手机是否能正常上网，可以的话，路由器没问题。</li><li>确认自己的笔记本在别的WIFI环境下能否正常上网，可以的话，WIFI驱动是没问题的。其中，把WIFI模块的电源管理给关闭掉。</li><li>在路由器的控制界面，它的工作模式是【802.11 b/g/n mixed】混合模式。将其改成<code>n only</code>就可以了。重启路由器就可以了。</li></ol>]]></content>
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Xposed is installed but not actived</title>
      <link href="/2016/08/25/Xposed-is-installed-but-not-actived/"/>
      <url>/2016/08/25/Xposed-is-installed-but-not-actived/</url>
      <content type="html"><![CDATA[<h3 id="Xposed_framework_version_78_is_installed,_but_not_active">Xposed framework version 78 is installed, but not active</h3><p>这个现象本人是发生在4C上，系统是CM13,Xposed是V85版本。<br>解决方案如下：<br><a id="more"></a></p><ol><li>打开Root Explorer</li><li>进入到<code>root/data/data/de.robv.android.xposed.installer/conf</code>这个目录下</li><li>把名字为<code>disable</code>的文件删除</li><li>重启 </li></ol>]]></content>
      
      <categories>
          
          <category> Xposed </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>HTTP基础和变迁</title>
      <link href="/2016/08/24/HTTP%E5%9F%BA%E7%A1%80%E5%92%8C%E5%8F%98%E8%BF%81/"/>
      <url>/2016/08/24/HTTP%E5%9F%BA%E7%A1%80%E5%92%8C%E5%8F%98%E8%BF%81/</url>
      <content type="html"><![CDATA[<h2 id="HTTP">HTTP</h2><p>​    HTTP（HyperTextTransferProtocol）是超文本传输协议的缩写，它用于传送WWW方式的数据，关于HTTP 协议的详细内容请参考RFC2616。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求，请求头包含请求的方法、URI、协议版本、以及包含请求修饰符、客户 信息和内容的类似于MIME的消息结构。服务器以一个状态行作为响应，相应的内容包括消息协议的版本，成功或者错误编码加上包含服务器信息、实体元信息以及可能的实体内容。<br>HTTP是一种无状态性的协议。这是因为此种协议不要求浏览器在每次请求中标明它自己的身份，并且浏览器以及服务器之间并没有保持一个持久性的连接用于多个页面之间的访问。当一个用户访问一个站点的时候，用户的浏览器发送一个HTTP请求到服务器，服务器返回给浏览器一个HTTP响应。其实很简单的一个概念，客户端一个请求，服务器端一个回复，这就是整个基于HTTP协议的通讯过程。</p><a id="more"></a><h3 id="URL">URL</h3><p>​    在WWW上，每一信息资源都有统一的且在网上唯一的地址，该地址就叫URL（Uniform Resource Locator,统一资源定位符），它是WWW的统一资源定位标志。URL分为绝对URL与相对URL两种。绝对URL和访问时的状态完全无关。与之相对应的是省略了部分信息的相对（relative）URL，如../file.php?text=hello+world，它需要根据当前浏览所在上下文环境里的基准URL，才能确定完整的URL地址。</p><p>​    URL由三部分组成：资源类型、存放资源的主机域名、资源文件名。URL的一般语法格式为：(带方括号[]的为可选项)：<code>protocol :// hostname[:port] / path / ;parameters#fragment</code></p><h3 id="消息格式">消息格式</h3><p>​    通常HTTP消息包括客户机向服务器的请求消息和服务器向客户机的响应消息。这两种类型的消息由一个起始行，一个或者多个头域，一个只是头域结束的空行和可选的消息体组成。HTTP的头域包括<strong>通用头，请求头，响应头和实体头</strong>四个部分。每个头域由一个域名，冒号（:）和域值三部分组成。域名是大小写无关的，域值前可以添加任何数量的空格符，头域可以被扩展为多行，在每行开始处，使用至少一个空格或制表符。</p><p>​    当用户访问<a href="HTTP://example.com" target="_blank" rel="noopener">HTTP://example.com</a>这个域名的时候，浏览器就会自动和服务器建立tcp/ip连接，然后发送HTTP请求到example.com的服务器的80端口。该个请求的语法如下所示：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: example.org</span><br></pre></td></tr></table></figure><p>​    以上第一行叫做请求行，第二个参数(一个反斜线在这个例子中)表示所请求资源的路径。反斜线代表了根目录;服务器会转换这个根目录为服务器文件系统中的一个具体目录。</p><p>​    Apache的用户常用DocumentRoot这个命令来设置这个文档根路径。如果请求的url是<a href="undefined">HTTP://example.org/path/to/sc…</a>那么请求的路径就是<code>/path/to/script.php</code>。假如document root 被定义为<code>usr/lcoal/apache/htdocs</code>的话,整个请求的资源路径就是<code>/usr/local/apache/htdocs/path/to/script.php</code>。</p><p>​    第二行描述的是HTTP头部的语法。在这个例子中的头部是Host, 它标识了浏览器希望获取资源的域名主机。还有很多其它的请求头部可以包含在HTTP请求中，比如user-Agent头部，在php可以通过<code>$_SERVER[&#39;HTTP_USER_AGENT&#39;]</code>获取请求中所携带的这个头部信息。</p><h2 id="HTTP前世今生">HTTP前世今生</h2><h3 id="HTTP_0-9">HTTP 0.9</h3><p>​    最早版本是1991年发布的0.9版。该版本极其简单，只有一个命令<code>GET</code>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html</span><br></pre></td></tr></table></figure><p>​    上面命令表示，TCP 连接（connection）建立后，客户端向服务器请求（request）网页<code>index.html</code>。协议规定，服务器只能回应HTML格式的字符串，不能回应别的格式。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;Hello World&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>​    服务器发送完毕，就关闭TCP连接。</p><h3 id="HTTP1-0">HTTP1.0</h3><p>​    1996年5月，HTTP/1.0 版本发布，内容大大增加。首先，任何格式的内容都可以发送。这使得互联网不仅可以传输文字，还能传输图像、视频、二进制文件。这为互联网的大发展奠定了基础。其次，除了<code>GET</code>命令，还引入了<code>POST</code>命令和<code>HEAD</code>命令，丰富了浏览器与服务器的互动手段。再次，HTTP请求和回应的格式也变了。除了数据部分，每次通信都必须包括头信息（HTTP header），用来描述一些元数据。其他的新增功能还包括状态码（status code）、多字符集支持、多部分发送（multi-part type）、权限（authorization）、缓存（cache）、内容编码（content encoding）等。</p><h4 id="短暂连接的缺陷">短暂连接的缺陷</h4><p>​    HTTP 1.0规定浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接，服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求。但是，这也造成了一些性能上的缺陷，例如，一个包含有许多图像的网页文件中并没有包含真正的图像数据内容，而只是指明了这些图像的URL地址，当WEB浏览器访问这个网页文件时，浏览器首先要发出针对该网页文件的请求，当浏览器解析WEB服务器返回的该网页文档中的HTML内容时，发现其中的<img>图像标签后，浏览器将根据<img>标签中的src属性所指定的URL地址再次向服务器发出下载图像数据的请求：</p><p><img src="https://ooo.0o0.ooo/2016/08/24/57bd53f7b4ad8.jpg" alt="1.jpg"></p><p>​    显然，访问一个包含有许多图像的网页文件的整个过程包含了多次请求和响应，每次请求和响应都需要建立一个单独的连接，每次连接只是传输一个文档和图像，上一 次和下一次请求完全分离。即使图像文件都很小，但是客户端和服务器端每次建立和关闭连接却是一个相对比较费时的过程，并且会严重影响客户机和服务器的性 能。当一个网页文件中包含Applet，JavaScript文件，CSS文件等内容时，也会出现类似上述的情况。</p><h3 id="HTTP1-1">HTTP1.1</h3><h4 id="持久连接">持久连接</h4><p>​    在HTTP1.0中，每对Request/Response都使用一个新的连接。HTTP 1.1则支持持久连接Persistent Connection, 并且默认使用persistent connection. 在同一个tcp的连接中可以传送多个HTTP请求和响应. 多个请求和响应可以重叠，多个请求和响应可以同时进行. 更加多的请求头和响应头(比如HTTP1.0没有host的字段).HTTP 1.1的持续连接，也需要增加新的请求头来帮助实现，例如，Connection请求头的值为Keep-Alive时，客户端通知服务器返回本次请求结果后保持连接；Connection请求头的值为close时，客户端通知服务器返回本次请求结果后关闭连接。HTTP 1.1还提供了与身份认证、状态管理和Cache缓存等机制相关的请求头和响应头。HTTP 1.0规定浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接，服务器完成请求处理后立即断开TCP连接，服务器不跟踪 每个客户也不记录过去的请求。此外，由于大多数网页的流量都比较小，一次TCP连接很少能通过slow-start区，不利于提高带宽利用率。</p><p><img src="https://ooo.0o0.ooo/2016/08/24/57bd53f7bdeba.jpg" alt="2.jpg"></p><h4 id="管道机制">管道机制</h4><p>1.1 版还引入了管道机制（pipelining），即在同一个TCP连接里面，客户端可以同时发送多个请求。这样就进一步改进了HTTP协议的效率。举例来说，客户端需要请求两个资源。以前的做法是，在同一个TCP连接里面，先发送A请求，然后等待服务器做出回应，收到后再发出B请求。管道机制则是允许浏览器同时发出A请求和B请求，但是服务器还是按照顺序，先回应A请求，完成后再回应B请求。</p><h4 id="分块传输编码">分块传输编码</h4><p>​    <strong>分块传输编码</strong>（<strong>Chunked transfer encoding</strong>）是超文本传输协议（HTTP）中的一种数据传输机制，允许HTTP由应用服务器发送给客户端应用（ 通常是网页浏览器）的数据可以分成多个部分。分块传输编码只在HTTP协议1.1版本（HTTP/1.1）中提供。通常，HTTP应答消息中发送的数据是整个发送的，Content-Length消息头字段表示数据的长度。数据的长度很重要，因为客户端需要知道哪里是应答消息的结束，以及后续应答消息的开始。然而，使用分块传输编码，数据分解成一系列数据块，并以一个或多个块发送，这样服务器可以发送数据而不需要预先知道发送内容的总大小。通常数据块的大小是一致的，但也不总是这种情况。</p><p>​    HTTP 1.1引入分块传输编码提供了以下几点好处：</p><ol><li>HTTP分块传输编码允许服务器为动态生成的内容维持HTTP持久连接。通常，持久链接需要服务器在开始发送消息体前发送Content-Length消息头字段，但是对于动态生成的内容来说，在内容创建完之前是不可知的。<strong>[动态内容，content-length无法预知]</strong></li><li>分块传输编码允许服务器在最后发送消息头字段。对于那些头字段值在内容被生成之前无法知道的情形非常重要，例如消息的内容要使用散列进行签名，散列的结果通过HTTP消息头字段进行传输。没有分块传输编码时，服务器必须缓冲内容直到完成后计算头字段的值并在发送内容前发送这些头字段的值。<strong>[散列签名，需缓冲完成才能计算]</strong></li><li>HTTP服务器有时使用压缩 （gzip或deflate）以缩短传输花费的时间。分块传输编码可以用来分隔压缩对象的多个部分。在这种情况下，块不是分别压缩的，而是整个负载进行压缩，压缩的输出使用本文描述的方案进行分块传输。在压缩的情形中，分块编码有利于一边进行压缩一边发送数据，而不是先完成压缩过程以得知压缩后数据的大小。<strong>[gzip压缩，压缩与传输同时进行]</strong></li></ol><p>​    一般情况HTTP的Header包含Content-Length域来指明报文体的长度。有时候服务生成HTTP回应是无法确定消息大小的，比如大文件的下载，或者后台需要复杂的逻辑才能全部处理页面的请求，这时用需要实时生成消息长度，服务器一般使用chunked编码。在进行Chunked编码传输时，在回复消息的Headers有transfer-coding域值为chunked，表示将用chunked编码传输内容。使用chunked编码的Headers如下（可以利用FireFox的FireBug插件或HttpWatch查看Headers信息）：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">　　Chunked-Body=*chunk   </span><br><span class="line">  　　　　　　　　　"0"CRLF   </span><br><span class="line">  　　　　　　　　　footer   </span><br><span class="line">  　　　　　　　　　CRLF   </span><br><span class="line">  　　chunk=chunk-size[chunk-ext]CRLF   </span><br><span class="line">  　　　　　　chunk-dataCRLF   </span><br><span class="line">    </span><br><span class="line">  　　hex-no-zero=&lt;HEXexcluding"0"&gt;   </span><br><span class="line">    </span><br><span class="line">  　　chunk-size=hex-no-zero*HEX   </span><br><span class="line">  　　chunk-ext=*(";"chunk-ext-name["="chunk-ext-value])   </span><br><span class="line">  　　chunk-ext-name=token   </span><br><span class="line">  　　chunk-ext-val=token|quoted-string   </span><br><span class="line">  　　chunk-data=chunk-size(OCTET)   </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">  　　footer=*entity-header</span><br></pre></td></tr></table></figure><p>​    编码使用若干个Chunk组成，由一个标明长度为0的chunk结束，每个Chunk有两部分组成，第一部分是该Chunk的长度和长度单位（一般不 写），第二部分就是指定长度的内容，每个部分用CRLF隔开。在最后一个长度为0的Chunk中的内容是称为footer的内容，是一些没有写的头部内容。下面给出一个Chunked的解码过程（RFC文档中有）：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  　　length:=0   </span><br><span class="line">  　　readchunk-size,chunk-ext(ifany)andCRLF   </span><br><span class="line">  　　while(chunk-size&gt;0)&#123;   </span><br><span class="line">  　　readchunk-dataandCRLF   </span><br><span class="line">  　　appendchunk-datatoentity-body   </span><br><span class="line">  　　length:=length+chunk-size   </span><br><span class="line">  　　readchunk-sizeandCRLF   </span><br><span class="line">  　　&#125;   </span><br><span class="line">  　　readentity-header   </span><br><span class="line">  　　while(entity-headernotempty)&#123;   </span><br><span class="line">  　　appendentity-headertoexistingheaderfields   </span><br><span class="line">  　　readentity-header   </span><br><span class="line">  　　&#125;   </span><br><span class="line">  　　Content-Length:=length   </span><br><span class="line">  　　<span class="attribute">Remove"chunked"fromTransfer-Encoding</span></span><br></pre></td></tr></table></figure><h3 id="HTTP2">HTTP2</h3><h4 id="二进制协议支持">二进制协议支持</h4><p>​    HTTP/1.1 版的头信息肯定是文本（ASCII编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为”帧”（frame）：头信息帧和数据帧。二进制协议的一个好处是，可以定义额外的帧。HTTP/2 定义了近十种帧，为将来的高级应用打好了基础。如果使用文本实现这种功能，解析数据将会变得非常麻烦，二进制解析则方便得多。</p><h4 id="多工复用">多工复用</h4><p>​    HTTP/2 复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应，这样就避免了”队头堵塞”。举例来说，在一个TCP连接里面，服务器同时收到了A请求和B请求，于是先回应A请求，结果发现处理过程非常耗时，于是就发送A请求已经处理好的部分， 接着回应B请求，完成后，再发送A请求剩下的部分。这样双向的、实时的通信，就叫做多工（Multiplexing）。</p><h4 id="数据流">数据流</h4><p>​    因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的回应。因此，必须要对数据包做标记，指出它属于哪个回应。HTTP/2 将每个请求或回应的所有数据包，称为一个数据流（stream）。每个数据流都有一个独一无二的编号。数据包发送的时候，都必须标记数据流ID，用来区分它属于哪个数据流。另外还规定，客户端发出的数据流，ID一律为奇数，服务器发出的，ID为偶数。数据流发送到一半的时候，客户端和服务器都可以发送信号（RST_STREAM帧），取消这个数据流。1.1版取消数据流的唯一方法，就是关闭TCP连接。这就是说，HTTP/2 可以取消某一次请求，同时保证TCP连接还打开着，可以被其他请求使用。客户端还可以指定数据流的优先级。优先级越高，服务器就会越早回应。</p><h4 id="头信息压缩">头信息压缩</h4><p>​    HTTP 协议不带有状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如Cookie和User Agent，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。HTTP/2 对这一点做了优化，引入了头信息压缩机制（header compression）。一方面，头信息使用gzip或compress压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了。</p><h4 id="服务器推送">服务器推送</h4><p>​    HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送（server push）。常见场景是客户端请求一个网页，这个网页里面包含很多静态资源。正常情况下，客户端必须收到网页后，解析HTML源码，发现有静态资源，再发出静态资源请求。其实，服务器可以预期到客户端请求网页后，很可能会再请求静态资源，所以就主动把这些静态资源随着网页一起发给客户端了。</p><h2 id="HTTP_General_Header:HTTP_通用头">HTTP General Header:HTTP 通用头</h2><p>​    就整个网络资源传输而言，包括message-header和message-body两部分。首先传递message-header，即<strong>HTTP</strong> <strong>header</strong>消息。HTTP header 消息通常被分为4个部分：general header, request header, response header, entity header。但是这种分法就理解而言，感觉界限不太明确。根据维基百科对HTTP header内容的组织形式，大体分为Request和Response两部分。笔者在这里只是对于常见的协议头内容做一个列举，不同的设置会有不同的功能效果，会在下文中详细说明。本部分只介绍请求头的通用构成，具体的请求与响应参考各自章节。</p><blockquote><p><strong>注意每个Header的冒号后面有个空格</strong></p></blockquote><p>​    通用头域包含请求和响应消息都支持的头域，通用头域包含Cache-Control、 Connection、Date、Pragma、Transfer-Encoding、Upgrade、Via。对通用头域的扩展要求通讯双方都支持此扩展，如果存在不支持的通用头域，一般将会作为实体头域处理。</p><h3 id="Date">Date</h3><p>​    Date头域表示消息发送的时间，时间的描述格式由rfc822定义。例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。</p><h3 id="Pragma">Pragma</h3><p>​    Pragma头域用来包含实现特定的指令，最常用的是Pragma:no-cache。在HTTP/1.1协议中，它的含义和Cache-Control:no-cache相同。</p><h3 id="Entity">Entity</h3><p>​    请求消息和响应消息都可以包含实体信息，实体信息一般由实体头域和实体组成。实体头域包含关于实体的原信息，实体头包括Allow、Content- Base、Content-Encoding、Content-Language、 Content-Length、Content-Location、Content-MD5、Content-Range、Content-Type、 Etag、Expires、Last-Modified、extension-header。extension-header允许客户端定义新的实体 头，但是这些域可能无法未接受方识别。实体可以是一个经过编码的字节流，它的编码方式由Content-Encoding或Content-Type定 义，它的长度由Content-Length或Content-Range定义。</p><h3 id="Content-Type">Content-Type</h3><p>​    Content-Type实体头用于向接收方指示实体的介质类型，指定HEAD方法送到接收方的实体介质类型，或GET方法发送的请求介质类型Content-Range实体头。关于字符的编码，1.0版规定，头信息必须是 ASCII 码，后面的数据可以是任何格式。因此，服务器回应的时候，必须告诉客户端，数据是什么格式。Content-Range实体头用于指定整个实体中的一部分的插入位置，他也指示了整个实体的长度。在服务器向客户返回一个部分响应，它必须描述响应覆盖的范围和整个实体长度。一般格式：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Range:bytes-unitSPfirst-byte-pos-last-byte-pos/entity-legth</span></span><br></pre></td></tr></table></figure><p>​    Content-Type表明信息类型，缺省值为” text/plain”。它包含了主要类型（primary type）和次要类型（subtype）两个部分，两者之间用”/“分割。主要类型有9种，分别是application、audio、example、image、message、model、multipart、text、video。每一种主要类型下面又有许多种次要类型，常见的有：</p><ul><li>text/plain：纯文本，文件扩展名.txt</li><li>text/html：HTML文本，文件扩展名.htm和.html</li><li>image/jpeg：jpeg格式的图片，文件扩展名.jpg</li><li>image/gif：GIF格式的图片，文件扩展名.gif</li><li>audio/x-wave：WAVE格式的音频，文件扩展名.wav</li><li>audio/mpeg：MP3格式的音频，文件扩展名.mp3</li><li>video/mpeg：MPEG格式的视频，文件扩展名.mpg</li><li>application/zip：PK-ZIP格式的压缩文件，文件扩展名.zip</li></ul><h3 id="Content-Length">Content-Length</h3><p>​    TCP 1.0中允许单个TCP连接可以传送多个回应，势必就要有一种机制，区分数据包是属于哪一个回应的。这就是Content-length字段的作用，声明本次回应的数据长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过 byteArrayStream.writeTo(response.getOutputStream()发送内容。</p><h3 id="Content-Encoding">Content-Encoding</h3><p>​    由于发送的数据可以是任何格式，因此可以把数据压缩后再发送。<code>Content-Encoding</code>字段说明数据的压缩方法。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Encoding</span>: gzip</span><br><span class="line"><span class="attribute">Content-Encoding</span>: compress</span><br><span class="line"><span class="attribute">Content-Encoding</span>: deflate</span><br></pre></td></tr></table></figure><p>​    客户端在请求时，用<code>Accept-Encoding</code>字段说明自己可以接受哪些压缩方法。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept-Encoding: gzip, deflate</span><br></pre></td></tr></table></figure><h3 id="HTTP_Lint">HTTP Lint</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Lint for HTTP:HTTPolice]()</span><br></pre></td></tr></table></figure><p>​    HTTPolice是一个简单的基于命令行的对于HTTP请求格式规范进行检测的工具，可以直接使用<code>pip</code>命令进行安装:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install HTTPolice</span><br></pre></td></tr></table></figure><p>​    当我们使用Google Chrome、Firefox或者Microsoft Edge进行网络访问时，可以使用开发者工具导出某个HAR文件，这也就是HTTP Lint工具可以用来解析的文件。使用如下命令进行分析:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ httpolice -i har /path/to/file.har</span><br><span class="line">------------ request: GET /1441/25776044114_0e5b9879a0_z.jpg------------ response: 200 OKC 1277 Obsolete <span class="string">'X-'</span> prefix <span class="keyword">in</span> X-Photo-FarmC 1277 Obsolete <span class="string">'X-'</span> prefix <span class="keyword">in</span> X-Photo-OriginE 1000 Malformed Expires headerE 1241 Date + Age is <span class="keyword">in</span> the future</span><br></pre></td></tr></table></figure><p>​    默认的HTTPolice以文本形式输出报告文本，如下所示</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">------------ request: PUT /articles/109226/</span><br><span class="line">E 1000 Malformed If-Match header</span><br><span class="line">C 1093 User-Agent contains no actual product</span><br><span class="line">------------ response: 204 No Content</span><br><span class="line">C 1110 204 response with no Date header</span><br><span class="line">E 1221 Strict-Transport-Security without TLS</span><br><span class="line">------------ request: POST /articles/109226/comments/</span><br></pre></td></tr></table></figure><p>​    纯文本的方式可能比较难以理解，我们可以使用<code>-o html</code>选项来设置更详细的基于HTML风格的输出，譬如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ httpolice -i har -o html /path/to/file.har &gt;report.html</span><br></pre></td></tr></table></figure><p> <img src="https://ooo.0o0.ooo/2016/08/24/57bd53f7f3f19.jpg" alt="3.jpg"></p><h3 id="转载来自此链接"><a href="https://segmentfault.com/a/1190000006689489#articleHeader11" target="_blank" rel="noopener"><strong>转载来自此链接</strong></a></h3>]]></content>
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>IMEI和MEID的区别</title>
      <link href="/2016/08/22/IMEI%E5%92%8CMEID%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2016/08/22/IMEI%E5%92%8CMEID%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>​    手机中的IMEI和MEID号码就如同我们生活中的身份证一样，它是识别手机身份的重要依据，如用虚假号码的手机，网络运营商可随时通过技术手段关闭此手机在网络中的运营，这将给手机的使用者带来巨大的使用风险。手机中所使用的IMEI或MEID等号段均可透过摩尔实验室等相关机构合法申请。</p><a id="more"></a><p>IMEI国际移动设备识别码（IMEI：International Mobile Equipment Identification Number）是区别移动设备的标志，储存在移动设备中，可用于监控被窃或无效的移动设备。目前GSM和WCDMA手机终端需要使用IMEI号码     手机制造商在申请IMEI号码之前，必须先在IMEI网上进行注册，BABT审核通过后会发该制造商的厂家注册码，申请人凭借厂家注册码在IMEI网站上进行在线申请。</p><p>目前GSM和WCDMA手机终端需要使用IMEI号码，IMEI号码由GSMA组织进行管理，并授权英国BABT和美国的PTCRB两个认证机构进行发放。在北美地区进行销售的手机产品，需要向PTCRB机构申请IMEI号码。其他国家或地区进行销售的手机产品向BABT进行申请。</p><p>手机普通用户可以通过输入<code>*＃06＃</code>来查看手机的IMEI号码。</p><p>MEID 移动设备识别码(Mobile Equipment Identifier)是CDMA手机的身份识别码，也是每台手机有唯一的识别码。通过这个识别码，网络端可以对该手机进行跟踪和监管。用于CDMA制式的手机。MEID的数字范围是十六进制的，和IMEI的格式类似。 MEID号码是由Telecommunications Industry Association（TIA）进行分配管理的。申请MEID是需要付费的。目前的价格是每1M范围的MEID的费用是8000美元，每增加1M范围的MEID号码需要额外付费8000美元。</p><p>MEID号码的查看，目前没有一个通用的方法，由各手机制造商自己设置。可以通过查看手机说明书得到查看MEID号码的方法。</p>]]></content>
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>南京租房补贴申请流程</title>
      <link href="/2016/08/19/%E5%8D%97%E4%BA%AC%E7%A7%9F%E6%88%BF%E8%A1%A5%E8%B4%B4%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B/"/>
      <url>/2016/08/19/%E5%8D%97%E4%BA%AC%E7%A7%9F%E6%88%BF%E8%A1%A5%E8%B4%B4%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="南京申请大学生租房补贴的具体流程">南京申请大学生租房补贴的具体流程</h3><p>个人的办理经历，仅供参考。</p><a id="more"></a><ol><li><p>准备材料。</p><ol><li><p>房屋租赁合同（合同应包括，甲乙方姓名、联系方式、身份证号码，这三个是必须的）</p></li><li><p>毕业证</p></li><li><p>学位证</p></li><li><p>房租租赁发票（如何办理？）</p><ol><li>办理地址如下<img src="https://ooo.0o0.ooo/2016/08/18/57b66380562de.jpg" alt="房产局地址.jpg"></li><li>准备材料<ul><li>房产证全部复印件（这里的全部指的是，所有产权人，每个人都有房产证，每个人手上的都要全部复印，一般一本是6页）</li><li>产权人身份证全部复印件，承租人身份证复印件</li><li>租赁合同原件及复印件</li><li>如产权人为多人，未到场者需出示委托书及委托人。<strong>注意：如果租赁合同只写了一个出租方的名字，那么必须持有其余产权人的「共有权人同意出租房产声明」</strong>，如下事例：<img src="https://ooo.0o0.ooo/2016/08/18/57b66a2e8aeb3.png" alt="委托授权书.png"></li><li><img src="https://ooo.0o0.ooo/2016/08/18/57b669eda852b.png" alt="共有权人同意出租房产声明.png"></li><li>缴税的金额是按一年算，租金的3.5%。是租赁合同上的。自己体会。</li></ul></li></ol></li><li><p>居住证</p><p>凭办理房屋租赁备案的证明、租赁合同、本人身份证复印件以及2寸白底照片，去社区警务室办理。</p></li></ol></li><li><p>下载安装「我的南京」这款App，并进行激活，可以支付宝，这个是最简单的。</p></li><li><p>打开<a href="http://58.213.141.220:10049/housingsubsidy/" target="_blank" rel="noopener">租房申请说明</a>这个链接，拉到最下面，点击继续申请。</p></li><li><p>用我的南京左上角扫描<img src="https://ooo.0o0.ooo/2016/08/18/57b65aa6aaa54.png" alt="扫描登录">然后进入这个登录确认的界面<img src="https://ooo.0o0.ooo/2016/08/18/57b6606141213.png" alt="登录确认界面.png"></p></li><li><p>之后见到如下界面，确认你要填写哪些信息和材料</p><p><img src="https://ooo.0o0.ooo/2016/08/18/57b6616d1d979.png" alt="申请界面.png"></p></li><li><p>最重要的是如下图</p><p><strong>可以看到的是，我是需要提交四份材料，但是有些人的界面会是六个材料，多了居住证。</strong>所以可以先进去看看到底要不要。</p><p><img src="https://ooo.0o0.ooo/2016/08/18/57b6624d2f68a.png" alt="申请材料.png"></p></li><li><p>如实填写，然后提交等待审核。不过看新闻，整个流程差不多要年底才能发放补贴。补贴是发放到市民卡里面，需要去银行激活才能使用。</p></li></ol>]]></content>
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Pyhton标准模块logging</title>
      <link href="/2016/08/16/Pyhton%E6%A0%87%E5%87%86%E6%A8%A1%E5%9D%97logging/"/>
      <url>/2016/08/16/Pyhton%E6%A0%87%E5%87%86%E6%A8%A1%E5%9D%97logging/</url>
      <content type="html"><![CDATA[<p><strong>GetLogger</strong><br>GetLogger() returns a reference to a logger instance with the specified name if it is provided, or root if not. The names are period-separated hierarchical structures. Multiple calls to getLogger() with the same name will return a reference to the same logger object.</p><a id="more"></a><p>后面会看到这种以’.’分隔的hierarchical structures有什么用.<br><strong>Formatter</strong><br>Formatter对象定义了最终log信息的顺序,结构和内容.<br><strong>Handler</strong><br>这儿用到了StreamHandler和FileHandler, 用于向不同的输出端打log.<br><strong>SetLevel</strong><br>Logging有如下级别: DEBUG，INFO，WARNING，ERROR，CRITICAL<br>默认级别是WARNING, logging模块只会输出指定level以上的log<br>这样的好处, 就是在项目开发时debug用的log, 在产品release阶段不用一一注释, 只需要调整logger的级别就可以了, 很方便的.</p><p><strong>Formatter</strong><br>Formatter对象定义了最终log信息的顺序,结构和内容.于基本的logging.Handler类不同,应用可以直接实例化formatter类,当然,如果需要你也可以子例化formatter以便定制它的一些行为.构造函数接受两个可选参数:一个信息格式字符串和一个日期格式字符串.如果没有信息格式字符串,直接输出log信息.如果没有日期格式字符串,默认的格式是:<code>%Y-%m-%d %H:%M:%S</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python  </span></span><br><span class="line"><span class="comment">#coding:utf-8  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> logging  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(error_msg)</span>:</span>  </span><br><span class="line">    <span class="comment">#获取时间  </span></span><br><span class="line">    fm = <span class="string">'%Y-%m-%d %H:%M:%S'</span>  </span><br><span class="line">    YMD = time.strftime(fm,time.localtime())  </span><br><span class="line">    <span class="comment">#设置文件的存储路径,及文件  </span></span><br><span class="line">    save_log_file = <span class="string">'error.log'</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 第一步创建一个logger的句柄  </span></span><br><span class="line">    logger = logging.getLogger(<span class="string">'error'</span>)  </span><br><span class="line">    <span class="comment">#创建一个处理写入日志文件的handler,参数保存的"日志文件  </span></span><br><span class="line">    handler = logging.FileHandler(save_log_file)  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">#设置日志输出的格式  </span></span><br><span class="line">    formatter = logging.Formatter(<span class="string">"%(asctime)s-%(levelname)s-%(message)s"</span>)  </span><br><span class="line">    handler.setFormatter(formatter)  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">#将处理文件的的handler假如到logger中去  </span></span><br><span class="line">    logger.addHandler(handler)  </span><br><span class="line">    <span class="comment"># Logging有如下级别: DEBUG，INFO，WARNING，ERROR，CRITICAL  </span></span><br><span class="line">    <span class="comment"># 默认级别是WARNING, logging模块只会输出指定level以上的log  </span></span><br><span class="line">    <span class="comment"># 这样的好处, 就是在项目开发时debug用的log, 在产品release阶段不用一一注释,   </span></span><br><span class="line">    <span class="comment"># 只需要调整logger的级别就可以了, 很方便的.  </span></span><br><span class="line">    logger.setLevel(logging.INFO)  </span><br><span class="line">    <span class="comment">#写入日志  </span></span><br><span class="line">    logger.info(error_msg)  </span><br><span class="line">    <span class="comment">#其他的写入方法  </span></span><br><span class="line">    logger.debug(error_msg)  </span><br><span class="line">    logger.warn(error_msg)  </span><br><span class="line">    logger.error(error_msg)  </span><br><span class="line">    logger.critical(error_msg)  </span><br><span class="line">    logger.removeHandler(handler)  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </span><br><span class="line">    log_info = <span class="string">'传入日志信息'</span>  </span><br><span class="line">    log(log_info)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python读写json</title>
      <link href="/2016/08/11/Python%E8%AF%BB%E5%86%99json/"/>
      <url>/2016/08/11/Python%E8%AF%BB%E5%86%99json/</url>
      <content type="html"><![CDATA[<h4 id="读写中文的json数据，可以用Python中的json库来进行操作。读取可以使用json-load">读写中文的json数据，可以用Python中的json库来进行操作。读取可以使用<code>json.load</code></h4><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = file(path)</span><br><span class="line">data = json.load(f)</span><br></pre></td></tr></table></figure><p>json是被载入到一个dict类型的object对象中。</p><p>使用<code>json.dump</code>可以输出json。不过输出的文本不是中文而是转换为utf-8的格式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output = json.dump(jsonData,targetFile,ensure_ascii=<span class="keyword">False</span>,indent=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>输出中文的json。通过使用 ensure_ascii=False，输出原有的语言文字。indent参数是缩进数量。</p><p>如果把上文的String直接写入文件可能会出错，一般是在Python2.7的版本出现：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnicodeEncodeError: <span class="symbol">'ascii</span>' codec can<span class="symbol">'t</span> encode characters <span class="keyword">in</span> position <span class="number">1</span>-<span class="number">9</span>: ordinal <span class="keyword">not</span> <span class="keyword">in</span> <span class="keyword">range</span>(<span class="number">128</span>)</span><br></pre></td></tr></table></figure><p>解决的办法是在输出的时候进行编码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">with</span> codecs.open(path,<span class="string">'w'</span>,<span class="string">'utf-8'</span>) <span class="keyword">as</span> w:</span><br><span class="line">    <span class="comment">#write to w</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python删除文件和目录的方法</title>
      <link href="/2016/08/11/Python%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2016/08/11/Python%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>Python删除文件和目录的方法<br><code>os.remove(path)</code></p><a id="more"></a><p>删除文件 path. 如果path是一个目录， 抛出 OSError错误。如果要删除目录，请使用rmdir().<br>remove() 同 unlink() 的功能是一样的<br>在Windows系统中，删除一个正在使用的文件，将抛出异常。在Unix中，目录表中的记录被删除，但文件的存储还在。</p><p><code>os.removedirs(path)</code><br>递归地删除目录。类似于rmdir(), 如果子目录被成功删除， removedirs() 将会删除父目录；但子目录没有成功删除，将抛出错误。<br>举个例子， os.removedirs(“foo/bar/baz”) 将首先删除 “foo/bar/ba”目录，然后再删除foo/bar 和 foo, 如果他们是空的话<br>如果子目录不能成功删除，将 抛出 OSError异常<br>os.rmdir(path)<br>删除目录 path，要求path必须是个空目录，否则抛出OSError错误</p><p>递归删除目录和文件（类似DOS命令DeleteTree）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(top, topdown=<span class="keyword">False</span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">        os.remove(os.path.join(root, name))</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> dirs:</span><br><span class="line">        os.rmdir(os.path.join(root, name))</span><br></pre></td></tr></table></figure></p><p>还有一个更简单的：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.rmtree()</span><br><span class="line">__import__(<span class="string">'shutil'</span>).rmtree()</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Pyhton 显示时间</title>
      <link href="/2016/08/10/Pyhton-%E6%98%BE%E7%A4%BA%E6%97%B6%E9%97%B4/"/>
      <url>/2016/08/10/Pyhton-%E6%98%BE%E7%A4%BA%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<h4 id="Python显示当前时间">Python显示当前时间</h4><p>可以用Pyhton提供的time模块来实现</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">print</span> time.time()</span><br></pre></td></tr></table></figure><p>输出的结果是:<code>1470817592.43</code></p><p>但是这样是一连串的数字不是我们想要的结果，我们可以利用time模块的格式化时间的方法来处理:</p><p><code>time.localtime(time.time())</code></p><p>用<code>time.localtime()</code>方法，作用是格式化时间戳为本地的时间。<br>输出的结果是：</p><p><code>time.struct_time(tm_year=2016, tm_mon=8, tm_mday=10, tm_hour=16, tm_min=28, tm_sec=2, tm_wday=2, tm_yday=223, tm_isdst=0)</code></p><p>现在看起来更有希望格式成我们想要的时间了。</p><p><code>time.strftime(&#39;%Y-%m-%d&#39;,time.localtime(time.time()))</code></p><p>最后用time.strftime()方法，把刚才的一大串信息格式化成我们想要的东西，现在的结果是：</p><p><code>&#39;2016-08-10&#39;</code></p><p>time.strftime里面有很多参数，可以让你能够更随意的输出自己想要的东西：<br>下面是time.strftime的参数：<br><code>strftime(format[, tuple]) -&gt; string</code><br>将指定的struct_time(默认为当前时间)，根据指定的格式化字符串输出</p><p><strong>Python中时间日期格式化符号：</strong></p><ol><li>%y 两位数的年份表示（00-99）</li><li>%Y 四位数的年份表示（000-9999）</li><li>%m 月份（01-12）</li><li>%d 月内中的一天（0-31）</li><li>%H 24小时制小时数（0-23）</li><li>%I 12小时制小时数（01-12） </li><li>%M 分钟数（00=59）</li><li>%S 秒（00-59）</li><li>%a 本地简化星期名称</li><li>%A 本地完整星期名称</li><li>%b 本地简化的月份名称</li><li>%B 本地完整的月份名称</li><li>%c 本地相应的日期表示和时间表示</li><li>%j 年内的一天（001-366）</li><li>%p 本地A.M.或P.M.的等价符</li><li>%U 一年中的星期数（00-53）星期天为星期的开始</li><li>%w 星期（0-6），星期天为星期的开始</li><li>%W 一年中的星期数（00-53）星期一为星期的开始</li><li>%x 本地相应的日期表示</li><li>%X 本地相应的时间表示</li><li>%Z 当前时区的名称</li><li>%% %号本身 </li></ol>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>MUT和MSS的关系</title>
      <link href="/2016/08/09/MUT%E5%92%8CMSS%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2016/08/09/MUT%E5%92%8CMSS%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<h4 id="TCP层的分段和IP层的分片之间的关系">TCP层的分段和IP层的分片之间的关系</h4><a id="more"></a><p><strong>数据报的分段和分片确实发生，分段发生在传输层，分片发生在网络层。但是对于分段来说，这是经常发生在UDP传输层协议上的情况，对于传输层使用TCP协议的通道来说，这种事情很少发生。</strong><br><strong>1.    MTU（Maximum Transmission Unit，MTU），最大传输单元</strong><br>（1）以太网和802.3对数据帧的长度都有一个限制，其最大 值分别是1500和1492个字节。链路层的这个特性称作MTU。不同类型的网络大多数都有一个上限。如果IP层有一个数据要传，且数据的长度比链路层的 MTU还大，那么IP层就要进行分片（fragmentation），把数据报分成若干片，这样每一个分片都小于MTU。<br> （2）把一份IP数据报进行分片以后，由到达目的端的IP层来进行重新组装，其目的是使分片和重新组装过程对运输层（TCP/UDP）是透明的。由于每一分片都是一个独立的包，当这些数据报的片到达目的端时有可能会失序，但是在IP首部中有足够的信息让接收端能正确组装这些数据报片。<br> （3）尽管IP分片过程看起来透明的，但有一点让人不想使用它：即使只丢失一片数据也要重新传整个数据报。why？因为IP层本身没有超时重传机制——由更高层（比如TCP）来负责超时和重传。当来自TCP报文段的某一片丢失后，TCP在超时后会重发整个TCP报文段，该报文段对应于一份IP数据报（而不是一个分片），没有办法只重传数据报中的一个数据分片。<br> （4）使用UDP很容易导致IP分片，TCP试图避免IP分片。 那么TCP是如何试图避免IP分片的呢？其实说白了，采用TCP协议进行数据传输是不会造成IP分片的，因为一旦TCP数据过大，超过了MSS，则在传输 层会对TCP包进行分段（如何分，见下文！），自然到了IP层的数据报肯定不会超过MTU，当然也就不用分片了。而对于UDP数据报，如果UDP组成的 IP数据报长度超过了1500，那么IP数据报显然就要进行分片，因为UDP不能像TCP一样自己进行分段。总结：UDP不会分段，就由我IP来分。TCP会分段，当然也就不用我IP来分了！</p><p><strong>2.    MSS（Maxitum Segment Size）最大分段大小的缩写，是TCP协议里面的一个概念</strong><br>（1）MSS就是TCP数据包每次能够传输的最大数据分段。为了达到最佳的传输效能TCP协议在建立连接的时候通常要协商双方的MSS值，这个值TCP协议在实现的时候往往用MTU值代替（需要减去IP数据包包头的大小20Bytes和TCP数据段的包头20Bytes）所以往往MSS为1460。通讯双方会根据双方提供的MSS值得最小值确定为这次连接的最大MSS值。<br>（2）相信看到这里，还有最后一个问题：TCP是如何实现分段的呢？其实TCP无所谓分段，因为每个TCP数据报在组成前其大小就已经被MSS限制了，所以TCP数据报的长度是不可能大于MSS的，当然由它形成的IP包的长度也就不会大于MTU，自然也就不用IP分片了。</p><p><strong>3.    结论</strong><br>   1.IP分片产生的原因是网络层的MTU；TCP分段产生原因是MSS.<br>   2.IP分片由网络层完成，也在网络层进行重组；TCP分段是在传输层完成，并在传输层进行重组.   //透明性<br>   3.对于以太网，MSS为1460字节，而MUT往往会大于MSS.<br>   故采用TCP协议进行数据传输，是不会造成IP分片的。若数据过大，只会在传输层进行数据分段，到了IP层就不用分片。<br>   所以可以看成是这种情况：传输层协议想发送一个超过了MTI的数据报，这个时候网络层就需要对其进行分片，一般UDP和ICMP会出现分片情况，但是TCP不会出现这种情况！因为TCP使用了MSS来避免分片！<br>   IP分片只有第一个带有传输层或ICMP首部，其余的分片只有IP头。至于怎么重组就是到对端以后IP层的事情了。<br>若TCP报文非常长那么在IP层传输时就有可能要分解成多个短数据报片。（计算机网络谢希仁）<br>TCP分段每个都有完整首部。<br>PS:所以我觉得是这样的，TCP的分段是针对应用层的数据来说的，比如使用TCP发送70KB的数据，这个时候就需要将70KB分成若干个MSS，到了网络层就不需要分片了。MSS的存在就避免了网络层分片的发生，<br>   IP层的分片是针对传输层中使用UDP协议来说的，如果使用UDP发送数据，UDP并不知道如何分段，那么到了IP层就需要进行分片，分片的原则根据MTU，那么分UDP最大的数据负载就是1500-8=1492</p><p>转载自：<br><a href="http://blog.csdn.net/yusiguyuan/article/details/22782943" target="_blank" rel="noopener"> TCP层的分段和IP层的分片之间的关系 &amp; MTU和MSS之间的关系</a></p>]]></content>
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>HTTP协议下的分段下载</title>
      <link href="/2016/08/09/HTTP%E5%8D%8F%E8%AE%AE%E4%B8%8B%E7%9A%84%E5%88%86%E6%AE%B5%E4%B8%8B%E8%BD%BD/"/>
      <url>/2016/08/09/HTTP%E5%8D%8F%E8%AE%AE%E4%B8%8B%E7%9A%84%E5%88%86%E6%AE%B5%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h4 id="在_HTTP_协议下分段下载文件">在 HTTP 协议下分段下载文件</h4><a id="more"></a><p>假如一个文件有1000个字节，那么其范围就是0-999，则：<br>Range: bytes=500- 表示读取该文件的500-999字节，共500字节。<br>Range: bytes=500-599 表示读取该文件的500-599字节，共100字节。<br>Range还有其它几种写法，但上面这两种是最常用的，对于断点续传也足矣了。如果HTTP请求中包含Range字段，那么服务器会返回206（Partial Content），同时HTTP头中也会有一个相应的Content-Range字段，类似下面的格式：<br>Content-Range: bytes 500-999/1000<br>Content-Range字段说明服务器返回了文件的某个范围及文件的总长度。这时Content-Length字段就不是整个文件的大小了，而是对应文件这个范围的字节数，这一点一定要注意。</p>]]></content>
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Xshell连接Ubuntu</title>
      <link href="/2016/08/01/Xshell%E8%BF%9E%E6%8E%A5Ubuntu/"/>
      <url>/2016/08/01/Xshell%E8%BF%9E%E6%8E%A5Ubuntu/</url>
      <content type="html"><![CDATA[<p>Windows环境下，在用Xshell连接VM里安装的Ubuntu16的时候连接不上。解决方法如下：<br><a id="more"></a><br>Xshell连接VM内的Ubuntu16</p><pre><code><span class="keyword">Xshell</span> 是一个强大的安全终端模拟软件，它支持SSH1, SSH2, 以及Microsoft Windows 平台的TELNET 协议。<span class="keyword">Xshell</span> 通过互联网到远程主机的安全连接以及它创新性的设计和特色帮助用户在复杂的网络环境中享受他们的工作。但是在用SSH连接的时候会发现连接不上，其实这是由于Ubuntu默认不安装openssh服务导致的，</code></pre><p>所以若要使用ssh远程登录Ubuntu主机，首先需要安装ssh服务器。</p><p>首先，判断Ubuntu是否安装了ssh服务：</p><p>首先，判断Ubuntu是否安装了ssh服务：<br>1、输入：#ps -e | grep ssh 如果服务已经启动，则可以看到“sshd”，否则表示没有安装服务，或没有开机启动<br>2、安装ssh服务，输入命令：<code>#sudo apt-get install openssh-server</code><br>3、启动服务:<code>#/etc/init.d/ssh start</code><br>4、本机测试是否能够成功登录：#ssh -l 用户名 本机ip<br>5、用远程工具进行远程连接，若拒接访问，则关闭防火墙或允许22端口，参考如下。</p><p>桥接模式可以使路由器使用DHCP的方式分配IP，如果你的电脑所处的网络拓扑中没有路由器的话也是ping不通的。如果有路由器，因为防火墙导致无法连接，可以使用  <code>sudo ufw disable</code> 命令禁用防火墙。或者在防火墙开启的情况下开放22端口命令是 <code>sudo ufw allow 22</code></p>]]></content>
      
      <categories>
          
          <category> Soft </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python学习笔记</title>
      <link href="/2016/07/07/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2016/07/07/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h4 id="Python学习笔记">Python学习笔记</h4><a id="more"></a><h5 id="1、IndentationError:_unexpected_indent你就要知道python编译器是在告诉你“Hi，老兄，你的文件里格式不对了，可能是tab和空格没对齐的问题，你需要检查下tab和空格了”。">1、IndentationError: unexpected indent你就要知道python编译器是在告诉你“Hi，老兄，你的文件里格式不对了，可能是tab和空格没对齐的问题，你需要检查下tab和空格了”。</h5><h5 id="2、Python_的stat_模块">2、Python 的stat 模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-- encoding:UTF-8 --</span></span><br><span class="line"><span class="keyword">import</span> os,time,stat</span><br><span class="line">fileStats = os.stat ( <span class="string">'test.txt'</span> )                         <span class="comment">#获取文件/目录的状态</span></span><br><span class="line">fileInfo = &#123;</span><br><span class="line"><span class="string">'Size'</span>:fileStats [ stat.ST_SIZE ],                         <span class="comment">#获取文件大小</span></span><br><span class="line"><span class="string">'LastModified'</span>:time.ctime( fileStats [ stat.ST_MTIME ] ),  <span class="comment">#获取文件最后修改时间</span></span><br><span class="line"><span class="string">'LastAccessed'</span>:time.ctime( fileStats [ stat.ST_ATIME ] ),  <span class="comment">#获取文件最后访问时间</span></span><br><span class="line"><span class="string">'CreationTime'</span>:time.ctime( fileStats [ stat.ST_CTIME ] ),  <span class="comment">#获取文件创建时间</span></span><br><span class="line"><span class="string">'Mode'</span>:fileStats [ stat.ST_MODE ]                          <span class="comment">#获取文件的模式</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#print fileInfo</span></span><br><span class="line"><span class="keyword">for</span> field <span class="keyword">in</span> fileInfo:                                     <span class="comment">#显示对象内容</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">'%s:%s'</span> % (field,fileInfo[field])</span><br><span class="line"><span class="keyword">for</span> infoField,infoValue <span class="keyword">in</span> fileInfo:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'%s:%s'</span> % (infoField,infoValue)</span><br><span class="line"><span class="keyword">if</span> stat.S_ISDIR ( fileStats [ stat.ST_MODE ] ):           <span class="comment">#判断是否路径</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Directory. '</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Non-directory.'</span></span><br><span class="line"><span class="keyword">if</span> stat.S_ISREG( fileStats [ stat.ST_MODE ] ):           <span class="comment">#判断是否一般文件</span></span><br><span class="line">   <span class="keyword">print</span> <span class="string">'Regular file.'</span></span><br><span class="line"><span class="keyword">elif</span> stat.S_ISLNK ( fileStats [ stat.ST_MODE ] ):         <span class="comment">#判断是否链接文件</span></span><br><span class="line">   <span class="keyword">print</span> <span class="string">'Shortcut.'</span></span><br><span class="line"><span class="keyword">elif</span> stat.S_ISSOCK ( fileStats [ stat.ST_MODE ] ):        <span class="comment">#判断是否套接字文件    </span></span><br><span class="line">   <span class="keyword">print</span> <span class="string">'Socket.'</span></span><br><span class="line"><span class="keyword">elif</span> stat.S_ISFIFO ( fileStats [ stat.ST_MODE ] ):        <span class="comment">#判断是否命名管道</span></span><br><span class="line">   <span class="keyword">print</span> <span class="string">'Named pipe.'</span></span><br><span class="line"><span class="keyword">elif</span> stat.S_ISBLK ( fileStats [ stat.ST_MODE ] ):         <span class="comment">#判断是否块设备</span></span><br><span class="line">   <span class="keyword">print</span> <span class="string">'Block special device.'</span></span><br><span class="line"><span class="keyword">elif</span> stat.S_ISCHR ( fileStats [ stat.ST_MODE ] ):         <span class="comment">#判断是否字符设置</span></span><br><span class="line">   <span class="keyword">print</span> <span class="string">'Character special device.'</span></span><br></pre></td></tr></table></figure><p>   stat模块描述了os.stat(filename)返回的文件属性列表中各值的意义.我们可方便地根据stat模块存取os.stat()中的值.</p><p>os.stat(path)执行一个stat()系统调用在给定的path上，返回一个类元组对象(stat_result对象,包含10个元素),属性与stat结构成员相关:st_mode(权限模式),st_ino(inode number),st_dev(device),st_nlink(number of hard links),st_uid(所有用户的user id),st_gid(所有用户的group id),st_size(文件大小，以位为单位)，st_atime(最近访问的时间),st_mtime(最近修改的时间),st_ctime(创建的时间)</p><h5 id="3、Python信号处理模块signal">3、Python信号处理模块signal</h5><p>Python中对信号处理的模块主要是使用signal模块，但signal主要是针对Unix系统，所以在Windows平台上Python不能很好的发挥信号处理的功能。</p><p>要查看Python中的信号量，可以使用dir(signal)来查看。</p><p>在signal模块中，主要是使用signal.signal()函数来预设信号处理函数</p><p>singnal.signal(signalnum, handler)</p><p>其中第一个参数是信号量，第二个参数信号处理函数。</p><p>下面看个简单的例子，其中</p><ul><li>定义了一个信号处理函数signal_handler()，用来处理程序接收到信号时执行的操作</li><li>一段循环等待发送信号<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signal_handler</span><span class="params">(signum, frame)</span>:</span></span><br><span class="line">    print(<span class="string">'Received signal: '</span>, signum)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    signal.signal(signal.SIGHUP, signal_handler) <span class="comment"># 1</span></span><br><span class="line">    signal.signal(signal.SIGINT, signal_handler) <span class="comment"># 2</span></span><br><span class="line">    signal.signal(signal.SIGQUIT, signal_handler) <span class="comment"># 3</span></span><br><span class="line">    signal.signal(signal.SIGALRM, signal_handler) <span class="comment"># 14</span></span><br><span class="line">    signal.signal(signal.SIGTERM, signal_handler) <span class="comment"># 15</span></span><br><span class="line">    signal.signal(signal.SIGCONT, signal_handler) <span class="comment"># 18</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">'waiting'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ul><p>运行上面的程序</p><p>python test.py</p><p>然后另外开一个终端，找到对应的进程，并执行下面的kill操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kill <span class="number">-1</span> &lt;pid&gt;</span><br><span class="line">kill <span class="number">-2</span> &lt;pid&gt;</span><br><span class="line">kill <span class="number">-3</span> &lt;pid&gt;</span><br><span class="line">kill <span class="number">-14</span> &lt;pid&gt;</span><br><span class="line">kill <span class="number">-15</span> &lt;pid&gt;</span><br><span class="line">kill <span class="number">-18</span> &lt;pid&gt;</span><br><span class="line">kill <span class="number">-9</span> &lt;pid&gt; <span class="comment"># 最后杀死进程</span></span><br></pre></td></tr></table></figure></p><p>此时可以看到test.py的输出，打印的就是具体接收到的信号。</p><p>这里注意一点就是程序中注册了SIGINT信号，所以在运行程序后使用CTRL+C并不能结束进程，而是仍然打印进程接收到的信号。</p><p>signal.alarm()</p><p>另外，signal模块提供了一个很有用的函数signal.alarm()，它用于在一定时间后向进程自身发送SIGALRM信号，比如下面的例子设置5秒后向自己发送一个SIGALRM信号。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signal_handler</span><span class="params">(signum, frame)</span>:</span></span><br><span class="line">    print(<span class="string">'Received signal: '</span>, signum)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    signal.signal(signal.SIGALRM, signal_handler) <span class="comment"># 14</span></span><br><span class="line">    signal.alarm(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">'waiting'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><h5 id="4、python_os-path模块">4、python os.path模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">os.path.abspath(path) <span class="comment">#返回绝对路径</span></span><br><span class="line">os.path.basename(path) <span class="comment">#返回文件名</span></span><br><span class="line">os.path.commonprefix(list) <span class="comment">#返回list(多个路径)中，所有path共有的最长的路径。</span></span><br><span class="line">os.path.dirname(path) <span class="comment">#返回文件路径</span></span><br><span class="line">os.path.exists(path)  <span class="comment">#路径存在则返回True,路径损坏返回False</span></span><br><span class="line">os.path.lexists  <span class="comment">#路径存在则返回True,路径损坏也返回True</span></span><br><span class="line">os.path.expanduser(path)  <span class="comment">#把path中包含的"~"和"~user"转换成用户目录</span></span><br><span class="line">os.path.expandvars(path)  <span class="comment">#根据环境变量的值替换path中包含的”$name”和”$&#123;name&#125;”</span></span><br><span class="line">os.path.getatime(path)  <span class="comment">#返回最后一次进入此path的时间。</span></span><br><span class="line">os.path.getmtime(path)  <span class="comment">#返回在此path下最后一次修改的时间。</span></span><br><span class="line">os.path.getctime(path)  <span class="comment">#返回path的大小</span></span><br><span class="line">os.path.getsize(path)  <span class="comment">#返回文件大小，如果文件不存在就返回错误</span></span><br><span class="line">os.path.isabs(path)  <span class="comment">#判断是否为绝对路径</span></span><br><span class="line">os.path.isfile(path)  <span class="comment">#判断路径是否为文件</span></span><br><span class="line">os.path.isdir(path)  <span class="comment">#判断路径是否为目录</span></span><br><span class="line">os.path.islink(path)  <span class="comment">#判断路径是否为链接</span></span><br><span class="line">os.path.ismount(path)  <span class="comment">#判断路径是否为挂载点（）</span></span><br><span class="line">os.path.join(path1[, path2[, ...]])  <span class="comment">#把目录和文件名合成一个路径</span></span><br><span class="line">os.path.normcase(path)  <span class="comment">#转换path的大小写和斜杠</span></span><br><span class="line">os.path.normpath(path)  <span class="comment">#规范path字符串形式</span></span><br><span class="line">os.path.realpath(path)  <span class="comment">#返回path的真实路径</span></span><br><span class="line">os.path.relpath(path[, start])  <span class="comment">#从start开始计算相对路径</span></span><br><span class="line">os.path.samefile(path1, path2)  <span class="comment">#判断目录或文件是否相同</span></span><br><span class="line">os.path.sameopenfile(fp1, fp2)  <span class="comment">#判断fp1和fp2是否指向同一文件</span></span><br><span class="line">os.path.samestat(stat1, stat2)  <span class="comment">#判断stat tuple stat1和stat2是否指向同一个文件</span></span><br><span class="line">os.path.split(path)  <span class="comment">#把路径分割成dirname和basename，返回一个元组</span></span><br><span class="line">os.path.splitdrive(path)   <span class="comment">#一般用在windows下，返回驱动器名和路径组成的元组</span></span><br><span class="line">os.path.splitext(path)  <span class="comment">#分割路径，返回路径名和文件扩展名的元组</span></span><br><span class="line">os.path.splitunc(path)  <span class="comment">#把路径分割为加载点与文件</span></span><br><span class="line">os.path.walk(path, visit, arg)  <span class="comment">#遍历path，进入每个目录都调用visit函数，visit函数必须有</span></span><br><span class="line"><span class="number">3</span>个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有</span><br><span class="line">文件名，args则为walk的第三个参数</span><br><span class="line">os.path.supports_unicode_filenames  <span class="comment">#设置是否支持unicode路径名</span></span><br></pre></td></tr></table></figure><h5 id="5、typeerror_‘builtin_function_or_method’_object_has_no_attribute_‘getitem‘">5、typeerror ‘builtin_function_or_method’ object has no attribute ‘<strong>getitem</strong>‘</h5><p>是因为把<code>path.append(py)</code>写成了<code>path.append[py]</code></p><h5 id="6、将列表写入文本">6、将列表写入文本</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'foo'</span>, <span class="string">'bar'</span>]</span><br><span class="line">list.append(<span class="string">"item"</span>)</span><br><span class="line">fl=open(<span class="string">'list.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list:</span><br><span class="line">   fl.write(i)</span><br><span class="line">   fl.write(<span class="string">"\n"</span>)</span><br><span class="line">fl.close()</span><br></pre></td></tr></table></figure><h5 id="7、判断文件或者文件夹是否u你在">7、判断文件或者文件夹是否u你在</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line">os.path.isfile(<span class="string">'test.txt'</span>) <span class="comment">#如果不存在就返回False </span></span><br><span class="line">os.path.exists(directory) <span class="comment">#如果目录不存在就返回False</span></span><br></pre></td></tr></table></figure><h5 id="8、在用json-load()判断文件格式是否错误的时候，出现ValueError:_No_JSON_object_could_be_decoded">8、在用json.load()判断文件格式是否错误的时候，出现<code>ValueError: No JSON object could be decoded</code></h5><p>这个是由于json文件的闭合部分后面不能有<code>,</code><br>对于列表最后，添加上一个逗号，对于本身Python中的语法，是允许的,<br>对于其他语言，比如C语言，是允许的,<br>但是,在Python 2.7.3中的json库中，是不支持的。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>VMware无法打开</title>
      <link href="/2016/06/24/VMware%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/"/>
      <url>/2016/06/24/VMware%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/</url>
      <content type="html"><![CDATA[<h4 id="vmware安装无法打开内核设备_\-\Global\vmx86:_系统找不到指定的文件">vmware安装无法打开内核设备 \.\Global\vmx86: 系统找不到指定的文件</h4><p>按照以下步骤开启相应的服务就好</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">net start vmci</span><br><span class="line"></span><br><span class="line">net start vmx86</span><br><span class="line"></span><br><span class="line">net start VMnetuserif</span><br><span class="line"></span><br><span class="line">sc config vmci=auto</span><br><span class="line"></span><br><span class="line">sc config vmx86=auto</span><br><span class="line"></span><br><span class="line">sc config VMnetuserif=auto</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>算法和数据结构</title>
      <link href="/2016/04/04/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2016/04/04/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h4 id="算法与数据结构">算法与数据结构</h4><p><a href="https://github.com/ty4z2008/Qix/blob/master/algorithm.md" target="_blank" rel="noopener">算法与数据结构</a><br><a id="more"></a></p><ul><li><a href="http://isa.unomaha.edu/wp-content/uploads/2012/08/Advanced-Data-structures.pdf" target="_blank" rel="noopener">《Data structures》</a></li></ul><p>介绍：高级数据结构大全,<a href="http://algorithms.openmymind.net/" target="_blank" rel="noopener">基本算法：二叉树等</a></p><ul><li><a href="http://www.ruanyifeng.com/blog/2012/02/ranking_algorithm_hacker_news.html" target="_blank" rel="noopener">《基于用户投票的排名算法（一）：Delicious和Hacker News》</a></li></ul><p>介绍：此外还有<a href="http://www.ruanyifeng.com/blog/2012/03/ranking_algorithm_reddit.html" target="_blank" rel="noopener">《基于用户投票的排名算法（二）：Reddit》</a>、<a href="http://www.ruanyifeng.com/blog/2012/03/ranking_algorithm_stack_overflow.html" target="_blank" rel="noopener">《基于用户投票的排名算法（三）：Stack Overflow》</a>、<a href="http://www.ruanyifeng.com/blog/2012/03/ranking_algorithm_newton_s_law_of_cooling.html" target="_blank" rel="noopener">《基于用户投票的排名算法（四）：牛顿冷却定律》</a>、<a href="http://www.ruanyifeng.com/blog/2012/03/ranking_algorithm_wilson_score_interval.html" target="_blank" rel="noopener">《基于用户投票的排名算法（五）：威尔逊区间》</a></p><ul><li><a href="http://zh.wikipedia.org/wiki/Paxos%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">《Paxos算法》</a></li></ul><p>介绍：这是目前的一种基于消息传递且具有高度容错特性的一致性算法，google在分布式文件系统中与分布式锁中就应用到了这个算法，MapReduce，bigTable等等，中国的<a href="http://jm-blog.aliapp.com/?tag=paxos" target="_blank" rel="noopener">alibaba集团的中间件</a>也使用此算法．他们把这个算法的<a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/lamport-paxos.pdf" target="_blank" rel="noopener">英文版</a>翻译成了<a href="http://wenku.baidu.com/view/87276e1dfad6195f312ba6d7.html" target="_blank" rel="noopener">中文版</a>．有关它的更多描叙可以参考耶鲁大学的<a href="http://www.cs.yale.edu/homes/aspnes/pinewiki/Paxos.html" target="_blank" rel="noopener">专题页面</a></p><ul><li><a href="http://sevennet.org/2014/11/21/how-to-what-are-the-lesser-known-but-useful-data-structures/" target="_blank" rel="noopener">《How to: What are the lesser known but useful data structures?》</a></li></ul><p>介绍：很少人知道但很有用的数据结构</p><ul><li><a href="http://opendatastructures.org/" target="_blank" rel="noopener">《Open Data Structures》</a></li></ul><p>介绍：《开放数据结构》，里面有C++.java相关实现的书籍</p><ul><li><a href="http://www.andrew.cmu.edu/user/mm6/95-771/schedule.html" target="_blank" rel="noopener">《Data Structure and Algorithms for Information Processing》</a></li></ul><p>介绍：卡内基梅隆大学的信息处理的数据结构与算法课程课件</p><ul><li><a href="http://homepages.inf.ed.ac.uk/rbf/CVonline/applic.htm" target="_blank" rel="noopener">《CVonline: Applications》</a></li></ul><p>介绍：图像和视觉算法的应用领域概括，共包含了29个大类，从中可以看到图像视觉算法应用之广泛。例如人就分生物认证、身体、头、脸、脚、手等不同的领域。</p><ul><li><a href="http://fastcompression.blogspot.fr/2015/04/sampling-or-faster-lz4.html" target="_blank" rel="noopener">《Sampling, or a faster LZ4》</a></li></ul><p>介绍：高速数据压缩算法<a href="https://github.com/Cyan4973/lz4" target="_blank" rel="noopener">LZ4</a>.</p><ul><li><a href="http://codingvc.com/fundraising-roadmap-algorithm/" target="_blank" rel="noopener">《Fundraising Roadmap Algorithm》</a></li></ul><p>介绍：融资路线图算法.</p><ul><li><a href="http://jeremykun.com/2015/05/18/boosting-census/" target="_blank" rel="noopener">《Weak Learning, Boosting, and the AdaBoost algorithm》</a></li></ul><p>介绍：弱学习/Boosting/AdaBoost算法.</p><ul><li><a href="http://www.garrisonjensen.com/programming/2015/05/15/easy-red-black-tree.html" target="_blank" rel="noopener">《The easy way to implement a Red-Black tree》</a></li></ul><p>介绍：红黑树最容易的实现方式.</p><ul><li><a href="http://www.cambridge.org/journals/nisan/downloads/Nisan_Non-printable.pdf" target="_blank" rel="noopener">《Algorithmic Game Theory》</a></li></ul><p>介绍:这是一本关于博弈论算法的电子书,<a href="https://www.wikiwand.com/zh/%E5%8D%9A%E5%BC%88%E8%AE%BA" target="_blank" rel="noopener">博弈论介绍</a></p><ul><li><a href="http://papers.nips.cc/paper/4443-algorithms-for-hyper-parameter-optimization.pdf" target="_blank" rel="noopener">《Algorithms for Hyper-Parameter Optimization》</a></li></ul><p>介绍：参数优化算法.</p><ul><li><a href="http://algosaur.us/" target="_blank" rel="noopener">《A guide to Algorithmic Complexity》</a></li></ul><p>介绍:Introduce Algorithmic Complexity with images.</p><ul><li><a href="https://medium.com/@_marcos_otero/the-real-10-algorithms-that-dominate-our-world-e95fa9f16c04" target="_blank" rel="noopener">《The real 10 algorithms that dominate our world》</a></li></ul><p>介绍:真正统治世界的十大算法,<a href="http://blog.jobbole.com/70639/" target="_blank" rel="noopener">译版</a>.</p><ul><li><a href="http://www.quora.com/What-is-the-importance-of-this-algorithm" target="_blank" rel="noopener">《What is the importance of this algorithm?》</a></li></ul><p>介绍:Quora上的一篇关于有哪些重要的算法提问.</p><ul><li><a href="http://www.cleveralgorithms.com/nature-inspired/index.html" target="_blank" rel="noopener">《Clever Algorithms: Nature-Inspired Programming Recipes》</a></li></ul><p>介绍:智能算法手册(7类/45个之智能相关算法及示例).</p><ul><li><a href="http://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="noopener">《Data Structure Visualizations》</a></li></ul><p>介绍:数据结构可视化图形.</p><ul><li><a href="https://www.quora.com/Distributed-Systems/What-is-a-simple-explanation-of-the-Paxos-algorithm" target="_blank" rel="noopener">《Paxos algorithm》</a></li></ul><p>介绍:如果简单的解释Paxos算法,此外推荐论文<a href="https://pdos.csail.mit.edu/6.824/papers/paxos-simple.pdf" target="_blank" rel="noopener">Paxos Made Simple</a>,<a href="http://the-paper-trail.org/blog/consensus-protocols-paxos/" target="_blank" rel="noopener">Consensus Protocols: Paxos</a>,<a href="http://the-paper-trail.org/blog/consensus-protocols-two-phase-commit/" target="_blank" rel="noopener">Consensus Protocols: Two-Phase Commit</a>,<a href="http://the-paper-trail.org/blog/consensus-protocols-three-phase-commit/" target="_blank" rel="noopener">Consensus Protocols: Three-phase Commit</a></p><ul><li><a href="http://courses.csail.mit.edu/6.006/fall11/staff.shtml" target="_blank" rel="noopener">《Introduction to Algorithms》</a></li></ul><p>介绍:Introduction to Algorithms.</p><ul><li><a href="https://blog.pivotal.io/big-data-pivotal/case-studies/an-open-source-reference-architecture-for-real-time-stock-prediction" target="_blank" rel="noopener">《An Open Source Reference Architecture For Real-Time Stock Prediction》</a></li></ul><p>介绍:实时股票分析系统的架构与算法<a href="http://www.infoq.com/cn/news/2015/12/open-source-reference-architectu" target="_blank" rel="noopener">译文</a>.</p><ul><li><a href="https://buildingrecommenders.wordpress.com/2015/11/16/overview-of-recommender-algorithms-part-1/" target="_blank" rel="noopener">《Overview of Recommender Algorithms part1》</a></li></ul><p>介绍：推荐算法概览<a href="https://buildingrecommenders.wordpress.com/2015/11/18/overview-of-recommender-algorithms-part-2/" target="_blank" rel="noopener">part2</a>,<a href="https://buildingrecommenders.wordpress.com/2015/11/19/overview-of-recommender-algorithms-part-3/" target="_blank" rel="noopener">part3</a>,<a href="https://buildingrecommenders.wordpress.com/2015/11/20/overview-of-recommender-algorithms-part-4/" target="_blank" rel="noopener">part4</a>,<a href="https://buildingrecommenders.wordpress.com/2015/11/23/overview-of-recommender-algorithms-part-5/" target="_blank" rel="noopener">part5</a>,部分译文<a href="http://www.infoq.com/cn/articles/recommendation-algorithm-overview-part01" target="_blank" rel="noopener">part1</a>,<a href="http://www.infoq.com/cn/articles/recommendation-algorithm-overview-part02" target="_blank" rel="noopener">part2</a>,同时推荐<a href="https://buildingrecommenders.wordpress.com/2015/11/18/recommender-systems-in-netflix/" target="_blank" rel="noopener">Recommender Systems in Netflix</a></p><ul><li><a href="http://arxiv.org/abs/1511.05263" target="_blank" rel="noopener">《The Use of Machine Learning Algorithms in Recommender Systems: A Systematic Review》</a></li></ul><p>介绍:推荐系统机器学习算法系统综述.</p><ul><li><a href="http://rayli.net/blog/data/top-10-data-mining-algorithms-in-plain-english/" target="_blank" rel="noopener">《Top 10 data mining algorithms in plain English》</a></li></ul><p>介绍:白话数据挖掘十大算法</p><ul><li><a href="https://jkchu.com/2016/02/17/designing-and-implementing-a-ranking-algorithm/" target="_blank" rel="noopener">《Designing and Implementing a Ranking Algorithm》</a></li></ul><p>介绍:排名算法的设计与实现</p><ul><li><a href="http://www.nature.com/articles/npjqi201523?WT.mc_id=FBK_NPG_1602_npjQI" target="_blank" rel="noopener">《Quantum algorithms: an overview》</a></li></ul><p>介绍:量子算法概述</p><ul><li><a href="https://www.cs.princeton.edu/~rs/" target="_blank" rel="noopener">《Robert Sedgewick HomePage》</a></li></ul><p>介绍:罗伯特·塞奇威克的主页，是算法一书的作者，目前这本书已经到了第四版<a href="http://algs4.cs.princeton.edu/home/" target="_blank" rel="noopener"> Algorithms, 4th Edition</a>,电子版是免费的，而且还有相对于的源码和课程资料,他的<a href="http://ac.cs.princeton.edu/home/" target="_blank" rel="noopener">Analytic Combinatorics</a>解析组合数学也很有名</p><ul><li><a href="http://spinroot.com/courses/summer/Papers/hoare_1978.pdf" target="_blank" rel="noopener">《Communicating sequential processes》</a></li></ul><p>介绍:通信顺序进程是并发编程的经典论文,Go的模型（还有Erlang等）都是基于CPS.此外推荐<a href="http://www.cs.cmu.edu/~brookes/papers/hoare.pdf" target="_blank" rel="noopener">Communicating Parallel Processes</a></p><ul><li><a href="https://www.inf.ethz.ch/personal/wirth/" target="_blank" rel="noopener">《Niklaus Wirth Homepage》</a></li></ul><p>介绍:尼克劳斯·维尔特主页，图灵奖获得者。Algol W， Modula， Pascal ，Modula-2， Oberon之父。他的论文<a href="https://www.inf.ethz.ch/personal/wirth/ProgInOberon.pdf" target="_blank" rel="noopener">Programming in Oberon: Steps beyond Pascal and Modula.</a>被视为软件工程的经典之作</p><ul><li><a href="http://www-cs-faculty.stanford.edu/~uno/" target="_blank" rel="noopener">《Donald E. Knuth HomePage》</a></li></ul><p>介绍:唐纳德·尔文·克努斯是图灵奖获得者.其经典著作《计算机程序设计艺术》更是被誉为算法中“真正”的圣经，像KMP和LR(K)这样令人不可思议的算法，在此书比比皆是。难怪连Bill Gates都说：“如果能做对书里所有的习题，就直接来微软上班吧！”</p><ul><li><a href="http://c2.com/cgi/wiki?JonBentley" target="_blank" rel="noopener">《Jon Bentley HomePage》</a></li></ul><p>介绍:著有编程珠玑<a href="https://tfetimes.com/wp-content/uploads/2015/04/ProgrammingPearls2nd.pdf" target="_blank" rel="noopener">Programming Pearls, Second Edition</a></p><ul><li><a href="http://www.cs.utexas.edu/~EWD/" target="_blank" rel="noopener">《Edsger Wybe Dijkstra HomePage》</a></li></ul><p>介绍:艾兹赫尔·韦伯·戴克斯特拉是荷兰第一位以程式为专业的科学家,以发现了图论中的最短路径算法（<a href="https://www.ssucet.org/old/pluginfile.php/2121/mod_resource/content/1/21-dijkstra.pdf" target="_blank" rel="noopener">Dijkstra算法</a>）而闻名于世，1972年因为ALGOL第二代编程语言而获得图灵奖。GOTO有害论“<a href="http://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf" target="_blank" rel="noopener">Go To StatementConsidered Harmful</a>”(EWD215)也是被广为传颂的经典之作.</p><ul><li><a href="http://www.columbia.edu/cu/computinghistory/backus.html" target="_blank" rel="noopener">《John Backus HomePage》</a></li></ul><p>介绍:FORTRAN之父,提出了规范描述编程语言语法的BNF。这位当年的“差生”终于被整个计算机世界肯定——美国计算机协会于1977年授予John Backus图灵奖</p><ul><li><a href="http://ethw.org/James_W._Cooley" target="_blank" rel="noopener">《James Cooley HomePage》</a></li></ul><p>介绍:美国数学家，哥伦比亚大学的数学博士，以他所创造的快速傅立叶变换(FFT)而著名</p>]]></content>
      
      <categories>
          
          <category> Study Class </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Soft</title>
      <link href="/2016/04/03/Soft/"/>
      <url>/2016/04/03/Soft/</url>
      <content type="html"><![CDATA[<h4 id="Some_Soft（SQL_Server_&amp;_Visual_Studio）">Some Soft（SQL Server &amp; Visual Studio）</h4><p><strong>1、MS SQL Server 2008 简体中文正式版下载地址(附序列号)</strong></p><a id="more"></a><p>Microsoft® SQL Server® 2008 Enterprise Evaluation：开发人员试用体验<br><a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=6B10C7C1-4F97-42C4-9362-58D4D088CD38&amp;displaylang=zh-cn" target="_blank" rel="noopener">http://www.microsoft.com/downloads/details.aspx?FamilyId=6B10C7C1-4F97-42C4-9362-58D4D088CD38&amp;displaylang=zh-cn</a></p><p>Microsoft® SQL Server® 2008 Enterprise Evaluation：IT 专业人员试用体验<br><a href="http://www.microsoft.com/downloads/details.aspx?familyid=265F08BC-1874-4C81-83D8-0D48DBCE6297&amp;displaylang=zh-cn" target="_blank" rel="noopener">http://www.microsoft.com/downloads/details.aspx?familyid=265F08BC-1874-4C81-83D8-0D48DBCE6297&amp;displaylang=zh-cn</a></p><p>SQL Server 2008 发行说明<br><a href="http://www.microsoft.com/downloads/info.aspx?na=90&amp;p=&amp;SrcDisplayLang=zh-cn&amp;SrcCategoryId=&amp;SrcFamilyId=daf00920-7214-418a-a4b0-727f4ce08f81&amp;u=http%3a%2f%2fdownload.microsoft.com%2fdownload%2f9%2ff%2fe%2f9fe7971b-cea6-4f67-ac49-d7fc82a75119%2fReleaseNotesSQLServer2008_CHS.htm" target="_blank" rel="noopener">http://www.microsoft.com/downloads/info.aspx?na=90&amp;p=&amp;SrcDisplayLang=zh-cn&amp;SrcCategoryId=&amp;SrcFamilyId=daf00920-7214-418a-a4b0-727f4ce08f81&amp;u=http%3a%2f%2fdownload.microsoft.com%2fdownload%2f9%2ff%2fe%2f9fe7971b-cea6-4f67-ac49-d7fc82a75119%2fReleaseNotesSQLServer2008_CHS.htm</a></p><p>Microsoft SQL Server 2008 联机丛书<br><a href="http://www.microsoft.com/downloads/info.aspx?na=90&amp;p=&amp;SrcDisplayLang=zh-cn&amp;SrcCategoryId=&amp;SrcFamilyId=765433f7-0983-4d7a-b628-0a98145bcb97&amp;u=http%3a%2f%2fdownload.microsoft.com%2fdownload%2f1%2f3%2f2%2f1321c45a-aab0-4033-9d82-f0862edc8418%2fSQLServer2008_BOL_CHS.msi" target="_blank" rel="noopener">http://www.microsoft.com/downloads/info.aspx?na=90&amp;p=&amp;SrcDisplayLang=zh-cn&amp;SrcCategoryId=&amp;SrcFamilyId=765433f7-0983-4d7a-b628-0a98145bcb97&amp;u=http%3a%2f%2fdownload.microsoft.com%2fdownload%2f1%2f3%2f2%2f1321c45a-aab0-4033-9d82-f0862edc8418%2fSQLServer2008_BOL_CHS.msi</a></p><p>推荐：<br><a href="http://sqlserver.dlservice.microsoft.com/dl/download/B/8/0/B808AF59-7619-4A71-A447-F597DE74AC44/SQLFULL_CHS.iso" target="_blank" rel="noopener">http://sqlserver.dlservice.microsoft.com/dl/download/B/8/0/B808AF59-7619-4A71-A447-F597DE74AC44/SQLFULL_CHS.iso</a></p><p>SQL Server 2008 序列号：<br>Developer:　PTTFM-X467G-P7RH2-3Q6CG-4DMYB<br>Enterprise:   JD8Y6-HQG69-P9H84-XDTPG-34MBB</p><p>Microsoft SQL Server 2008 Feature Pack，2008 年 8 月</p><p><a href="http://www.microsoft.com/downloads/details.aspx?familyid=C6C3E9EF-BA29-4A43-8D69-A2BED18FE73C&amp;displaylang=zh-tw" target="_blank" rel="noopener">http://www.microsoft.com/downloads/details.aspx?familyid=C6C3E9EF-BA29-4A43-8D69-A2BED18FE73C&amp;displaylang=zh-tw</a></p><p><a href="http://sqlserver.dlservice.microsoft.com/download/0/1/6/0160907E-E9CB-4BA4-99C1-B7FE7C7D2DF9/SQLFULL_CHT.iso" target="_blank" rel="noopener">http://sqlserver.dlservice.microsoft.com/download/0/1/6/0160907E-E9CB-4BA4-99C1-B7FE7C7D2DF9/SQLFULL_CHT.iso</a></p><p><a href="http://download.microsoft.com/download/9/f/c/9fc5e859-8762-40b9-927f-ca1d569dcfda/SQLServer2008_BOL_August2008_CHT.msi" target="_blank" rel="noopener">http://download.microsoft.com/download/9/f/c/9fc5e859-8762-40b9-927f-ca1d569dcfda/SQLServer2008_BOL_August2008_CHT.msi</a></p><p><a href="http://sqlserver.dlservice.microsoft.com/download/B/8/0/B808AF59-7619-4A71-A447-F597DE74AC44/SQLFULL_CHS.iso" target="_blank" rel="noopener">http://sqlserver.dlservice.microsoft.com/download/B/8/0/B808AF59-7619-4A71-A447-F597DE74AC44/SQLFULL_CHS.iso</a></p><p><a href="http://download.microsoft.com/download/1/3/2/1321c45a-aab0-4033-9d82-f0862edc8418/SQLServer2008_BOL_August2008_CHS.msi" target="_blank" rel="noopener">http://download.microsoft.com/download/1/3/2/1321c45a-aab0-4033-9d82-f0862edc8418/SQLServer2008_BOL_August2008_CHS.msi</a></p><p>SQL Server 2008 简体中文正式版 提供下载<br>SQL Server 2008是一个重大的产品版本，它推出了许多新的特性和关键的改进，使得它成为至今为止的最强大和最全面的SQL Server版本。<br>　　在现今数据的世界里，公司要获得成功和不断发展，他们需要定位主要的数据趋势的愿景。微软的这个数据平台愿景帮助公司满足这些数据爆炸和下一代数据驱动应用程序的需求。微软将继续投入和发展以下的关键领域来支持他们的数据平台愿景：关键任务企业数据平台、动态开发、关系数据和商业智能。</p><p>本DVD包含了x86 x64 ia64 三种CPU模式的安装程序。版本号为： 10.0.1600.22</p><p>序列号：<br>开发版(Developer): PTTFM-X467G-P7RH2-3Q6CG-4DMYB<br>企业版(Enterprise): JD8Y6-HQG69-P9H84-XDTPG-34MBB</p><p><a href="http://www.cnblogs.com/shunyao8210/archive/2008/10/24/1318447.html" target="_blank" rel="noopener">http://www.cnblogs.com/shunyao8210/archive/2008/10/24/1318447.html</a><br><a href="http://www.cnblogs.com/SGSoft/archive/2008/10/20/1314952.html" target="_blank" rel="noopener">http://www.cnblogs.com/SGSoft/archive/2008/10/20/1314952.html</a></p><p><strong>2、Visual Studio 2013 官方免费社区版/简体中文旗舰版下载 (VS2013 MSDN原版ISO镜像)</strong></p><p><a href="http://www.iplaysoft.com/vs2013.html" target="_blank" rel="noopener">http://www.iplaysoft.com/vs2013.html</a></p>]]></content>
      
      <categories>
          
          <category> Soft </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>把自己的lib上传到中央库</title>
      <link href="/2016/02/25/%E6%8A%8A%E8%87%AA%E5%B7%B1%E7%9A%84lib%E4%B8%8A%E4%BC%A0%E5%88%B0%E4%B8%AD%E5%A4%AE%E5%BA%93/"/>
      <url>/2016/02/25/%E6%8A%8A%E8%87%AA%E5%B7%B1%E7%9A%84lib%E4%B8%8A%E4%BC%A0%E5%88%B0%E4%B8%AD%E5%A4%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<h4 id="如何使用Android_Studio把自己的Android_library分发到jCenter和Maven_Central">如何使用Android Studio把自己的Android library分发到jCenter和Maven Central</h4><p><a href="http://www.devtf.cn/?p=760" target="_blank" rel="noopener">把自己的lib上传到中央库</a></p>]]></content>
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>如何阅读Android源码</title>
      <link href="/2016/02/19/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BBAndroid%E6%BA%90%E7%A0%81/"/>
      <url>/2016/02/19/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BBAndroid%E6%BA%90%E7%A0%81/</url>
      <content type="html"><![CDATA[<h4 id="阅读Android源码的一些姿势">阅读Android源码的一些姿势</h4><p><a href="http://zhuanlan.zhihu.com/kaede/20564614" target="_blank" rel="noopener">阅读Android源码的一些姿势</a></p>]]></content>
      
      <categories>
          
          <category> Study Class </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>iTunes无法连接iPhone</title>
      <link href="/2016/02/16/iTunes%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5iPhone/"/>
      <url>/2016/02/16/iTunes%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5iPhone/</url>
      <content type="html"><![CDATA[<h4 id="iPhone连接电脑后可以查看照片但iTunes无反应">iPhone连接电脑后可以查看照片但iTunes无反应</h4><a id="more"></a><p>右键点击 计算机（或者 我的电脑）－管理－设备管理器，直接到 设备管理器－便携设备 或 图像处理设备 下面，找到带有Apple 或 iPhone 字样的设备，右键点击，更新驱动程序－浏览以查找－从计算机的列表中选择－从磁盘安装－浏览至<code>C:\Program Files\Common Files\Apple\Mobile Device Support\Drivers，找到usbaapl.inf</code>，确定。</p><p><a href="http://jingyan.baidu.com/article/9c69d48f9ff10113c8024e67.html" target="_blank" rel="noopener">如何解决iTunes 提示“发生未知错误-50”</a></p>]]></content>
      
      <categories>
          
          <category> Apple </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>关于Anroid的</title>
      <link href="/2016/02/02/%E5%85%B3%E4%BA%8EAnroid%E7%9A%84/"/>
      <url>/2016/02/02/%E5%85%B3%E4%BA%8EAnroid%E7%9A%84/</url>
      <content type="html"><![CDATA[<h4 id="浅析_Android_的窗口">浅析 Android 的窗口</h4><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=403668684&amp;idx=1&amp;sn=5e498bb86bcc884c43ba469c8e26623c&amp;scene=1&amp;srcid=0201nEEusMyKs1qSVg8csd5J&amp;key=710a5d99946419d98023ebfa3e64cf82cd966fe60a8e99b41fd791c57a0692c3b162b03ae3f1b424e1f766dd67b47b8e&amp;ascene=0&amp;uin=MTYzMjY2MTE1&amp;devicetype=iMac+MacBookPro10%2C1+OSX+OSX+10.11.3+build(15D21" target="_blank" rel="noopener">浅析 Android 的窗口</a></p>]]></content>
      
      <categories>
          
          <category> Study Class </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Java HashMap工作原理及实现</title>
      <link href="/2016/01/27/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
      <url>/2016/01/27/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h4 id="Java_HashMap工作原理及实现">Java HashMap工作原理及实现</h4><p><a href="http://yikun.github.io/2015/04/01/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">Java HashMap工作原理及实现</a></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>如何自学Android</title>
      <link href="/2016/01/23/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6Android/"/>
      <url>/2016/01/23/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6Android/</url>
      <content type="html"><![CDATA[<h4 id="如何自学Android">如何自学Android</h4><p><a href="(http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=402135493&amp;idx=1&amp;sn=c2e040f95551082cbe2bdf7182dc3e9f#rd">如何自学Android编程？</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android 开发最佳实践</title>
      <link href="/2016/01/23/Android-%E5%BC%80%E5%8F%91%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/2016/01/23/Android-%E5%BC%80%E5%8F%91%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h4 id="Android_开发最佳实践">Android 开发最佳实践</h4><p>这是Github上敢于Android开发的一些简要。<br><a id="more"></a></p><p><a href="https://github.com/futurice/android-best-practices/blob/master/translations/Chinese/README.cn.md#摘要" target="_blank" rel="noopener">Android 开发最佳实践</a></p><h3 id="摘要">摘要</h3><ul><li>使用 Gradle 和它推荐的工程结构</li><li>把密码和敏感数据放在gradle.properties</li><li>不要自己写 HTTP 客户端,使用Volley或OkHttp库</li><li>使用Jackson库解析JSON数据</li><li>避免使用Guava同时使用一些类库来避免65k method limit（一个Android程序中最多能执行65536个方法）</li><li>使用 Fragments来呈现UI视图</li><li>使用 Activities 只是为了管理 Fragments</li><li>Layout 布局是 XMLs代码，组织好它们</li><li>在layoutout XMLs布局时，使用styles文件来避免使用重复的属性</li><li>使用多个style文件来避免单一的一个大style文件</li><li>保持你的colors.xml 简短DRY(不要重复自己)，只是定义调色板</li><li>总是使用dimens.xml DRY(不要重复自己)，定义通用常数</li><li>不要做一个深层次的ViewGroup</li><li>在使用WebViews时避免在客户端做处理，当心内存泄露</li><li>使用Robolectric单元测试，Robotium 做UI测试</li><li>使用Genymotion 作为你的模拟器</li><li>总是使用ProGuard 和 DexGuard混淆来项目</li></ul><h3 id="Android_SDK">Android SDK</h3><p>将你的<a href="https://developer.android.com/sdk/installing/index.html?pkg=tools" target="_blank" rel="noopener">Android SDK</a>放在你的home目录或其他应用程序无关的位置。 当安装有些包含SDK的IDE的时候，可能会将SDK放在IDE同一目录下，当你需要升级（或重新安装）IDE或更换的IDE时，会非常麻烦。 此外，若果你的IDE是在普通用户，不是在root下运行，还要避免吧SDK放到一下需要sudo权限的系统级别目录下。</p><h3 id="构建系统">构建系统</h3><p>你的默认编译环境应该是Gradle. Ant 有很多限制，也很冗余。使用Gradle，完成以下工作很方便：</p><ul><li>构建APP不同版本的变种</li><li>制作简单类似脚本的任务</li><li>管理和下载依赖</li><li>自定义秘钥</li><li>更多</li></ul><h3 id="工程结构">工程结构</h3><p>有两种流行的结构：老的Ant &amp; Eclipse ADT 工程结构，和新的Gradle &amp; Android Studio 工程结构， 你应该选择新的工程结构，如果你的工程还在使用老的结构，考虑放弃吧，将工程移植到新的结构。<br>老的结构：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">old-structure</span><br><span class="line">├─ assets</span><br><span class="line">├─ libs</span><br><span class="line">├─ res</span><br><span class="line">├─ src</span><br><span class="line">│  └─ com/futurice/project</span><br><span class="line">├─ AndroidManifest.xml</span><br><span class="line">├─ build.gradle</span><br><span class="line">├─ project.properties</span><br><span class="line">└─ proguard-rules.pro</span><br></pre></td></tr></table></figure></p><p>新的结构<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">new-structure</span><br><span class="line">├─ library-foobar</span><br><span class="line">├─ app</span><br><span class="line">│  ├─ libs</span><br><span class="line">│  ├─ src</span><br><span class="line">│  │  ├─ androidTest</span><br><span class="line">│  │  │  └─ java</span><br><span class="line">│  │  │     └─ com/futurice/project</span><br><span class="line">│  │  └─ main</span><br><span class="line">│  │     ├─ java</span><br><span class="line">│  │     │  └─ com/futurice/project</span><br><span class="line">│  │     ├─ res</span><br><span class="line">│  │     └─ AndroidManifest.xml</span><br><span class="line">│  ├─ build.gradle</span><br><span class="line">│  └─ proguard-rules.pro</span><br><span class="line">├─ build.gradle</span><br><span class="line">└─ settings.gradle</span><br></pre></td></tr></table></figure></p><p>主要的区别在于，新的结构明确的分开了<code>source sets</code> (main,androidTest)，Gradle的一个理念。 你可以做到，例如，添加源组‘paid’和‘free’在src中，这将成为您的应用程序的付费和免费的两种模式的源代码。</p><p>你的项目引用第三方项目库时（例如，library-foobar），拥有一个顶级包名<code>app</code>从第三方库项目区分你的应用程序是非常有用的。 然后<code>settings.gradle</code>不断引用这些库项目，其中<code>app/build.gradle</code>可以引用。</p><h3 id="Gradle_配置">Gradle 配置</h3><p><strong>常用结构</strong> 参考<a href="http://tools.android.com/tech-docs/new-build-system/user-guide" target="_blank" rel="noopener">Google’s guide on Gradle for Android</a><br><strong>小任务</strong> 除了(shell, Python, Perl, etc)这些脚本语言，你也可以使用Gradle 制作任务。 更多信息请参考<a href="https://docs.gradle.org/current/userguide/userguide_single.html#N10CBF" target="_blank" rel="noopener">Gradle’s documentation</a>。<br><strong>密码 </strong> 在做版本release时你app的 <code>build.gradle</code>你需要定义 <code>signingConfigs</code>.此时你应该避免以下内容：<em>不要做这个</em>.这会出现在版本控制中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">        storeFile file(<span class="string">"myapp.keystore"</span>)</span><br><span class="line">        storePassword <span class="string">"password123"</span></span><br><span class="line">        keyAlias <span class="string">"thekey"</span></span><br><span class="line">        keyPassword <span class="string">"password789"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而是，建立一个不加入版本控制系统的gradle.properties文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">KEYSTORE_PASSWORD=password123</span><br><span class="line">KEY_PASSWORD=password789</span><br></pre></td></tr></table></figure></p><p>那个文件是gradle自动引入的，你可以在<code>buld.gradle</code>文件中使用，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            storeFile file(<span class="string">"myapp.keystore"</span>)</span><br><span class="line">            storePassword KEYSTORE_PASSWORD</span><br><span class="line">            keyAlias <span class="string">"thekey"</span></span><br><span class="line">            keyPassword KEY_PASSWORD</span><br><span class="line">        &#125;</span><br><span class="line">        catch (ex) &#123;</span><br><span class="line">            throw new InvalidUserDataException(<span class="string">"You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>使用 Maven 依赖方案代替使用导入jar包方案</strong> 如果在你的项目中你明确使用率 jar文件，那么它们可能成为永久的版本，如2.1.1.下载jar包更新他们是很繁琐的， 这个问题Maven很好的解决了，这在Android Gradle构建中也是推荐的方法。你可 以指定版本的一个范围，如2.1.+,然后Maven会自动升级到制定的最新版本，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'com.netflix.rxjava:rxjava-core:0.19.+'</span></span><br><span class="line">    compile <span class="string">'com.netflix.rxjava:rxjava-android:0.19.+'</span></span><br><span class="line">    compile <span class="string">'com.fasterxml.jackson.core:jackson-databind:2.4.+'</span></span><br><span class="line">    compile <span class="string">'com.fasterxml.jackson.core:jackson-core:2.4.+'</span></span><br><span class="line">    compile <span class="string">'com.fasterxml.jackson.core:jackson-annotations:2.4.+'</span></span><br><span class="line">    compile <span class="string">'com.squareup.okhttp:okhttp:2.0.+'</span></span><br><span class="line">    compile <span class="string">'com.squareup.okhttp:okhttp-urlconnection:2.0.+'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="IDEs_and_text_editors">IDEs and text editors</h3><h3 id="IDE集成开发环境和文本编辑器">IDE集成开发环境和文本编辑器</h3><p>无论使用什么编辑器，一定要构建一个良好的工程结构 编辑器每个人都有自己的 选择，让你的编辑器根据工程结构和构建系统运作，那是你自己的责任。</p><p>当下首推<a href="https://developer.android.com/sdk/index.html" target="_blank" rel="noopener">Android Studio</a>,因为他是由谷歌开发，最接近Gradle，默认使用最新的工程结构，已经到2.0preview5阶段，它就是为Android开发定制的。</p><p>你也可以使用Eclipse ADT ，但是你需要对它进行配置，因为它使用了旧的工程结构 和Ant作为构建系统。你甚至可以使用纯文版编辑器如Vim，Sublime Text，或者Emacs。如果那样的话，你需要使用Gardle和adb命令行。如果使用Eclipse集成Gradle 不适合你，你只是使用命令行构建工程，或迁移到Android Studio中来吧。</p><p>无论你使用何种开发工具，只要确保Gradle和新的项目结构保持官方的方式构建应用程序，避免你的编辑器配置文件加入到版本控制。例如，避免加入Ant build.xml文件。 特别如果你改变Ant的配置，不要忘记保持<code>build.gradle</code>是最新和起作用的。同时，善待其他开发者，不要强制改变他们的开发工具和偏好。</p><h3 id="类库">类库</h3><p><a href="http://wiki.fasterxml.com/JacksonHome" target="_blank" rel="noopener">Jackson</a>是一个将java对象转换成JSON与JSON转化java类的类库。<a href="https://github.com/google/gson" target="_blank" rel="noopener">Gson</a> 是解决这个问题的流行方案，然而我们发现Jackson更高效,因为它支持替代的方法处理JSON:流、内存树模型,和传统JSON-POJO数据绑定。不过，请记住， Jsonkson库比起GSON更大，所以根据你的情况选择，你可能选择GSON来避免APP 65k个方法限制。</p><p><strong>网络请求，缓存，图片</strong>执行请求后端服务器，有几种交互的解决方案，你应该考虑实现你自己的网络客户端。使用 <a href="https://android.googlesource.com/platform/frameworks/volley" target="_blank" rel="noopener">Volley</a> 或<a href="http://square.github.io/retrofit/" target="_blank" rel="noopener">Retrofit</a>。Volley 同时提供图片缓存类。若果你选择使用Retrofit,那么考虑使用<a href="http://square.github.io/picasso/" target="_blank" rel="noopener">Picasso</a> 来加载图片和缓存，同时使用<a href="http://square.github.io/okhttp/" target="_blank" rel="noopener">OkHttp</a>作为高效的网络请求。Retrofit，Picasso和OkHttp都是有同一家公司开发（注： 是由<a href="https://github.com/square" target="_blank" rel="noopener">Square</a> 公司开发），所以它们能很好的在一起运行。<a href="http://stackoverflow.com/questions/24375043/how-to-implement-android-volley-with-okhttp-2-0/24951835#24951835" target="_blank" rel="noopener">OkHttp 同样可以和Volley在一起使用 Volley</a>.</p><p><strong>RxJava</strong> 是函数式反应性的一个类库，换句话说，能处理异步的事件。 这是一个强大的和有前途的模式，同时也可能会造成混淆，因为它是如此的不同。 我们建议在使用这个库架构整个应用程序之前要谨慎考虑。 有一些项目是使用RxJava完成的，如果你需要帮助可以跟这些人取得联系： Timo Tuominen, Olli Salonen, Andre Medeiros, Mark Voit, Antti Lammi, Vera Izrailit, Juha Ristolainen. <a href="http://yuluoding.com/2016/01/09/RxJava%E5%BC%80%E5%8F%91%E7%B2%BE%E8%A6%81/" target="_blank" rel="noopener">RxJava开发精要</a><br>如若你之前有使用过Rx的经历，开始从API响应应用它。 另外，从简单的UI事件处理开始运用，如单击事件或在搜索栏输入事件。 若对你的Rx技术有信心，同时想要将它应用到你的整体架构中，那么请在复杂的部分写好Javadocs文档。 请记住其他不熟悉RxJava的开发人员，可能会非常难理解整个项目。 尽你的的全力帮助他们理解你的代码和Rx。</p><p><a href="https://github.com/evant/gradle-retrolambda" target="_blank" rel="noopener">Retrolambda</a> 是一个在Android和预JDK8平台上的使用Lambda表达式语法的Java类库。 它有助于保持你代码的紧凑性和可读性，特别当你使用如RxJava函数风格编程时。 使用它时先安装JDK8，在Android Studio工程结构对话框中把它设置成为SDK路径，同时设置<code>JAVA8_HOME</code>和<code>JAVA7_HOME</code>环境变量， 然后在工程根目录下配置 <code>build.gradle</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    classpath <span class="string">'me.tatarka:gradle-retrolambda:2.4.+'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同时在每个module 的build.gradle中添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'retrolambda'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">    sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">retrolambda &#123;</span><br><span class="line">    jdk System.getenv(<span class="string">"JAVA8_HOME"</span>)</span><br><span class="line">    oldJdk System.getenv(<span class="string">"JAVA7_HOME"</span>)</span><br><span class="line">    javaVersion JavaVersion.VERSION_1_7</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Android Studio 提供Java8 lambdas表带是代码提示支持。如果你对lambdas不熟悉，只需参照以下开始学习吧：</p><ul><li>任何只包含一个接口的方法都是”lambda friendly”同时代码可以被折叠成更紧凑的语法</li><li>如果对参数或类似有疑问，就写一个普通的匿名内部类，然后让Android Status为你生成一个lambda。</li></ul><p><strong>当心dex方法数限制，同时避免使用过多的类库</strong> Android apps，当打包成一个dex文件时，有一个65535个应用方法强硬限制<a href="https://medium.com/@rotxed/dex-skys-the-limit-no-65k-methods-is-28e6cb40cf71" target="_blank" rel="noopener">[1]</a> <a href="http://blog.persistent.info/2014/05/per-package-method-counts-for-androids.html" target="_blank" rel="noopener">[2]</a> <a href="http://jakewharton.com/play-services-is-a-monolith/" target="_blank" rel="noopener">[3]</a>。 当你突破65k限制之后你会看到一个致命错误。因此，使用一个正常范围的类库文件，同时使用<a href="https://github.com/mihaip/dex-method-counts" target="_blank" rel="noopener">dex-method-counts</a> 工具来决定哪些类库可以再65k限制之下使用，特别的避免使用Guava类库，因为它包含超过13k个方法。</p><h3 id="Activities_and_Fragments">Activities and Fragments</h3><p><a href="http://developer.android.com/guide/components/fragments.html" target="_blank" rel="noopener">Fragments</a>应该作为你实现UI界面默认选择。你可以重复使用Fragments用户接口来 组合成你的应用。我们强烈推荐使用Fragments而不是activity来呈现UI界面，理由如下：</p><ul><li><p><strong>提供多窗格布局解决方案</strong> Fragments 的引入主要将手机应用延伸到平板电脑，所以在平板电脑上你可能有A、B两个窗格，但是在手机应用上A、B可能分别充满 整个屏幕。如果你的应用在最初就使用了fragments，那么以后将你的应用适配到其他不同尺寸屏幕就会非常简单。</p></li><li><p><strong>屏幕间数据通信</strong> 从一个Activity发送复杂数据(例如Java对象)到另外一个Activity，Android的API并没有提供合适的方法。不过使用Fragment，你可以使用 一个activity实例作为这个activity子fragments的通信通道。即使这样比Activity与Activity间的通信好，你也想考虑使用Event Bus架构，使用如 <a href="https://square.github.io/otto/" target="_blank" rel="noopener">Otto</a> 或者 <a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener">greenrobot EventBus</a>作为更简洁的实现。 如果你希望避免添加另外一个类库，RxJava同样可以实现一个Event Bus。</p></li><li><p><strong>Fragments 一般通用的不只有UI</strong> 你可以有一个没有界面的fragment作为Activity提供后台工作。 进一步你可以使用这个特性来创建<a href="http://stackoverflow.com/questions/12363790/how-many-activities-vs-fragments/12528434#12528434" target="_blank" rel="noopener">一个fragment 包含改变其它fragment的逻辑</a> 而不是把这个逻辑放在activity中。</p></li><li><p><strong>甚至ActionBar 都可以使用内部fragment来管理</strong> 你可以选择使用一个没有UI界面的fragment来专门管理ActionBar,或者你可以选择使用在每个Fragment中 添加它自己的action 来作为父Activity的ActionBar.参考.</p></li></ul><p>很不幸，我们不建议广泛的使用嵌套的<a href="https://developer.android.com/about/versions/android-4.2.html#NestedFragments" target="_blank" rel="noopener">fragments</a>，因为 有时会引起<a href="http://delyan.me/android-s-matryoshka-problem/" target="_blank" rel="noopener">matryoshka bugs</a>。我们只有当它有意义(例如，在水平滑动的ViewPager在 像屏幕一样fragment中)或者他的确是一个明智的选择的时候才广泛的使用fragment。</p><p>在一个架构级别，你的APP应该有一个顶级的activity来包含绝大部分业务相关的fragment。你也可能还有一些辅助的activity ，这些辅助的activity与主activity 通信很简单限制在这两种方法 <a href="http://developer.android.com/reference/android/content/Intent.html#setData(android.net.Uri" target="_blank" rel="noopener">Intent.setData()</a>) 或 <a href="http://developer.android.com/reference/android/content/Intent.html#setAction(java.lang.String" target="_blank" rel="noopener">Intent.setAction()</a>)或类似的方法。</p><h3 id="Java_包结构">Java 包结构</h3><p>Android 应用程序在架构上大致是Java中的<a href="http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" target="_blank" rel="noopener">Model-View-Controller</a>结构。 在Android 中 Fragment和Activity通常上是控制器类(<a href="http://www.informit.com/articles/article.aspx?p=2126865)" target="_blank" rel="noopener">http://www.informit.com/articles/article.aspx?p=2126865)</a>. 换句话说，他们是用户接口的部分，同样也是Views视图的部分。</p><p>正是因为如此，才很难严格的将fragments (或者 activities) 严格的划分成 控制器controlloers还是视图 views。 最还是将它们放在自己单独的 <code>fragments</code> 包中。只要你遵循之前提到的建议，Activities 则可以放在顶级目录下。 若果你规划有2到3个以上的activity，那么还是同样新建一个<code>activities</code>包吧。</p><p>然而，这种架构可以看做是另一种形式的MVC， 包含要被解析API响应的JSON数据，来填充的POJO的models包中。 和一个<code>views</code>包来包含你的自定义视图、通知、导航视图，widgets等等。 适配器Adapter是在数据和视图之间。然而他们通常需要通过getView()方法来导出一些视图， 所以你可以将<code>adapters</code>包放在<code>views</code>包里面。</p><p>一些控制器角色的类是应用程序级别的，同时是接近系统的。 这些类放在<code>managers</code>包下面。 一些繁杂的数据处理类，比如说”DateUtils”,放在<code>utils</code>包下面。 与后端交互负责网络处理类，放在<code>network</code>包下面。</p><p>总而言之，以最接近用户而不是最接近后端去安排他们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">com.futurice.project</span><br><span class="line">├─ network</span><br><span class="line">├─ models</span><br><span class="line">├─ managers</span><br><span class="line">├─ utils</span><br><span class="line">├─ fragments</span><br><span class="line">└─ views</span><br><span class="line">   ├─ adapters</span><br><span class="line">   ├─ actionbar</span><br><span class="line">   ├─ widgets</span><br><span class="line">   └─ notifications</span><br></pre></td></tr></table></figure><h3 id="资源文件_Resources">资源文件 Resources</h3><ul><li>命名 遵循前缀表明类型的习惯，形如<code>type_foo_bar.xml</code>。例如：<code>fragment_contact_details.xml</code>,<code>view_primary_button.xml</code>,<code>activity_main.xml</code>.<br><b>组织布局文件</b> 若果你不确定如何排版一个布局文件，遵循一下规则可能会有帮助。</li><li>每一个属性一行，缩进4个空格</li><li>android:id 总是作为第一个属性</li><li>android:layout_<em>**</em> 属性在上边</li><li>style 属性在底部</li><li>关闭标签/&gt;单独起一行，有助于调整和添加新的属性</li><li>考虑使用<a href="http://tools.android.com/tips/layout-designtime-attributes" target="_blank" rel="noopener">Designtime attributes</a> 设计时布局属性，Android Studio已经提供支持，而不是硬编码android:text (译者注：墙内也可以参考stormzhang的这篇博客<a href="http://stormzhang.com/devtools/2015/01/11/android-studio-tips1/" target="_blank" rel="noopener">链接</a>。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"@style/FancyText"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/reusable_part"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>作为一个经验法则,<code>android:layout_****</code>属性应该在 layout XML 中定义,同时其它属性<code>android:****</code> 应放在 styler XML中。此规则也有例外，不过大体工作 的很好。这个思想整体是保持layout属性(positioning, margin, sizing) 和content属性在布局文件中，同时将所有的外观细节属性（colors, padding, font）放 在style文件中。</p><p>例外有以下这些:</p><ul><li><code>android:id</code> 明显应该在layout文件中</li><li>layout文件中<code>android:orientation</code>对于一个<code>LinearLayout</code>布局通常更有意义</li><li><code>android:text</code> 由于是定义内容，应该放在layout文件中</li><li>有时候将<code>android:layout_width</code> 和 <code>android:layout_height</code>属性放到一个style中作为一个通用的风格中更有意义，但是默认情况下这些应该放到layout文件中。<br><strong>使用styles</strong> 几乎每个项目都需要适当的使用style文件，因为对于一个视图来说有一个重复的外观是很常见的。 在应用中对于大多数文本内容，最起码你应该有一个通用的style文件，例如：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"ContentText"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>@dimen/font_normal<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>@color/basic_black<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>应用到TextView 中:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"@string/price"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"@style/ContentText"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure></p><p>你或许需要为按钮控件做同样的事情，不要停止在那里。将一组相关的和重复android:<em>**</em>的属性放到一个通用的style中。</p><p><strong>将一个大的style文件分割成多个文件</strong> 可以有多个<code>style.xml</code>文件，因为没影响，因此你可以有多个style文件styles.xml,style_home.xml,style_item_details.xml,styles_forms.xml。 不用于资源文件路径需要为系统构建起的有意义，在res/values目录下的文件可以任意命名。</p><p><strong> <code>colors.xml</code> 是一个调色板</strong> 在你的<code>colors.xml</code>文件中应该只是映射颜色的名称一个RGBA值，而没有其它的。不要使用它为不同的按钮来定义RGBA值。</p><p><em>不要这样做</em><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"button_foreground"</span>&gt;</span>#FFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"button_background"</span>&gt;</span>#2A91BD<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"comment_background_inactive"</span>&gt;</span>#5F5F5F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"comment_background_active"</span>&gt;</span>#939393<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"comment_foreground"</span>&gt;</span>#FFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"comment_foreground_important"</span>&gt;</span>#FF9D2F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"comment_shadow"</span>&gt;</span>#323232<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用这种格式，你会非常容易的开始重复定义RGBA值，这使如果需要改变基本色变的很复杂。同时，这些定义是跟一些环境关联起来的，如<code>button</code>或者<code>comment</code>, 应该放到一个按钮风格中，而不是在<code>color.xml</code>文件中。<br>相反，这样做:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- grayscale --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"white"</span>     &gt;</span>#FFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"gray_light"</span>&gt;</span>#DBDBDB<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"gray"</span>      &gt;</span>#939393<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"gray_dark"</span> &gt;</span>#5F5F5F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"black"</span>     &gt;</span>#323232<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- basic colors --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"green"</span>&gt;</span>#27D34D<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"blue"</span>&gt;</span>#2A91BD<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"orange"</span>&gt;</span>#FF9D2F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"red"</span>&gt;</span>#FF432F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>向应用设计者那里要这个调色板，名称不需要跟”green”, “blue”, 等等相同。 “brand_primary”, “brand_secondary”, “brand_negative” 这样的名字也是完全可以接受的。 像这样规范的颜色很容易修改或重构，会使应用一共使用了多少种不同的颜色变得非常清晰。 通常一个具有审美价值的UI来说，减少使用颜色的种类是非常重要的。</p><p>像对待<code>colors.xml</code>一样对待<code>dimens.xml</code>文件 与定义颜色调色板一样，你同时也应该定义一个空隙间隔和字体大小的“调色板”。 一个好的例子，如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- font sizes --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_larger"</span>&gt;</span>22sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_large"</span>&gt;</span>18sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_normal"</span>&gt;</span>15sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"font_small"</span>&gt;</span>12sp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- typical spacing between two views --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_huge"</span>&gt;</span>40dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_large"</span>&gt;</span>24dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_normal"</span>&gt;</span>14dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_small"</span>&gt;</span>10dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"spacing_tiny"</span>&gt;</span>4dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- typical sizes of views --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"button_height_tall"</span>&gt;</span>60dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"button_height_normal"</span>&gt;</span>40dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"button_height_short"</span>&gt;</span>32dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>布局时在写 margins 和 paddings 时，你应该使用<code>spacing_****</code>尺寸格式来布局，而不是像对待String字符串一样直接写值。 这样写会非常有感觉，会使组织和改变风格或布局是非常容易。<br>避免深层次的视图结构 有时候为了摆放一个视图，你可能尝试添加另一个LinearLayout。你可能使用这种方法解决：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">...</span></span></span><br><span class="line"><span class="tag">            &gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">...</span></span></span><br><span class="line"><span class="tag">                &gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">...</span></span></span><br><span class="line"><span class="tag">                    &gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>即使你没有非常明确的在一个layout布局文件中这样使用，如果你在Java文件中从一个view inflate到其他views当中，也是可能会发生的。<br>因此尽量保持你的视图tree：学习如何使用<a href="https://developer.android.com/guide/topics/ui/layout/relative.html" target="_blank" rel="noopener">RelativeLayout</a>, 如何 <a href="http://developer.android.com/training/improving-layouts/optimizing-layout.html" target="_blank" rel="noopener">optimize 你的布局</a> 和如何使用 <a href="http://stackoverflow.com/questions/8834898/what-is-the-purpose-of-androids-merge-tag-in-xml-layouts" target="_blank" rel="noopener"><merge> 标签</merge></a>.</p><h3 id="测试框架">测试框架</h3><p>Android SDK的测试框架还处于初级阶段，特别是关于UI测试方面。Android Gradle 目前实现了一个叫<a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Testing" target="_blank" rel="noopener">connectedAndroidTest</a>的测试， 它<a href="http://developer.android.com/reference/android/test/package-summary.html" target="_blank" rel="noopener">使用一个JUnit 为Android提供的扩展插件 extension of JUnit with helpers for Android</a>.可以跑你生成的JUnit测试，<br><strong>只当做单元测试时使用 <a href="http://robolectric.org/" target="_blank" rel="noopener">Robolectric</a> ，views 不用</strong> 它是一个最求提供”不连接设备的”为了加速开发的测试， 非常时候做 models 和 view models 的单元测试。 然而，使用Robolectric测试时不精确的，也不完全对UI测试。 当你对有关动画的UI元素、对话框等，测试时会有问题， 这主要是因为你是在 “在黑暗中工作”（在没有可控的界面情况下测试）</p><p><em>Robotium 使写UI测试非常简单。 </em> 对于UI测试你不需 Robotium 跑与设备连接的测试。 但它可能会对你有益，是因为它有许多来帮助类的获得和分析视图，控制屏幕。 测试用例看起来像这样简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">solo.sendKey(Solo.MENU);</span><br><span class="line">solo.clickOnText(<span class="string">"More"</span>); <span class="comment">// searches for the first occurence of "More" and clicks on it</span></span><br><span class="line">solo.clickOnText(<span class="string">"Preferences"</span>);</span><br><span class="line">solo.clickOnText(<span class="string">"Edit File Extensions"</span>);</span><br><span class="line">Assert.assertTrue(solo.searchText(<span class="string">"rtf"</span>));</span><br></pre></td></tr></table></figure></p><h3 id="模拟器">模拟器</h3><p>如果你全职开发Android App,那么买一个<a href="http://www.genymotion.com/" target="_blank" rel="noopener">Genymotion emulator</a>license吧。 Genymotion 模拟器运行更快的秒帧的速度，比起典型的AVD模拟器。他有演示你APP的工具，高质量的模拟网络连接，GPS位置，等等。它同时还有理想的连接测试。 你若涉及适配使用很多不同的设备，买一个Genymotion 版权是比你买很多真设备便宜多的。</p><p>注意：Genymotion模拟器没有装载所有的Google服务，如Google Play Store和Maps。你也可能需 要测试Samsung指定的API，若这样的话你还是需要购买一个真实的Samsung设备。</p><h3 id="混淆配置">混淆配置</h3><p><a href="http://proguard.sourceforge.net/" target="_blank" rel="noopener">ProGuard</a> 是一个在Android项目中广泛使用的压缩和混淆打包的源码的工具。</p><p>你是否使用ProGuard取决你项目的配置，当你构建一个release版本的apk时，通常你应该配置gradle文件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">    debug &#123;</span><br><span class="line">        minifyEnabled <span class="keyword">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    release &#123;</span><br><span class="line">        signingConfig signingConfigs.release</span><br><span class="line">        minifyEnabled <span class="keyword">true</span></span><br><span class="line">        proguardFiles <span class="string">'proguard-rules.pro'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了决定哪些代码应该被保留，哪些代码应该被混淆，你不得不指定一个或多个实体类在你的代码中。 这些实体应该是指定的类包含main方法，applets，midlets，activities，等等。 Android framework 使用一个默认的配置文件，可以在<code>SDK_HOME/tools/proguard/proguard-android.txt</code> 目录下找到。自定义的工程指定的 <code>project-specific</code> 混淆规则，如在<code>my-project/app/proguard-rules.pro</code>中定义， 会被添加到默认的配置中。</p><p>关于 ProGuard 一个普遍的问题，是看应用程序是否崩溃并报<code>ClassNotFoundException</code> 或者 <code>NoSuchFieldException</code> 或类似的异常， 即使编译是没有警告并运行成功。 这意味着以下两种可能：</p><ol><li>ProGuard 已经移除了类，枚举，方法，成员变量或注解，考虑是否是必要的。</li><li>ProGuard 混淆了类，枚举，成员变量的名称，但是这些名字又被拿原始名称使用了，比如通过Java的反射。</li></ol><p>检查<code>app/build/outputs/proguard/release/usage.txt</code>文件看有问题的对象是否被移除了。 检查 <code>app/build/outputs/proguard/release/mapping.txt</code> 文件看有问题的对象是否被混淆了。</p><p>In order to prevent ProGuard from stripping away needed classes or class members, add a keep options to your proguard config: 以防 ProGuard 剥离 需要的类和类成员，添加一个 <code>keep</code>选项在你的 proguard 配置文件中：<br><code>-keep class com.futurice.project.MyClass { *; }</code></p><p>防止 ProGuard 混淆 一些类和成员，添加 <code>keepnames</code>:<br><code>-keepnames class com.futurice.project.MyClass { *; }</code></p><p><strong>在构建项目之初，发布一个版本</strong> 来检查ProGuard规则是否正确的保持了重要的部分。 同时无论何时你添加了新的类库，做一个发布版本，同时apk在设备上跑起来测试一下。 不要等到你的app要发布 “1.0”版本了才做版本发布，那时候你可能会碰到好多意想不到的异常，需要一些时间去修复他们。</p><p><strong>Tips</strong>每次发布新版本都要写 mapping.txt。每发布一个版本，如果用户遇到一个bug，同时提交了一个混淆过的堆栈跟踪。 通过保留mapping.txt文件，来确定你可以调试的问题。</p><p><strong>DexGuard</strong> 若果你需要核心工具来优化，和专门混淆的发布代码，考虑使用<a href="http://www.saikoa.com/dexguard" target="_blank" rel="noopener">DexGuard</a>, 一个商业软件，ProGuard 也是有他们团队开发的。 它会很容易将Dex文件分割，来解决65K个方法限制问题。</p><h3 id="致谢">致谢</h3><p>感谢Antti Lammi, Joni Karppinen, Peter Tackage, Timo Tuominen, Vera Izrailit, Vihtori Mäntylä, Mark Voit, Andre Medeiros, Paul Houghton 这些人和Futurice 开发者分享他们的Android开发经验。</p><h3 id="License">License</h3><p><a href="https://github.com/futurice/android-best-practices/blob/master/translations/Chinese/www.futurice.com" target="_blank" rel="noopener">Futurice Oy</a> Creative Commons Attribution 4.0 International (CC BY 4.0)</p><h3 id="Translation">Translation</h3><p>Translated to Chinese by <a href="https://github.com/andyiac" target="_blank" rel="noopener">andyiac</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>夜深写算法系列</title>
      <link href="/2016/01/23/%E5%A4%9C%E6%B7%B1%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/"/>
      <url>/2016/01/23/%E5%A4%9C%E6%B7%B1%E5%86%99%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97/</url>
      <content type="html"><![CDATA[<h4 id="夜深写算法系列">夜深写算法系列</h4><p>蛮有意思的几个算法<br><a id="more"></a></p><ol><li><a href="http://www.cppblog.com/menjitianya/archive/2015/10/09/211980.html" target="_blank" rel="noopener">搜索入门</a></li><li><a href="http://www.cppblog.com/menjitianya/archive/2015/10/23/212084.html" target="_blank" rel="noopener">动态规划</a></li><li><a href="http://www.cppblog.com/menjitianya/archive/2015/11/02/212171.html" target="_blank" rel="noopener">树状数组</a></li><li><a href="http://www.cppblog.com/menjitianya/archive/2015/11/19/212292.html" target="_blank" rel="noopener">差分约束</a></li><li><a href="http://www.cppblog.com/menjitianya/archive/2015/12/02/212395.html" target="_blank" rel="noopener">初等数论</a></li><li><a href="http://www.cppblog.com/menjitianya/archive/2015/12/10/212447.html" target="_blank" rel="noopener">最近公共祖先</a></li></ol>]]></content>
      
      <categories>
          
          <category> Study Class </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Eclipse安装插件</title>
      <link href="/2016/01/21/Eclipse%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/"/>
      <url>/2016/01/21/Eclipse%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h4 id="Eclipse中添加web_dynamic_project">Eclipse中添加web dynamic project</h4><p>很多Eclipse版本是不能直接新建web dynamic project的，需要从网上找插件或更新。<br><a id="more"></a><br>我的Eclipse的版本是（Version: 4.5.1）代号为Mars<br>版本号和代号如下图<br><img src="/2016/01/21/Eclipse安装插件/version.png"><br>比较方便的是在Help → Install-New-Software<br><img src="/2016/01/21/Eclipse安装插件/add.png"><br>选择<code>Web</code>，<code>Xml</code>，<code>Java EE Development</code>，点击next，finish，更新一段时间，重启Eclipse就能在File→New→other中找到Web及其目录下的web dynamic project了。</p><p>在Eclipse配置tomcat的时候，我发现在Eclipse—Preferences—server—Runtime Environment中，点击“Add”按钮，里面看不到tomcat的，只有个“J2EE Runtime Library”。</p><p>解决办法：</p><ol><li>Help -&gt; Install New Software</li><li>Choose “Luna - <a href="http://download.eclipse.org/releases/Luna&quot;" target="_blank" rel="noopener">http://download.eclipse.org/releases/Luna&quot;</a> site</li><li>Expand “Web, XML, and Java EE Development”</li><li>Check JST Server Adapters (version 3.2.2) and  JST Server Adapters Extentions</li></ol><p>参考：<a href="https://www.wikiwand.com/zh/Eclipse#/.E7.89.88.E6.9C.AC" target="_blank" rel="noopener">Eclipse</a></p><h4 id="Eclipse配置文件导入和导出">Eclipse配置文件导入和导出</h4><p>导出配置</p><ol><li>设置好workspace配置后可以将配置保存为 *.epf 文件。</li><li>进入 File -&gt; Export ；</li><li>选择 General -&gt; Preferences ，下一步；</li><li>选择 Export all，在 To preference file 中输入要保存的路径和文件名；</li><li>Finish。</li></ol><p>导入配置</p><ol><li>将 *.epf 配置文件导入workspace。</li><li>进入 File -&gt; Export ；</li><li>选择 General -&gt; Preferences ，下一步；</li><li>选择 Import all，在 From Preference File 中选择 *.epf 文件；</li><li>Finish。</li></ol>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android Studio插件</title>
      <link href="/2016/01/20/Android-Studio%E6%8F%92%E4%BB%B6/"/>
      <url>/2016/01/20/Android-Studio%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h4 id="Android_Studio_实用插件推荐">Android Studio 实用插件推荐</h4><p><a href="http://www.jianshu.com/p/6f5f818afe4b?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="noopener">几款实用的Android Studio 插件</a><br><a id="more"></a></p><ol><li>android-butterknife-zelezny</li><li>Gsonformat</li><li>Android Postfix Completion</li><li>AndroidAccessors</li><li>Lifecycle Sorter</li><li>JsonOnlineViewer</li><li>CodeGlance</li><li>findBugs-IDEA</li><li>ADB WIFI</li></ol>]]></content>
      
      <categories>
          
          <category> Android Studio </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android Gson的使用</title>
      <link href="/2016/01/19/Android-Gson%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2016/01/19/Android-Gson%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="Gson的使用">Gson的使用</h4><p><a href="http://www.cnblogs.com/Jude95/p/Mr_Dentist.html" target="_blank" rel="noopener">Gson的使用</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android Material Design中文版</title>
      <link href="/2016/01/18/Android-Material-Design%E4%B8%AD%E6%96%87%E7%89%88/"/>
      <url>/2016/01/18/Android-Material-Design%E4%B8%AD%E6%96%87%E7%89%88/</url>
      <content type="html"><![CDATA[<h4 id="Material_Design中文版">Material Design中文版</h4><p><a href="http://wiki.jikexueyuan.com/project/material-design/material-design-intro/introduction.html" target="_blank" rel="noopener">Material Design中文版</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android6.0 新特性详解</title>
      <link href="/2016/01/17/Android6-0-%E6%96%B0%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3/"/>
      <url>/2016/01/17/Android6-0-%E6%96%B0%E7%89%B9%E6%80%A7%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h4 id="Android6-0_新特性详解">Android6.0 新特性详解</h4><p><a href="http://leanote.com/blog/post/561658f938f41126b2000298?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="noopener">Android6.0 新特性详解</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Gradle for Android系列</title>
      <link href="/2016/01/14/Gradle-for-Android%E7%B3%BB%E5%88%97/"/>
      <url>/2016/01/14/Gradle-for-Android%E7%B3%BB%E5%88%97/</url>
      <content type="html"><![CDATA[<h4 id="关于Android_Studio的Gradle_系列文章">关于Android Studio的Gradle 系列文章</h4><a id="more"></a><p><a href="http://segmentfault.com/a/1190000004229002" target="_blank" rel="noopener">Gradle for Android 第一篇( 从 Gradle 和 AS 开始 )</a><br><a href="http://segmentfault.com/a/1190000004234712?_ea=538654" target="_blank" rel="noopener">Gradle for Android 第二篇( Build.gradle入门 )</a><br><a href="http://segmentfault.com/a/1190000004237922" target="_blank" rel="noopener">Gradle for Android 第三篇( 依赖管理 )</a><br><a href="http://segmentfault.com/a/1190000004241503" target="_blank" rel="noopener">Gradle for Android 第四篇( 构建变体 )</a><br><a href="http://segmentfault.com/a/1190000004247809" target="_blank" rel="noopener">Gradle for Android 第五篇( 多模块构建 )</a><br><a href="http://segmentfault.com/a/1190000004260141" target="_blank" rel="noopener">Gradle for Android 第六篇( 测试)</a><br><a href="http://segmentfault.com/a/1190000004276167" target="_blank" rel="noopener">Gradle for Android 第七篇( Groovy入门 )</a></p><h4 id="用Gradle_构建你的android程序">用Gradle 构建你的android程序</h4><p><a href="http://www.cnblogs.com/youxilua/archive/2013/05/20/3087935.html" target="_blank" rel="noopener">用Gradle 构建你的android程序</a></p>]]></content>
      
      <categories>
          
          <category> Android Studio </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python安装pywin32问题</title>
      <link href="/2016/01/13/Python%E5%AE%89%E8%A3%85pywin32%E9%97%AE%E9%A2%98/"/>
      <url>/2016/01/13/Python%E5%AE%89%E8%A3%85pywin32%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h4 id="Python_version_2-7_required,_which_was_not_found_in_the_registry">Python version 2.7 required, which was not found in the registry</h4><a id="more"></a><p>新建一个register.py文件，把下列代码复制进去<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># script to register Python 2.0 or later for use with win32all</span></span><br><span class="line"><span class="comment"># and other extensions that require Python registry settings</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># written by Joakim Loew for Secret Labs AB / PythonWare</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># source:</span></span><br><span class="line"><span class="comment"># http://www.pythonware.com/products/works/articles/regpy20.htm</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># modified by Valentine Gogichashvili as described in http://www.mail-archive.com/distutils-sig@python.org/msg10512.html</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> _winreg <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"><span class="comment"># tweak as necessary</span></span><br><span class="line">version = sys.version[:<span class="number">3</span>]</span><br><span class="line">installpath = sys.prefix</span><br><span class="line"> </span><br><span class="line">regpath = <span class="string">"SOFTWARE\\Python\\Pythoncore\\%s\\"</span> % (version)</span><br><span class="line">installkey = <span class="string">"InstallPath"</span></span><br><span class="line">pythonkey = <span class="string">"PythonPath"</span></span><br><span class="line">pythonpath = <span class="string">"%s;%s\\Lib\\;%s\\DLLs\\"</span> % (</span><br><span class="line">    installpath, installpath, installpath</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RegisterPy</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        reg = OpenKey(HKEY_CURRENT_USER, regpath)</span><br><span class="line">    <span class="keyword">except</span> EnvironmentError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            reg = CreateKey(HKEY_CURRENT_USER, regpath)</span><br><span class="line">            SetValue(reg, installkey, REG_SZ, installpath)</span><br><span class="line">            SetValue(reg, pythonkey, REG_SZ, pythonpath)</span><br><span class="line">            CloseKey(reg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"*** Unable to register!"</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"--- Python"</span>, version, <span class="string">"is now registered!"</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (QueryValue(reg, installkey) == installpath <span class="keyword">and</span></span><br><span class="line">        QueryValue(reg, pythonkey) == pythonpath):</span><br><span class="line">        CloseKey(reg)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"=== Python"</span>, version, <span class="string">"is already registered!"</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    CloseKey(reg)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"*** Unable to register!"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"*** You probably have another Python installation!"</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    RegisterPy()</span><br></pre></td></tr></table></figure></p><p>输入如下的命令<br><img src="/2016/01/13/Python安装pywin32问题/1.png"></p><p>显示“python 2.7 is already registered”</p><p>再安装setuptools的时候，就能自动识别出来python2.7了。</p><p>win7是64位的原因，在安装python（32位）时，如果选择只为当前用户，以上问题是不会出现的，如果选择所有用户，那就用上面的方法解决。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python编码问题</title>
      <link href="/2016/01/13/Python%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2016/01/13/Python%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h4 id="Python编码的一点小问题">Python编码的一点小问题</h4><a id="more"></a><p><code>unicode</code>是一个字符集，它包含了（理论上）所有可能出现的文字和符号，每个符号都有一个对应的unicode值，叫做码点，对特定字符来说，这个码点是唯一，固定的<br><code>utf-xx</code>（比如utf-8，utf-16，utf-32等）是<code>unicode</code>码点的一种特定的编码方式，因为码点最终要以某种形式存在于内存或者文件中，所以必须指定一种编码方式来表示某个码点<br>同一个码点，用不同的编码方式，得到的结果是不同的<br><code>ASCII</code>编码和<code>Unicode</code>编码的区别：<code>ASCII</code>编码是1个字节，而<code>Unicode</code>编码通常是2个字节。而utf-16跟utf-8是平级的概念——都是<code>Unicode</code>的某种编码方式<br><code>gbk</code>，规定了（理论上）每个汉字在内存或者文件中的编码方式<br>而Unicode可以认为只是字符集，不限定编码规则<br>只是<code>gbk</code>和<code>utf-8</code>的前256个字符，都保持跟<code>ASCII</code>兼容</p><p>Python 2.x里</p><blockquote><p>   string decode –&gt; unicode string (utf16)<br>   unicode string encode –&gt; string</p></blockquote><p>Python 3.x里    </p><blockquote><p>   string (utf8) encode –&gt; byte string<br>   byte string decode –&gt; string</p></blockquote>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Python学习记录</title>
      <link href="/2016/01/11/Python%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2016/01/11/Python%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h4 id="Python学习记录">Python学习记录</h4><a id="more"></a><ol><li>用<code>，</code>表示一个空格</li><li>当你输入<code>name = raw_input()</code>并按下回车后，Python交互式命令行就在等待你的输入了。这时，你可以输入任意字符，然后按回车后完成输入。再次输入<code>name</code>则可以直接显示刚才输入的内容</li><li>以#开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。其他每一行都是一个语句，当语句以冒号“:”结尾时，缩进的语句视为代码块</li><li>数据类型：int， float， string</li><li>如果字符串内部既包含’又包含”怎么办？可以用转义字符\来标识</li><li>转义字符\可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code></li><li>如果字符串里面有很多字符都需要转义，就需要加很多<code>\</code>，为了简化，Python还允许用r<code>&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义</li><li>如果字符串内部有很多换行，用<code>\n</code>写在一行里不好阅读，为了简化，Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容</li><li><p>字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'A'</span>)</span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">65</span>)</span><br><span class="line"><span class="string">'A'</span></span><br></pre></td></tr></table></figure></li><li><p><code>len()</code>函数可以返回字符串的长度</p></li><li><p>由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure></li><li><p>%运算符就是用来格式化字符串的。在字符串内部，<code>%s</code>表示用字符串替换，<code>%d</code>表示用整数替换，有几个<code>%?</code>占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个<code>%?</code>，括号可以省略。<br>常见的占位符有：<br>%d    整数<br>%f    浮点数<br>%s    字符串<br>%x    十六进制整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello, %s'</span> % <span class="string">'world'</span></span><br><span class="line"><span class="string">'Hello, world'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hi, %s, you have $%d.'</span> % (<span class="string">'Michael'</span>, <span class="number">1000000</span>)</span><br><span class="line"><span class="string">'Hi, Michael, you have $1000000.'</span></span><br></pre></td></tr></table></figure></li><li><p>列出班里所有同学的名字，就可以用一个list表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line"><span class="comment">#显示某一个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">1</span>]</span><br><span class="line"><span class="string">'Bob'</span></span><br><span class="line"><span class="comment">#显示最后一个</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates[<span class="number">-1</span>]</span><br><span class="line"><span class="string">'Tracy'</span></span><br><span class="line"><span class="comment">#添加</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.append(<span class="string">'Adam'</span>)</span><br><span class="line"><span class="comment">#插入</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>classmates.insert(<span class="number">1</span>, <span class="string">'Jack'</span>)</span><br></pre></td></tr></table></figure></li></ol><p>要删除指定位置的元素，用<code>pop(i)</code>方法，其中i是索引位置</p><ol start="14"><li>一种有序列表叫元组：<code>tuple</code>。<code>tuple</code>和<code>list</code>非常类似，但是<code>tuple</code>一旦初始化就不能修改</li><li>Python的缩进规则，如果<code>if</code>语句判断是<code>True</code>，就把缩进的两行<code>print</code>语句执行了，否则，什么也不做。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'adult'</span></span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'teenager'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'kid'</span></span><br></pre></td></tr></table></figure></li></ol><p><code>elif</code>是<code>else if</code>的缩写<br><code>if</code>语句执行有个特点，它是从上往下判断，如果在某个判断上是<code>True</code>，把该判断对应的语句执行后，就忽略掉剩下的<code>elif</code>和<code>else</code>.</p><ol start="16"><li>求和<br><code>for</code>求和<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>):</span><br><span class="line">sum = sum + x</span><br><span class="line"><span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure></li></ol><p><code>while</code>求和<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">n = <span class="number">99</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    sum = sum + n</span><br><span class="line">    n = n - <span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> sum</span><br></pre></td></tr></table></figure></p><ol start="17"><li>从<code>raw_input()</code>读取的内容永远以字符串的形式返回</li><li>Python内置了字典：<code>dict</code>的支持，<code>dict</code>全称<code>dictionary</code>，在其他语言中也称为<code>map</code>，使用键-值（key-value）存储，具有极快的查找速度。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'Michael'</span>]</span><br><span class="line"><span class="number">95</span></span><br></pre></td></tr></table></figure></li></ol><p>要删除一个key，用<code>pop(key)</code>方法，对应的<code>value</code>也会从<code>dict</code>中删除：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.pop(<span class="string">'Bob'</span>)</span><br><span class="line"><span class="number">75</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>&#125;</span><br></pre></td></tr></table></figure></p><ol start="19"><li><code>set</code>和<code>dict</code>类似，也是一组<code>key</code>的集合，但不存储<code>value</code>。要创建一个set，需要提供一个list作为输入集合：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure></li></ol><p>传入的参数<code>[1, 2, 3]</code>是一个<code>list</code>，而显示的<code>set([1, 2, 3])</code>只是告诉你这个<code>set</code>内部有1，2，3这3个元素，显示的[]不表示这是一个list。<br>通过<code>add(key)</code>方法可以添加元素到set中,通过remove(key)方法可以添加元素到set中。<br>set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。</p><ol start="20"><li>Python的函数<img src="/2016/01/11/Python学习记录/function.png">比较函数<code>cmp(x, y)</code>就需要两个参数，如果<code>x&lt;y</code>，返回<code>-1</code>，如果<code>x==y</code>，返回<code>0</code>，如果<code>x&gt;y</code>，返回<code>1</code></li><li><p>Python内置的常用函数还包括数据类型转换函数，比如<code>int()</code>函数可以把其他数据类型转换为整数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="string">'123'</span>)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>int(<span class="number">12.34</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>float(<span class="string">'12.34'</span>)</span><br><span class="line"><span class="number">12.34</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(<span class="number">1.23</span>)</span><br><span class="line"><span class="string">'1.23'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>unicode(<span class="number">100</span>)</span><br><span class="line"><span class="string">u'100'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(<span class="string">''</span>)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>在Python中，定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></table></figure></li><li><p>如果想定义一个什么事也不做的空函数，可以用pass语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数<code>isinstance</code>实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, (int, float)):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></table></figure></li><li><p>定义可变参数和定义list或tuple参数相比，仅仅在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        sum = sum + n * n</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure></li><li><p>在Python中定义函数，可以用必选参数、默认参数、可变参数和关键字参数，这4种参数都可以一起使用，或者只用其中某些，但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数和关键字参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'a ='</span>, a, <span class="string">'b ='</span>, b, <span class="string">'c ='</span>, c, <span class="string">'args ='</span>, args, <span class="string">'kw ='</span>, kw</span><br></pre></td></tr></table></figure></li></ol><p>在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, x=<span class="number">99</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</span><br></pre></td></tr></table></figure></p><p>最神奇的是通过一个tuple和dict，你也可以调用该函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(*args, **kw)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="number">4</span>,) kw = &#123;<span class="string">'x'</span>: <span class="number">99</span>&#125;</span><br></pre></td></tr></table></figure></p><ol start="27"><li><p><code>&gt;&gt;&gt; L = [&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;, &#39;Bob&#39;, &#39;Jack&#39;]</code><br>取前三个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line"><span class="meta">... </span>    r.append(L[i])</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r</span><br><span class="line">[<span class="string">'Michael'</span>, <span class="string">'Sarah'</span>, <span class="string">'Tracy'</span>]</span><br></pre></td></tr></table></figure></li><li><p>默认情况下，dict迭代的是key。如果要迭代value，可以用<code>for value in d.itervalues()</code>，如果要同时迭代key和value，可以用<code>for k, v in d.iteritems()</code>。<br>如何判断一个对象是可迭代对象呢？方法是通过collections模块的Iterable类型判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="string">'abc'</span>, Iterable) <span class="comment"># str是否可迭代</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], Iterable) <span class="comment"># list是否可迭代</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(<span class="number">123</span>, Iterable) <span class="comment"># 整数是否可迭代</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p>列表生成式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>map()</code>函数接收两个参数，一个是函数，一个是序列，·<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的list返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x * x</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>map(f, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android Studio 调试技巧</title>
      <link href="/2016/01/10/Android-Studio-%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
      <url>/2016/01/10/Android-Studio-%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h4 id="Android_Studio小技巧">Android Studio小技巧</h4><a id="more"></a><p><a href="http://tianweishu.com/2015/12/21/android-studio-debug-tips-you-may-not-know/" target="_blank" rel="noopener">Android Studio你不知道的调试技巧</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error:Execution failed <span class="keyword">for</span> task <span class="string">':testcomment:transformClassesWithJarMergingForDebug'</span>.</span><br><span class="line">&gt; com<span class="selector-class">.android</span><span class="selector-class">.build</span><span class="selector-class">.api</span><span class="selector-class">.transform</span><span class="selector-class">.TransformException</span>: java<span class="selector-class">.util</span><span class="selector-class">.zip</span><span class="selector-class">.ZipException</span>: duplicate entry: com/avos/avoscloud/ArchiveRequestTaskController$<span class="number">1</span>.class</span><br></pre></td></tr></table></figure><p>是libs和maven仓库重复</p>]]></content>
      
      <categories>
          
          <category> Android Studio </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Git常用命令</title>
      <link href="/2016/01/09/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2016/01/09/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>####GIT常用的命令<br><a id="more"></a><br><img src="/2016/01/09/Git常用命令/1.png"></p><h5 id="一、新建仓库">一、新建仓库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h5 id="二、配置">二、配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">"[name]"</span></span><br><span class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure><h5 id="三、增改文件">三、增改文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h5 id="四、提交">四、提交</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h5 id="五、分支">五、分支</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h5 id="六、标签">六、标签</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h5 id="七、查看信息">七、查看信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h5 id="八、远程同步">八、远程同步</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h5 id="九、撤销">九、撤销</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复上一个commit的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br></pre></td></tr></table></figure><h5 id="十、其他">十、其他</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure><p><a href="https://github.com/mzkmzk/Read/blob/master/progit.md" target="_blank" rel="noopener">Git基础</a></p>]]></content>
      
      <categories>
          
          <category> GIT </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>RxJava开发精要</title>
      <link href="/2016/01/09/RxJava%E5%BC%80%E5%8F%91%E7%B2%BE%E8%A6%81/"/>
      <url>/2016/01/09/RxJava%E5%BC%80%E5%8F%91%E7%B2%BE%E8%A6%81/</url>
      <content type="html"><![CDATA[<p>####RxJava开发精要系列<br><a id="more"></a><br><a href="http://www.devtf.cn/?p=1221" target="_blank" rel="noopener">RxJava开发精要1-从.NET到RxJava</a><br><a href="http://www.devtf.cn/?p=1223" target="_blank" rel="noopener">RxJava开发精要2-为什么是Observables?</a><br><a href="http://www.devtf.cn/?p=1225" target="_blank" rel="noopener">RxJava开发精要3-向响应式世界问好</a><br><a href="http://www.devtf.cn/?p=1227" target="_blank" rel="noopener">RxJava开发精要4 – Observables过滤</a><br><a href="http://www.devtf.cn/?p=1231" target="_blank" rel="noopener">RxJava开发精要5 – Observables变换</a><br><a href="http://www.devtf.cn/?p=1233" target="_blank" rel="noopener">RxJava开发精要6 – Observables组合</a><br><a href="http://www.devtf.cn/?p=1235" target="_blank" rel="noopener">RxJava开发精要7 – Schedulers-解决Android主线程问题</a><br><a href="http://www.devtf.cn/?p=1237" target="_blank" rel="noopener">RxJava开发精要8 – 与REST无缝结合-RxJava和Retrofit</a></p><h4 id="给_Android_开发者的_RxJava_详解">给 Android 开发者的 RxJava 详解</h4><p>作者：<a href="http://https://github.com/rengwuxian" target="_blank" rel="noopener">抛物线</a><br><a href="http://gank.io/post/560e15be2dca930e00da1083?from=timeline&amp;hmsr=toutiao.io&amp;isappinstalled=0&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="noopener">给 Android 开发者的 RxJava 详解</a></p><h4 id="Architecting_Android_with_RxJava">Architecting Android with RxJava</h4><p>坐着：<a href="http://www.jianshu.com/users/df40282480b4/latest_articles" target="_blank" rel="noopener">小鄧子</a><br><a href="http://www.jianshu.com/p/943ceaccfdff" target="_blank" rel="noopener">Architecting Android with RxJava</a></p>]]></content>
      
      <categories>
          
          <category> Study Class </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Java回调机制</title>
      <link href="/2016/01/08/Javva%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6/"/>
      <url>/2016/01/08/Javva%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>####一个关于Java回调机制的小案例<br><a href="http://blog.csdn.net/xiaanming/article/details/8703708" target="_blank" rel="noopener">一个经典例子让你彻彻底底理解java回调机制</a></p>]]></content>
      
      <categories>
          
          <category> Study Class </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android-Context解释</title>
      <link href="/2016/01/06/Android-Context%E8%A7%A3%E9%87%8A/"/>
      <url>/2016/01/06/Android-Context%E8%A7%A3%E9%87%8A/</url>
      <content type="html"><![CDATA[<p>####Android中的Context解释<br><a id="more"></a><br>Android系统的上下文对象，即在Context中，Activity、Service、Application都是继承自Context。<br>Android应用程序会在如下所示的几个时间点创建应用上下文Context</p><ul><li>创建Application</li><li>创建Activity</li><li>创建Service</li></ul><p>由上可知，创建Context的时机就是在创建Context的实现类的时候。<br>应用程序第一次启动的时候，Android系统都会创建一个Application对象，同事创建Application Context，所有的组件都共同拥有这样一个Context对象，这个应用上下文对象贯穿整个应用进程的生命周期，为应用全局提供功能和环境支持。而创建Activity和Service组件时，系统也会给它们提供运行的上下文环境，即创建Activity实例、Service实例的Context对象。<br>在Activity中获取Context对象时，可以直接使用this，而在匿名内部类中，就必须指定XXXXActivity.this才可以获得该Activity的Context对象。也可以通过getApplicationContext()方法来获取整个App的Context，但是通过getApplicationContext()方法获得是整个应用的上下文引用，这个与某个组件的上下文引用，在某些时候还是有区别的。</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Linux知识点小结</title>
      <link href="/2016/01/06/Linux%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93/"/>
      <url>/2016/01/06/Linux%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>####关于Linux的一些小知识点<br><a id="more"></a><br><a href="https://blog.huachao.me/2016/1/Linux%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="noopener">Linux一些小知识点</a></p><p>$1 我的Linux需求</p><p>Linux博大精深。我只在此讨论一些我对线上Linux机器维护人员的基本需求，比如装机，加硬盘，配网络。只讨论CentOS 6，或者类似的RHEL，当然Ubuntu也可以此类推，但是一些新特性不予讨论，因为我不懂，比如CentOS 7的xfs不予讨论，并不是说xfs不好，而是以目前我的Linux水平需要更新很多xfs的知识，驾驭需要时间。CentOS 7将ifconfig，netstat等原来常用的命令也干掉了，用ip，lsof替换是更加好的工具，但是大部分的线上机器都应该还没有更新到CentOS 7。下面我们以CentOS 6作为基础，谈我认为最基本的4点。</p><p>$1.1 最小化安装</p><p>CentOS有一个minimal版本，相对于标准版去掉了很多Service，比如Network Manager，安装最小版本以后的网络配置是需要admin进行写配置文件的。我个人认为这样是比较好的，因为这样才能知道Linux内核真正关心的是哪些配置文件，直达核心。一些必要的监控工具，完全可以通过yum install来完成。作为线上机器，还是最小化安装，做到能不开的服务就不开，能关掉的端口就关掉，这样既能将宝贵的硬件资源留下来给应用程序，也能够做到更加的安全。</p><p>$1.2 足够安全</p><p>除了将能关的端口关掉，能不用的服务关掉以外，安全还需要做到特定的服务只能访问特定的内容。哪怕是root账户，不能访问的文件和文件夹还是不能访问，更加不能操作。开启SELinux以后，能够做到在不修改SELinux的情况下，指定的服务只能访问指定的资源。对于ssh要做到关闭账户密码登录，只能通过秘钥登录，这样在保证秘钥不被盗用的情况下是最安全的。</p><p>$1.3 资源按需调度</p><p>我们经常会遇到这样一个问题，假设将磁盘sda挂载到/var目录，但是由于log太多或者上传的文件等等其他因素将硬盘吃光了，再创建一块sdb磁盘就无法挂载到/var目录了，其实Linux自带的lvm已经解决了这个问题，并且CentOS默认就是用lvm来管理磁盘的。我们需要学会如何格式化一块硬盘为lvm，然后挂载到对应目录，在空间被吃光前能够添加一块硬盘就自动扩容。</p><p>$1.4 网络监控</p><p>Linux本地要利用好net_filter，也就是iptables，来规划服务哪些网络流量，抛弃哪些网络流量。以及在进行组网的时候需要用router来进行网关的创建，在遇到网络问题的时候通过netstat来查看网络访问异常。网络这块内容很多很杂，各种参数，TCP/IP协议栈等等，但是往往问题还就是出在网络这块，所以要给与高度的关注。</p><p>$2 Linux的理念与基础</p><p>小谈几点我对Linux的认识。</p><p>$2.1 Linux的文件系统</p><p>Linux将所有的事物都看成文件，这一点人尽皆知。我想说的是，除了传统的ext文件系统，Linux在抽象不同的资源的时候其实有各种不同的文件系统，都是从需求和使用出发，比如proc文件系统就是针对进程的抽象，使得修改对应进程的值就可以直接改变进程的行为。再比如，对于远程ssh登录的pts设备，Linux有对应的devpts文件系统。看下面表哥的type一栏。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">file_systemdir<span class="built_in">type</span>optionsdumppass</span><br><span class="line">/dev/mapper/VolGroup-lv_root/ext4defaults11</span><br><span class="line">UUID=xxx/bootext4defaults12</span><br><span class="line">/dev/mapper/VolGroup-lv_swapswapswapdefaults00</span><br><span class="line">tmpfs/dev/shmtmpfsdefaults00</span><br><span class="line">devpts/dev/ptdevptsgid=5,mod=62000</span><br><span class="line">sysfs/syssysfsdefaults00</span><br><span class="line">proc/procprocdefaults00</span><br></pre></td></tr></table></figure><p>$2.2 Linux的权限管理</p><p>Linux的-rwxrwxrwx权限管理也可谓人尽皆知，其实Linux自己也意识到了这样的权限管理所带来的一些局限性。首先rwx的权限管理是基于用户和组的，并且只是大致的分为owner|group|other这三类，无法再作更加细粒度的划分。有鉴于此，Linux目前默认是有ACL(Access Control List)管理的，所谓ACL就是能够提供更加细粒度的用户和组管理，比如可以明确哪个user可以有什么样的权限。如下示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">getfacl abc</span><br><span class="line"><span class="comment"># file: abc</span></span><br><span class="line"><span class="comment"># owner: someone</span></span><br><span class="line"><span class="comment"># group: someone</span></span><br><span class="line">user::rw-</span><br><span class="line">user:johny:r-x</span><br><span class="line">group::r--</span><br><span class="line">mask::r-x</span><br><span class="line">other::r--</span><br></pre></td></tr></table></figure><p>而SELinux提供了不基于用户与组的权限管理，SELinux是基于应用程序的，什么样的应用程序可以使用什么资源，对于这些资源这个应用程序能干嘛，这个就是SELinux的管理方式。</p><p>$2.3 Linux上的Service</p><p>Linux上的Service组织得非常清晰，/etc/init.d/里面包含了所有的Service启动脚本，对应的二进制文件在/usr/bin 、 /usr/sbin 、 /usr/local/bin等目录下，一般而言配置文件在/etc/app_name下，还有一个chkconfig的工具来管理各个runlevel下需要启动的Service。这样的约定俗成使得管理员在配置和使用的时候非常方便。Linux标准的Service都会将log记录到/var/log/messages中，使得系统管理员不需要翻阅各种log，直接在/var/log/messages中就可以找到绝大部分的log来判断当前系统是否正常。更甚者，syslogd被rsyslogd替换以后，可以将/var/log/messages中的内容通过UDP发送到远端用专业的log分析工具进行分析。我们需要学习Linux上Service的这些优秀的编程习惯和技巧。</p><p>$3 磁盘</p><p>根据$1中的需求，下面是我记录的一些基本的磁盘操作。</p><p>df -lah 查看磁盘的使用情况<br>fdisk -l 查看插入到磁盘驱动器中的硬盘; sd(a,b,c)(1,2,3)，其中a是第一块磁盘，b是第二块磁盘，1，2，3表示磁盘上的主分区，最多4个。用fdisk从磁盘创建分区并且格式化。<br>LVM(logical volume manager)，主要就是满足加硬盘就能直接写数据的功能，而不会出现磁盘满了，新的磁盘只能挂载其他目录的情况。lvm有几个概念，VG, PV。将磁盘lvm格式化，创建PV, 创建VG，将创建的PV加入VG，然后在VG中创建lvm，然后就可以动态增加大小了。注意，将磁盘格式化为lvm，但是lv的格式化需要用ext，然后才能mount上去。参考这篇文章CentOS 6 卷组挂载硬盘教程<br>mount -t type(ext4|nfs) /dev/sdxn /path/dir 来挂载。如果要重启生效，必须将挂载信息写入到/etc/fstab<br>磁盘IO效率(IOPS)需要用vmstat, top等工具来查看。和性能相关的调优和监控留待后续文章详述。<br>$4 网络</p><p>网络的坑很多，需要把网络搞通没个3，4年很难。下面从网络的配置文件着手，简单理一下网络方面的内容。网络最难的方面应该是如何搭建一个合理的高效的局域网或者城域网，这个需要有专业的网络知识。</p><p>$4.1 配置文件</p><p>/etc/hosts私有IP对应主机名<br>/etc/resolv.confnameserver DNS的IP<br>/etc/sysconfig/network其中NETWORKING=要不要有网络，HOSTNAME=主机名，NETWORKING_IPV6=支持ipv6否<br>/etc/sysconfig/network-scripts/ifcfg-xxx其中DEVICE=网卡代号，BOOTPROTO=是否使用dhcp，HWADDR，IPADDR，NETMASK，ONBOOT，GATEWAY<br>$4.2 与网络有关的一些命令</p><p>router -n查看路由的命令，特别是要看带G的，表示gateway，而带U的表示up。<br>netstat -anp查看所有启动的tcp,udp,unix stream的应用程序，以及他们的状态，具体可以参考TCP/IP,JavaSocket简单分析一文。<br>$5 安全</p><p>$5.1 PAM</p><p>PAM只需要简单了解就行，是一个可插拔的认证模块。我的理解是：开发Linux的极客们搞出来的可复用的一个组件。举个例子，现在有一个app，想要验证当前的登录用户是否有权限操作某个目录，那么在PAM里面有现成的模块，app只需要include这个模块，给出一个配置文件，就可以了。有一个非常好的关于PAM的视频教程，请看这里</p><p>PAM是应用程序用来进行身份验证的。早期的身份验证和应用程序本身耦合，后来把身份验证单独抽出来，通过PAM来进行管理<br>/etc/pam.d/xxx 是能用pam来进行管理的应用程序PAM设置，在安装应用程序的时候安装。/etc/security/mmm, /lib/security/pam_mmm是一套。<br>$5.2 SELinux</p><p>SELinux也有一个非常好的视频教程，请看这里</p><p>getenforce来查看SELinux是否被启用<br>/etc/sysconfig/selinux enforcing启用SELinux<br>SELinux对“运行程序”配置和检查其是否有权限操作“对象”（文件系统），而普通的ACL(rwx)就是根据文件所属owner及其组来判断。SELinux是看可执行文件的type和目录文件的type是否兼容，来决定可执行文件是否能操作资源<br>$5.3 防火墙</p><p>下面是学习时候的一些摘录。特别一点，要开启内核参数net.ipv4.ip_forward=1，在/etc/sysctl.conf文件中，用sysctl -p来保存。所谓ip_forward指的是内核提供的从一个iface到另外一个iface的IP包转发，比如将IP包从192.168.1.10的eth0转发到10.0.0.123的eth1上。防火墙配置是需要专业技能的。</p><p>tcp_wrapper需要libwrap.so的支持，可执行文件在ldd bin_file出来没有libwrap.so的，都不能用tcp_wrapper<br>iptables是按照规则进行短路判断的，即 满足条件1-&gt;执行action1-&gt;结束<br>iptables-save来更加清晰的查看<br>先删掉全部规则，然后添加，比较简单。添加的时候，先添加策略，再添加细部规则。一般来讲，我们需要关注的是filter这个表的INPUT与OUTPUT<br>iptables -A(I) INPUT(OUTPUT,FORWARD) -i(o) iface -p tcp(ump,imp,all) -s (!)source -d dest -j ACCEPT(REJECT,DROP), 还支持的参数 —dport —sport<br>$6 工具</p><p><a href="http://linuxtools-rst.readthedocs.org/zh_CN/latest/base/index.html" target="_blank" rel="noopener">一个好的Linux命令参考网站</a></p><p>$6.1 CPU</p><p>top 特别注意load<br>ps aux和ps -ef 特别注意进程状态<br>vmstat 1表示每秒采集一次<br>sar -u 1 查看所有cpu相关的运行时间<br>$6.2 Memory</p><p>free<br>vmstat 1 注意其中的swap ram block之间的关系<br>sar -r 1 内存使用率<br>sar -W 1 查看swap，查询是否由于内存不足产生大量内存交换<br>$6.3 IO</p><p>lsof -i:port 查询哪个进程占用了这个端口号<br>lsof -u username 用户打开的文件<br>lsof -p pid 进程打开的文件<br>杂项</p><p>关于安装好系统之后的运行脚本，这边有一个参考</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line"><span class="comment">#   author  huachao</span></span><br><span class="line"><span class="comment">#   date    2015-12-09</span></span><br><span class="line"><span class="comment">#   email   i@huachao.me</span></span><br><span class="line"><span class="comment">#   web     blog.huachao.me</span></span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line"></span><br><span class="line">flagFile=<span class="string">"/root/centos6-init.executed"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">precheck</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">"<span class="variable">$(whoami)</span>"</span> != <span class="string">"root"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"please run this script as root ."</span> &gt;&amp;2</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$flagFile</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"this script had been executed, please do not execute again!!"</span> &gt;&amp;2</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[31m WARNING! THIS SCRIPT WILL \033[0m\n"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[31m *1 update the system; \033[0m\n"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[31m *2 setup security permissions; \033[0m\n"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[31m *3 stop irrelevant services; \033[0m\n"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[31m *4 reconfig kernel parameters; \033[0m\n"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[31m *5 setup timezone and sync time periodically; \033[0m\n"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[31m *6 setup tcp_wrapper and netfilter firewall; \033[0m\n"</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\033[31m *7 setup vsftpd; \033[0m\n"</span></span><br><span class="line">    sleep 5</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">yum_update</span></span>()&#123;</span><br><span class="line">    yum -y update</span><br><span class="line">    <span class="comment">#update system at 5:40pm daily</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"40 3 * * * root yum -y update &amp;&amp; yum clean packages"</span> &gt;&gt; /etc/crontab</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">permission_config</span></span>()&#123;</span><br><span class="line">    <span class="comment">#chattr +i /etc/shadow</span></span><br><span class="line">    <span class="comment">#chattr +i /etc/passwd</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">selinux</span></span>()&#123;</span><br><span class="line">    sed -i <span class="string">'s/SELINUX=disabled/SELINUX=enforcing/g'</span> /etc/sysconfig/selinux</span><br><span class="line">    setenforce 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop_services</span></span>()&#123;</span><br><span class="line">    <span class="keyword">for</span> server <span class="keyword">in</span> `chkconfig --list |grep 3:on|awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        chkconfig --level 3 <span class="variable">$server</span> off</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span> server <span class="keyword">in</span> crond network rsyslog sshd iptables</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">       chkconfig --level 3 <span class="variable">$server</span> on</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">limits_config</span></span>()&#123;</span><br><span class="line">cat &gt;&gt; /etc/security/limits.conf &lt;&lt;EOF</span><br><span class="line">* soft nproc 65535</span><br><span class="line">* hard nproc 65535</span><br><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65535</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"ulimit -SH 65535"</span> &gt;&gt; /etc/rc.local</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sysctl_config</span></span>()&#123;</span><br><span class="line">sed -i <span class="string">'s/net.ipv4.tcp_syncookies.*$/net.ipv4.tcp_syncookies = 1/g'</span> /etc/sysctl.conf</span><br><span class="line">sed -i <span class="string">'s/net.ipv4.ip_forward.*$/net.ipv4.ip_forward = 1/g'</span> /etc/sysctl.conf</span><br><span class="line">cat &gt;&gt; /etc/sysctl.conf &lt;&lt;EOF</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 65536</span><br><span class="line">net.core.netdev_max_backlog =  32768</span><br><span class="line">net.core.somaxconn = 32768</span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line">net.ipv4.tcp_timestamps = 0</span><br><span class="line">net.ipv4.tcp_synack_retries = 2</span><br><span class="line">net.ipv4.tcp_syn_retries = 2</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_mem = 94500000 915000000 927000000</span><br><span class="line">net.ipv4.tcp_max_orphans = 3276800</span><br><span class="line">net.ipv4.ip_local_port_range = 1024  65535</span><br><span class="line">EOF</span><br><span class="line">sysctl -p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sshd_config</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> [ ! -f <span class="string">"/root/.ssh/id_rsa.pub"</span> ]; <span class="keyword">then</span></span><br><span class="line">    ssh-keygen -t rsa -P <span class="string">''</span> -f /root/.ssh/id_rsa</span><br><span class="line">    cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</span><br><span class="line">    chmod 600 /root/.ssh/authorized_keys</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#sed -i '/^#Port/s/#Port 22/Port 65535/g' /etc/ssh/sshd_config</span></span><br><span class="line">    sed -i <span class="string">'/^#UseDNS/s/#UseDNS no/UseDNS yes/g'</span> /etc/ssh/sshd_config</span><br><span class="line">    <span class="comment">#sed -i 's/#PermitRootLogin yes/PermitRootLogin no/g' /etc/ssh/sshd_config</span></span><br><span class="line">    sed -i <span class="string">'s/#PermitEmptyPasswords yes/PermitEmptyPasswords no/g'</span> /etc/ssh/sshd_config</span><br><span class="line">    sed -i <span class="string">'s/PasswordAuthentication yes/PasswordAuthentication no/g'</span> /etc/ssh/sshd_config</span><br><span class="line">    /etc/init.d/sshd restart</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">time_config</span></span>()&#123;</span><br><span class="line">    <span class="comment">#timezone</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"TZ='Asia/Shanghai'; export TZ"</span> &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Update time</span></span><br><span class="line">    <span class="keyword">if</span> [! -f <span class="string">"/usr/sbin/ntpdate"</span>]; <span class="keyword">then</span></span><br><span class="line">        yum -y install ntpdate</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    </span><br><span class="line">    /usr/sbin/ntpdate pool.ntp.org</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"30 3 * * * root (/usr/sbin/ntpdate pool.ntp.org &amp;&amp; /sbin/hwclock -w) &amp;&gt; /dev/null"</span> &gt;&gt; /etc/crontab</span><br><span class="line">    /sbin/service crond restart</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">iptables</span></span>()&#123;</span><br><span class="line">cat &gt; /etc/sysconfig/iptables &lt;&lt; EOF</span><br><span class="line"><span class="comment"># Firewall configuration written by system-config-securitylevel</span></span><br><span class="line"><span class="comment"># Manual customization of this file is not recommended.</span></span><br><span class="line">*filter</span><br><span class="line">:INPUT DROP [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">:syn-flood - [0:0]</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 100/sec --<span class="built_in">limit</span>-burst 100 -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 1/s --<span class="built_in">limit</span>-burst 10 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j syn-flood</span><br><span class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">-A syn-flood -p tcp -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 3/sec --<span class="built_in">limit</span>-burst 6 -j RETURN</span><br><span class="line">-A syn-flood -j REJECT --reject-with icmp-port-unreachable</span><br><span class="line">COMMIT</span><br><span class="line">EOF</span><br><span class="line">/sbin/service iptables restart</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">other</span></span>()&#123;</span><br><span class="line">    <span class="comment"># initdefault</span></span><br><span class="line">    sed -i <span class="string">'s/^id:.*$/id:3:initdefault:/'</span> /etc/inittab</span><br><span class="line">    /sbin/init q</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># PS1</span></span><br><span class="line">    <span class="comment">#echo 'PS1="\[\e[32m\][\[\e[35m\]\u\[\e[m\]@\[\e[36m\]\h \[\e[31m\]\w\[\e[32m\]]\[\e[36m\]$\[\e[m\]"' &gt;&gt; /etc/profile</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment"># Wrong password five times locked 180s</span></span><br><span class="line">    sed -i <span class="string">'4a auth        required      pam_tally2.so deny=5 unlock_time=180'</span> /etc/pam.d/system-auth</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">vsftpd_setup</span></span>()&#123;</span><br><span class="line">    yum -y install vsftpd</span><br><span class="line">    mv /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bak</span><br><span class="line">    touch /etc/vsftpd/chroot_list</span><br><span class="line">    setsebool -P ftp_home_dir=1</span><br><span class="line">cat &gt;&gt; /etc/vsftpd/vsftpd.conf &lt;&lt;EOF</span><br><span class="line"><span class="comment"># normal user settings</span></span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line">local_max_rate=10000000</span><br><span class="line"><span class="comment"># anonymous settings</span></span><br><span class="line">anonymous_enable=YES</span><br><span class="line">no_anon_password=YES</span><br><span class="line">anon_max_rate=1000000</span><br><span class="line">data_connection_timeout=60</span><br><span class="line">idle_session_timeout=600</span><br><span class="line"><span class="comment"># ssl settings</span></span><br><span class="line"><span class="comment">#ssl_enable=YES             </span></span><br><span class="line"><span class="comment">#allow_anon_ssl=NO           </span></span><br><span class="line"><span class="comment">#force_local_data_ssl=YES    </span></span><br><span class="line"><span class="comment">#force_local_logins_ssl=YES  </span></span><br><span class="line"><span class="comment">#ssl_tlsv1=YES               </span></span><br><span class="line"><span class="comment">#ssl_sslv2=NO</span></span><br><span class="line"><span class="comment">#ssl_sslv3=NO</span></span><br><span class="line"><span class="comment">#rsa_cert_file=/etc/vsftpd/vsftpd.pem </span></span><br><span class="line"><span class="comment"># server settings</span></span><br><span class="line">max_clients=50</span><br><span class="line">max_per_ip=5</span><br><span class="line">use_localtime=YES</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">listen=YES</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line"><span class="comment">#banner_file=/etc/vsftpd/welcome.txt</span></span><br><span class="line">dual_log_enable=YES</span><br><span class="line">pasv_min_port=65400</span><br><span class="line">pasv_max_port=65410</span><br><span class="line">EOF</span><br><span class="line">    chkconfig --level 3 vsftpd on</span><br><span class="line">    service vsftpd restart</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">    precheck</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"\033[32m================%40s================\033[0m\n"</span> <span class="string">"updating the system            "</span></span><br><span class="line">    yum_update</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"\033[32m================%40s================\033[0m\n"</span> <span class="string">"re-config permission           "</span></span><br><span class="line">    permission_config</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"\033[32m================%40s================\033[0m\n"</span> <span class="string">"enabling selinux               "</span></span><br><span class="line">    selinux</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"\033[32m================%40s================\033[0m\n"</span> <span class="string">"stopping irrelevant services   "</span></span><br><span class="line">    stop_services</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"\033[32m================%40s================\033[0m\n"</span> <span class="string">"/etc/security/limits.config    "</span></span><br><span class="line">    limits_config</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"\033[32m================%40s================\033[0m\n"</span> <span class="string">"/etc/sysctl.conf               "</span></span><br><span class="line">    sysctl_config</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"\033[32m================%40s================\033[0m\n"</span> <span class="string">"sshd re-configuring            "</span></span><br><span class="line">    sshd_config</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"\033[32m================%40s================\033[0m\n"</span> <span class="string">"configuring time               "</span></span><br><span class="line">    time_config</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"\033[32m================%40s================\033[0m\n"</span> <span class="string">"configuring firewall           "</span></span><br><span class="line"><span class="comment">#   iptables</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"\033[32m================%40s================\033[0m\n"</span> <span class="string">"someother stuff                "</span></span><br><span class="line">    other</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"\033[32m================%40s================\033[0m\n"</span> <span class="string">"done! rebooting                "</span></span><br><span class="line">    touch <span class="string">"<span class="variable">$flagFile</span>"</span></span><br><span class="line">    sleep 5</span><br><span class="line">    reboot</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>ADB的教程</title>
      <link href="/2016/01/05/ADB%E7%9A%84%E6%95%99%E7%A8%8B/"/>
      <url>/2016/01/05/ADB%E7%9A%84%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>####ADB教程</p><h5 id="什么是ADB">什么是ADB</h5><a id="more"></a><p>adb的全称为Android Debug Bridge，就是起到调试桥的作用。通过adb我们可以在Eclipse中方便通过DDMS来调试Android程序，说白了就是<code>debug</code>工具。adb的工作方式比较特殊，采用监听Socket TCP 5554等端口的方式让IDE和Qemu通讯，默认情况下adb会daemon相关的网络端口，所以当我们运行Android Studio或者Eclipse时adb进程就会自动运行。</p><p>#####如何找到ADB<br>可以在<code>Android SDK</code> 目录下<code>&lt;Android SDK&gt;/platform-tools folders</code>找到adb.exe或者下载<a href="http://adbshell.com/upload/adb.zip" target="_blank" rel="noopener">ADB Kits</a><br><a href="http://adbdriver.com/" target="_blank" rel="noopener">ADB Driver</a></p><p>在windows下调出CMD，<code>WIN + R</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;adb-path&gt; cd c:\Users\Linda\AppData\Local\Android\sdk\platform-tools\</span><br><span class="line"></span><br><span class="line">adb devices</span><br></pre></td></tr></table></figure></p><p>#####ADB的一些基本command<br><a href="http://adbshell.com/" target="_blank" rel="noopener">可以在这个网站进行查看</a><br><strong>ADB Debugging</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br><span class="line">adb forward</span><br><span class="line">adb <span class="keyword">kill</span>-<span class="keyword">server</span></span><br></pre></td></tr></table></figure></p><p><strong>Wireless</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="built_in">connect</span></span><br><span class="line">adb usb</span><br></pre></td></tr></table></figure></p><p><strong>Package Manager</strong><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb install</span><br><span class="line">adb uninstall</span><br><span class="line">adb <span class="keyword">shell</span><span class="bash"> pm list packages</span></span><br><span class="line"><span class="bash">adb shell pm path</span></span><br><span class="line"><span class="bash">adb shell pm clear</span></span><br></pre></td></tr></table></figure></p><p><strong>File Manager</strong><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">adb pull</span><br><span class="line">adb push</span><br><span class="line">adb <span class="keyword">shell</span><span class="bash"> ls</span></span><br><span class="line"><span class="bash">adb shell <span class="built_in">cd</span></span></span><br><span class="line"><span class="bash">adb shell rm</span></span><br><span class="line"><span class="bash">adb shell mkdir</span></span><br><span class="line"><span class="bash">adb shell touch</span></span><br><span class="line"><span class="bash">adb shell <span class="built_in">pwd</span></span></span><br><span class="line"><span class="bash">adb shell cp</span></span><br><span class="line"><span class="bash">adb shell mv</span></span><br></pre></td></tr></table></figure></p><p><strong>Network</strong><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="bash"> netstat</span></span><br><span class="line"><span class="bash">adb shell ping</span></span><br><span class="line"><span class="bash">adb shell netcfg</span></span><br><span class="line"><span class="bash">adb shell ip</span></span><br></pre></td></tr></table></figure></p><p><strong>Logcat</strong><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb logcat</span><br><span class="line">adb <span class="keyword">shell</span><span class="bash"> dumpsys</span></span><br><span class="line"><span class="bash">adb shell dumpstate</span></span><br></pre></td></tr></table></figure></p><p><strong>Screenshot</strong><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="bash"> screencap</span></span><br><span class="line"><span class="bash">adb shell screenrecord [4.4+]</span></span><br></pre></td></tr></table></figure></p><p><strong>System</strong><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb sideload</span><br><span class="line">adb <span class="keyword">shell</span><span class="bash"> ps</span></span><br><span class="line"><span class="bash">adb shell top</span></span><br><span class="line"><span class="bash">adb shell getprop</span></span><br><span class="line"><span class="bash">adb shell setprop</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Study Class </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Chrome插件开发入门教程</title>
      <link href="/2015/12/30/Chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2015/12/30/Chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>####Chrome插件开发，只要你敢露我就敢抓<br><a id="more"></a><br><a href="http://forevernull.com/2015/12/04/chrome-extension-develop/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="noopener">Chrome插件开发，只要你敢露我就敢抓</a><br>全文简单介绍了Chrome插件开发的简单教程，需要js基础。</p>]]></content>
      
      <categories>
          
          <category> Study Class </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android知识清单</title>
      <link href="/2015/12/28/Android%E7%9F%A5%E8%AF%86%E6%B8%85%E5%8D%95/"/>
      <url>/2015/12/28/Android%E7%9F%A5%E8%AF%86%E6%B8%85%E5%8D%95/</url>
      <content type="html"><![CDATA[<p>##Android 岗知识点清单<br><a id="more"></a><br><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=402135493&amp;idx=1&amp;sn=c2e040f95551082cbe2bdf7182dc3e9f#rd" target="_blank" rel="noopener">如何自学Android编程？</a></p><p>###Java</p><ol><li>什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？</li><li>2.JDK和JRE的区别是什么？</li><li>“static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？</li><li>Java支持的数据类型有哪些？什么是自动拆装箱？</li><li>Java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思？</li><li>Java支持多继承么？如果不支持，如何实现</li><li>什么是值传递和引用传递？</li><li>进程和线程的区别是什么？</li><li>创建线程有几种不同的方式？哪种更好？为什么?</li><li>概括的解释下线程的几种可用状态</li><li>HashMap和Hashtable有什么区别？</li><li>java中的HashMap的工作原理是什么？</li><li>java中的四种引用</li><li>JVM内存分区，每个区的作用是什么?</li><li>java垃圾收集机制？收集方法?</li><li>Java接口与抽象类的区别，能否在接口中声明final方法、为什么</li><li>java类加载过程？解释双亲委派模型</li><li>java内存模型</li><li>什么是反射，反射机制</li><li>java泛型、泛型与类型擦除</li><li>java中的四大特性</li><li>volatile 变量和 atomic 变量有什么不同？</li><li>ThrealLocal是什么，原理</li><li>Thread 类中的 start () 和 run () 方法有什么区别？</li><li>java JNI相关</li><li>线程同步的方法有哪些</li><li>java socket编程</li><li>Callable和Runnable的区别</li><li>ConcurrentHashMap原理</li><li>线程池的概念、好处、常见的线程池举例</li><li>原子性与可见性</li><li>如何判断一个对象是否存活</li><li>java IO，NIO<blockquote><p>《java编程思想》</p></blockquote>###Android</li><li>安卓中的四大组件</li><li>android中的五种布局，原理</li><li>android中的动画有哪几种，区别</li><li>android种有哪几种解析xml的方式，原理，区别</li><li>android中解析json方法，原理，区别</li><li>为什么现在以json数据格式居多</li><li>listview优化方法</li><li>数据存储方式</li><li>四种启动模式</li><li>activity,fragment生命周期</li><li>广播机制，注册方式有哪些，顺序广播和无序广播</li><li>Message+Handler+Looper</li><li>MVC，MVP android中应用 区别</li><li>什么是ANR 什么情况下会出现ANR，如何避免</li><li>什么情况下会导致，Force Close 如何避免</li><li>描述android系统架构</li><li>android中webview</li><li>AIDL是什么 如何工作</li><li>dvm虚拟机</li><li>IPC进程间通信</li><li>NDK开发</li><li>内存泄露与优化</li><li>电量优化</li><li>AsyncTask AsyncTask相对于java自带的线程池的好处</li><li>android 事件分发机制</li><li>什么是OOM，如何避免</li><li>android中如何传递数据，有哪几种方式<blockquote><p>谷歌官方最好，最全，也最权威</p></blockquote>###数据结构与算法</li><li>九个排序算法，时间复杂度，什么情况下用哪种排序。</li><li>链表</li><li>栈</li><li>队列</li><li>二叉树，遍历方式的实现，递归与非递归版</li><li>图：BFS，DFS，最短路径等</li><li>字符串匹配，kmp算法</li><li>二分查找，hash表<blockquote><p>理解数据结构原理后，多做题，剑指offer，程序员面试宝典等</p></blockquote>###计算机网络</li><li>tcp三次握手，四次挥手（常问）</li><li>tcp可靠原理，流量控制，拥塞控制</li><li>tcp，udp原理</li><li>OSI分层与TCP/P分层,每层作用</li><li>解释ARP,ICMP</li><li>DNS域名解析</li><li>交换机，网关，路由器概念，作用</li><li>TCP连接管理，优化</li><li>Http请求头，请求报文，相应报文，状态码及含义</li><li>IP地址的分类，无分类CIDR，划分子网，ip数据报格式，ip网络地址及广播地址的计算（笔试常考）</li><li>说一下在浏览器输入<a href="http://www.xxx.com背后的原理(dns,http,tcp相关知识)" target="_blank" rel="noopener">www.xxx.com背后的原理(dns,http,tcp相关知识)</a></li><li>URI与URL</li><li>web缓存，代理，https等（了解）</li><li>Http怎么处理长连接，http有无状态，如何保持状态</li><li>Cookie和Session(知道最好)<blockquote><p>参考书籍《计算机网络》、《HTTP权威指南》</p></blockquote>###操作系统</li><li>死锁的必要条件，怎么处理死锁。</li><li>进程的几种状态</li><li>IPC几种通信方式。</li><li>什么是虚拟内存。</li><li>虚拟地址、逻辑地址、线性地址、物理地址的区别</li><li>内存管理方式</li><li>进程调度的一些算法策略</li><li>了解linux吗，linux常用命令，内核原理<blockquote><p>《深入理解操作系统》</p></blockquote></li></ol>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Sublime Text3</title>
      <link href="/2015/11/09/Sublime-Text3/"/>
      <url>/2015/11/09/Sublime-Text3/</url>
      <content type="html"><![CDATA[<p>####Sublime Text3 快捷键<br><a id="more"></a></p><ul><li>Ctrl+D 选词 （反复按快捷键，即可继续向下同时选中下一个相同的文本进行同时编辑）</li><li>Ctrl+G 跳转到相应的行</li><li>Ctrl+J 合并行（已选择需要合并的多行时）</li><li>Ctrl+L 选择整行（按住-继续选择下行）</li><li>Ctrl+M 光标移动至括号内开始或结束的位置</li><li>Ctrl+T 词互换</li><li>Ctrl+U 软撤销</li><li>Ctrl+P 查找当前项目中的文件和快速搜索；输入 @ 查找文件主标题/函数；或者输入 : 跳转到文件某行；</li><li>Ctrl+R 快速列出/跳转到某个函数</li><li>Ctrl+K Backspace 从光标处删除至行首</li><li>Ctrl+K+B 开启/关闭侧边栏</li><li>Ctrl+KK 从光标处删除至行尾</li><li>Ctrl+K+T 折叠属性</li><li>Ctrl+K+U 改为大写</li><li>Ctrl+K+L 改为小写</li><li>Ctrl+K+0 展开所有</li><li>Ctrl+Enter 插入行后（快速换行）</li><li>Ctrl+Tab 当前窗口中的标签页切换</li></ul><ul><li>Ctrl+Shift+A 选择光标位置父标签对儿</li><li>Ctrl+Shift+D 复制光标所在整行，插入在该行之前</li><li>ctrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找</li><li>Ctrl+Shift+K 删除整行</li><li>Ctrl+Shift+L 鼠标选中多行（按下快捷键），即可同时编辑这些行</li><li>Ctrl+Shift+M 选择括号内的内容（按住-继续选择父括号）</li><li>Ctrl+Shift+P 打开命令面板</li><li>Ctrl+Shift+/ 注释已选择内容</li><li>Ctrl+Shift+↑可以移动此行代码，与上行互换</li><li>Ctrl+Shift+↓可以移动此行代码，与下行互换</li><li>Ctrl+Shift+[ 折叠代码</li><li>Ctrl+Shift+] 展开代码</li><li>Ctrl+Shift+Enter 光标前插入行</li></ul><ul><li>Ctrl+PageDown 、Ctrl+PageUp 文件按开启的前后顺序切换</li></ul><ul><li>Ctrl+Z 撤销</li><li>Ctrl+Y 恢复撤销</li><li>Ctrl+F2 设置/取消书签</li><li>Ctrl+/ 注释整行（如已选择内容，同“Ctrl+Shift+/”效果）</li><li>Ctrl+鼠标左键 可以同时选择要编辑的多处文本</li></ul><ul><li>Shift+鼠标右键（或使用鼠标中键）可以用鼠标进行竖向多行选择</li><li>Shift+F2 上一个书签</li><li>Shift+Tab 去除缩进</li><li>Alt+Shift+1（非小键盘）窗口分屏，恢复默认1屏</li><li>Alt+Shift+2 左右分屏-2列</li><li>Alt+Shift+3 左右分屏-3列</li><li>Alt+Shift+4 左右分屏-4列</li><li>Alt+Shift+5 等分4屏</li><li>Alt+Shift+8 垂直分屏-2屏</li><li>Alt+Shift+9 垂直分屏-3屏</li></ul><ul><li>Ctrl+Shift+分屏序号 将当前焦点页分配到分屏序号页</li></ul><ul><li>Alt+. 闭合当前标签</li><li>Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑</li></ul><ul><li>Tab 缩进 自动完成</li><li>F2 下一个书签</li><li>F6 检测语法错误</li><li>F9 行排序(按a-z)</li></ul><p>####sublime text修改TAB缩进为空格</p><p>在sublime text中将TAB缩进直接转化为4个空格，可以按照如下方式操作：</p><p>菜单栏: Preferences -&gt; Settings – More -&gt; Syntax Specific – User</p><p>然后添加设置代码就可以了，文件保存在$Packages/User下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tab_size"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"translate_tabs_to_spaces"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Soft </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>HTTP</title>
      <link href="/2015/10/21/HTTP/"/>
      <url>/2015/10/21/HTTP/</url>
      <content type="html"><![CDATA[<p>####所有 HTTP 状态代码及其定义。<br><a id="more"></a><br>代码 指示<br>2xx 成功<br>200 正常；请求已完成。<br>201 正常；紧接 POST 命令。<br>202 正常；已接受用于处理，但处理尚未完成。<br>203 正常；部分信息 — 返回的信息只是一部分。<br>204 正常；无响应 — 已接收请求，但不存在要回送的信息。<br>206 正常；代表数据的分段传输<br>3xx 重定向<br>301 已移动 — 请求的数据具有新的位置且更改是永久的。<br>302 已找到 — 请求的数据临时具有不同 URI。<br>303 请参阅其它 — 可在另一 URI 下找到对请求的响应，且应使用 GET 方法检索此响应。<br>304 未修改 — 未按预期修改文档。<br>305 使用代理 — 必须通过位置字段中提供的代理来访问请求的资源。<br>306 未使用 — 不再使用；保留此代码以便将来使用。<br>4xx 客户机中出现的错误<br>400 错误请求 — 请求中有语法问题，或不能满足请求。<br>401 未授权 — 未授权客户机访问数据。<br>402 需要付款 — 表示计费系统已有效。<br>403 禁止 — 即使有授权也不需要访问。<br>404 找不到 — 服务器找不到给定的资源；文档不存在。<br>407 代理认证请求 — 客户机首先必须使用代理认证自身。<br>415 介质类型不受支持 — 服务器拒绝服务请求，因为不支持请求实体的格式。<br>5xx 服务器中出现的错误<br>500 内部错误 — 因为意外情况，服务器不能完成请求。<br>501 未执行 — 服务器不支持请求的工具。<br>502 错误网关 — 服务器接收到来自上游服务器的无效响应。<br>503 无法获得服务 — 由于临时过载或维护，服务器无法处理请求。</p><p>HTTP 400 - 请求无效<br>HTTP 401.1 - 未授权：登录失败<br>HTTP 401.2 - 未授权：服务器配置问题导致登录失败<br>HTTP 401.3 - ACL 禁止访问资源<br>HTTP 401.4 - 未授权：授权被筛选器拒绝<br>HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败<br>HTTP 403 - 禁止访问<br>HTTP 403 - 对 Internet 服务管理器 (HTML) 的访问仅限于 Localhost<br>HTTP 403.1 禁止访问：禁止可执行访问<br>HTTP 403.2 - 禁止访问：禁止读访问<br>HTTP 403.3 - 禁止访问：禁止写访问<br>HTTP 403.4 - 禁止访问：要求 SSL<br>HTTP 403.5 - 禁止访问：要求 SSL 128<br>HTTP 403.6 - 禁止访问：IP 地址被拒绝<br>HTTP 403.7 - 禁止访问：要求客户证书<br>HTTP 403.8 - 禁止访问：禁止站点访问<br>HTTP 403.9 - 禁止访问：连接的用户过多<br>HTTP 403.10 - 禁止访问：配置无效<br>HTTP 403.11 - 禁止访问：密码更改<br>HTTP 403.12 - 禁止访问：映射器拒绝访问<br>HTTP 403.13 - 禁止访问：客户证书已被吊销<br>HTTP 403.15 - 禁止访问：客户访问许可过多<br>HTTP 403.16 - 禁止访问：客户证书不可信或者无效<br>HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效<br>HTTP 404.1 - 无法找到 Web 站点<br>HTTP 404 - 无法找到文件<br>HTTP 405 - 资源被禁止<br>HTTP 406 - 无法接受<br>HTTP 407 - 要求代理身份验证<br>HTTP 410 - 永远不可用<br>HTTP 412 - 先决条件失败<br>HTTP 414 - 请求 - URI 太长<br>HTTP 500 - 内部服务器错误<br>HTTP 500.100 - 内部服务器错误 - ASP 错误<br>HTTP 500-11 服务器关闭<br>HTTP 500-12 应用程序重新启动<br>HTTP 500-13 - 服务器太忙<br>HTTP 500-14 - 应用程序无效<br>HTTP 500-15 - 不允许请求 global.asa<br>Error 501 - 未实现<br>HTTP 502 - 网关错误</p>]]></content>
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Google play and something</title>
      <link href="/2015/10/10/Google-play-and-something/"/>
      <url>/2015/10/10/Google-play-and-something/</url>
      <content type="html"><![CDATA[<p>#####1、google play连接不上<br><a id="more"></a><br>在挂好VPN之后，浏览器可以正常访问外网，只有Google Play打开之后显示无连接。<br><b>解决方案</b>hosts文件有问题，在/etc/目录下面（需要root权限）找到hosts文件，用文本编辑器打开，删除127.0.0.1 Iocalhosts以外的所有内容后保存。</p>]]></content>
      
      <categories>
          
          <category> Google </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android Studio的Gradle的加速</title>
      <link href="/2015/10/08/Android-Studio%E7%9A%84Gradle%E7%9A%84%E5%8A%A0%E9%80%9F/"/>
      <url>/2015/10/08/Android-Studio%E7%9A%84Gradle%E7%9A%84%E5%8A%A0%E9%80%9F/</url>
      <content type="html"><![CDATA[<p>#####Android Studio和Gradle加速运行<br><a id="more"></a><br>Gradle的速度在win下真心惨不忍睹，除了加大内存和上SSD，也可以试试如下方法。<br><b>1、修改 studio.xxx.vmoptions文件。</b><br>路径在<code>C:\android-studio\bin</code>安装目录下的bin文件夹下。<br><img src="/2015/10/08/Android-Studio的Gradle的加速/1.jpg"><br>如图，扩大启动和运行的内存。</p><p><b>2、让Gradle离线运行</b><br>在Android Studio的setting中搜索Gradle，如图<br><img src="/2015/10/08/Android-Studio的Gradle的加速/2.jpg"></p><h6 id="Android_Studio加速">Android Studio加速</h6><p>Android Studio是个一个很好的的Android开发平台，但是却比Eclipse更加吃配置，以下的几个方法可以提速</p><ul><li>一次只打开一个工程</li><li>每次运行过模拟器之后，清理一下工程</li><li>使用真机代替模拟器</li><li>使用一次模拟器之后不要关闭，每次使用同一个模拟器来运行软件</li><li>在<code>File-&gt;Settings-&gt;Plugins and disable the following things</code>这个路径，把以下插件禁止了<ul><li>1.CVS Integration<br>  2.Git Integration<br>3.GitHub<br>4.Google Cloud Tools for Android Studio<br>5.Subversion Integration</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> Android Studio </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android toolbar</title>
      <link href="/2015/09/26/Android-toolbar/"/>
      <url>/2015/09/26/Android-toolbar/</url>
      <content type="html"><![CDATA[<p>####ToolBar<br><a id="more"></a><br>Android在5.0之后引入了toolbar来替换actionbar，增加其灵活性。<br>在Android Studio新建工程之后，添加设计类库<code>compile &#39;com.android.support:design:23.0.1&#39;</code>和<code>compile &#39;com.android.support:appcompat-v7:23.0.1&#39;</code>的依赖，可以直接通过Gradle来添加。<br><b>1、添加主题文件</b><br>在style文件下两种主题文件，分别对应5.0之前的版本和5.0之后的版本。<br><code>style</code>5.0之前的版本<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.NoActionBar"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.AppBarOverlay"</span> <span class="attr">parent</span>=<span class="string">"ThemeOverlay.AppCompat.Dark.ActionBar"</span> /&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.PopupOverlay"</span> <span class="attr">parent</span>=<span class="string">"ThemeOverlay.AppCompat.Light"</span> /&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>5.0及以后的版本<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.NoActionBar"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.AppBarOverlay"</span> <span class="attr">parent</span>=<span class="string">"ThemeOverlay.AppCompat.Dark.ActionBar"</span> /&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.PopupOverlay"</span> <span class="attr">parent</span>=<span class="string">"ThemeOverlay.AppCompat.Light"</span> /&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><b>2、添加布局文件</b><br>在layout的文件夹下面先添加一个<code>content_main.xml</code>代码如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:showIn</span>=<span class="string">"@layout/activity_main"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Hello World!"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>之后再添加一个<code>activity_main.xml</code>来承载toolbar、floatingAcitonButton和content-main<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/content_main"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fab"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|end"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"@dimen/fab_margin"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@android:drawable/ic_input_add"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><b>3、添加主Activity</b><br>新建<code>MainActivity.java</code>文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.design.widget.FloatingActionButton;</span><br><span class="line"><span class="keyword">import</span> android.support.design.widget.Snackbar;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</span><br><span class="line">        setSupportActionBar(toolbar);</span><br><span class="line"></span><br><span class="line">        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</span><br><span class="line">        fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                Snackbar.make(view, <span class="string">"Replace with your own action"</span>, Snackbar.LENGTH_LONG).setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><b>4、运行结果如下图</b><br>&lt;% asset_img toolbar.jpg %&gt;</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>小工具</title>
      <link href="/2015/09/25/%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/2015/09/25/%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p>好用的小工具<br><a id="more"></a></p><p> ####<a href="https://github.com/jiacai2050/gooreplacer4chrome#install" target="_blank" rel="noopener">Goreplacer</a><br> gooreplacer 是一款能够自动替换掉网页中的 Google fonts、apis、themes 为中国科学技术大学镜像资源的 Chrome、Firefox 扩展，瞬间提高网页加载速度。<br> 这是一个很奇葩的应用，因为正常情况下这些资源本身就是用来减少网络带宽提高网页浏览速度的，但由于封锁，便利变成了麻烦。绝大多数国内网站已经被训练的不使用国际服务了，但很多主流网站都使用这些服务，gooreplacer 主要替换以下内容：<br> <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fonts<span class="selector-class">.googleapis</span><span class="selector-class">.com</span> ————–&gt; fonts<span class="selector-class">.lug</span><span class="selector-class">.ustc</span><span class="selector-class">.edu</span><span class="selector-class">.cn</span></span><br><span class="line">ajax<span class="selector-class">.googleapis</span><span class="selector-class">.com</span> —————&gt; ajax<span class="selector-class">.lug</span><span class="selector-class">.ustc</span><span class="selector-class">.edu</span><span class="selector-class">.cn</span></span><br><span class="line">themes<span class="selector-class">.googleusercontent</span><span class="selector-class">.com</span> –&gt; google-themes<span class="selector-class">.lug</span><span class="selector-class">.ustc</span><span class="selector-class">.edu</span><span class="selector-class">.cn</span></span><br><span class="line">fonts<span class="selector-class">.gstatic</span><span class="selector-class">.com</span> —————–&gt; fonts-gstatic<span class="selector-class">.lug</span><span class="selector-class">.ustc</span><span class="selector-class">.edu</span><span class="selector-class">.cn</span></span><br></pre></td></tr></table></figure></p><p>用了这个，chrome打开本地的doc文件也流畅了很多。</p><p>####<a href="http://cn.ejie.me/" target="_blank" rel="noopener">Clover</a></p><p>Clover 是 Windows Explorer 资源管理器的一个扩展，为其增加类似谷歌 Chrome 浏览器的多标签页功能。<br><img src="/2015/09/25/小工具/clover.jpg"></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">方便的 <span class="keyword">Tab</span> 页功能</span><br><span class="line"></span><br><span class="line">要掌握功能强大，操作简单的标签页，只需记住Ctrl+T新开页面，Ctrl+W关闭页面，Ctrl+<span class="keyword">Tab</span>切换页面，工作效率提高何止一倍！</span><br><span class="line"></span><br><span class="line">操作系统无缝集成</span><br><span class="line"></span><br><span class="line">Clover 通过插件的形式集成到 Windows Explorer，保留您通常的使用习惯，无需学习新的文件管理操作，马上就可以使用啦。</span><br><span class="line"></span><br><span class="line">快如闪电的书签栏</span><br><span class="line"></span><br><span class="line">按Ctrl+<span class="keyword">D</span>添加当前路径，或者直接将文件夹拖入书签栏。再也不用到处寻找要访问的文件夹了，瞬间到达，何等痛快！</span><br></pre></td></tr></table></figure><p>####<a href="http://www.xmindchina.net/" target="_blank" rel="noopener">XMind7</a><br><img src="/2015/09/25/小工具/xmind.png"><br>Mind采用Java语言开发，具备跨平台运行的性质，且基于EclipseRCP体系结构，可支持插件，插件通过编写XML清单文件可以扩展系统定义好的扩展点。XMind的程序主体由一组插件构成，包括一个核心主程序插件、一组Eclipse运行时插件、一个帮助文档插件和一组多语种资源文件插件。Eclipse用户会对它的界面非常亲切。<br>最新的是XMind7，该软件有免费的版本，功能对比如下<br><img src="/2015/09/25/小工具/xmind_founction.png"></p>]]></content>
      
      <categories>
          
          <category> Soft </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android-四大组件的简介</title>
      <link href="/2015/09/03/Android-%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E7%9A%84%E7%AE%80%E4%BB%8B/"/>
      <url>/2015/09/03/Android-%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E7%9A%84%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>Android四大组件<br><a id="more"></a></p><p>####1、Activity<br>Activity是Android应用中负责与用户交互的组件，为其提供了可视化用户界面，如果Activity应用需要多个应用界面，那么这个Activity应用将会包含多个Activity，多个Activity组成Activity栈，当前活动的Activity位于栈顶。</p><p>####2、Service<br>Service与Activity的地位是并列的，它也代表一个单独的Android组件。Service与Activity的区别在于：Service通常位于后台运行，它一般不需要与用户交互，因此Servcie组件没有图形用户界面。与Activity组件需要继承Acitivity基类相似，Service组件需要继承Service基类。拥有自己的生命周期，通常为其他组件提供后台服务或监控其他组件的运行状态。</p><p>####3、BroadcastReceiver<br>BroadcastReceivr代表广播消息接收器，从代码实现角度来看，BroadcastReceiver非常类似于事件编程中的监听器。与普通事件监听器的事件源氏程序中的对象；而BroadcastReceiver监听的事件源是Android应用中的其他组件。</p><p>####4、ContentProvider<br>Android系统为跨应用的数据交换提供了一个标准：ContentProvider。通常与ContentProvider结合使用的ContentResolver,一个应用程序使用ContentProvider暴露自己的数据，另一个应用程序则通过ContentResolver来访问数据。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Android-使用Intent传递对象</title>
      <link href="/2015/08/27/Android-%E4%BD%BF%E7%94%A8Intent%E4%BC%A0%E9%80%92%E5%AF%B9%E8%B1%A1/"/>
      <url>/2015/08/27/Android-%E4%BD%BF%E7%94%A8Intent%E4%BC%A0%E9%80%92%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>####使用Intent传递对象<br><a id="more"></a><br>Intent可以用来启动活动、发送广播、启动服务等，也可以在Intent中添加一个附加数据。<br>在<code>FirtActivity</code>中添加如下代码:<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Intent</span> <span class="keyword">intent</span> = new <span class="keyword">Intent</span>(FirstActivity.this, SecondActivity.<span class="keyword">class</span>);</span><br><span class="line"><span class="keyword">intent</span>.putExtra(<span class="string">"string_data"</span>, <span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">intent</span>.putExtra(<span class="string">"int_data"</span>, <span class="number">100</span>);</span><br><span class="line">startActivity(<span class="keyword">intent</span>);</span><br></pre></td></tr></table></figure></p><p>这里调用了<code>Intent</code>的<code>putExtra（）</code>方法添加要传递的数据，之后再<code>SecondActivity</code>中就可以得到这些值<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">getIntent</span><span class="selector-class">.getStringExtra</span>("string_data);</span><br><span class="line"><span class="selector-tag">getIntent</span><span class="selector-class">.getStringExtra</span>(<span class="string">"int_data"</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>#####传递的类型是有限的，可以用两种来实现，Serializable和Parcelable<br>1、Serializable是序列化的意思，表示将一个对象转换成可存储或可传输的状态。序列化后的对象可以在网络上进行传输，也可以存储到本地。之于序列化的方法也很简单，只需让一个类是实现<code>Serializable</code>这个接口就可以了.<br>一个<code>Person</code>类，包含<code>name</code>和<code>age</code>两个字段，要将其序列化，可以这么写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来在FirstActivity中的写法很简单：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person person = new Person()<span class="comment">;</span></span><br><span class="line">person.setName(<span class="string">"Tom"</span>)<span class="comment">;</span></span><br><span class="line">person.setAge(<span class="number">20</span>)<span class="comment">;</span></span><br><span class="line">Intent intent = new Intent(FirstActivity.this, SecondActivity.class)<span class="comment">;</span></span><br><span class="line">intent.putExtra(<span class="string">"person_data"</span>, person)<span class="comment">;</span></span><br><span class="line">startActivity(intent)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>创建一个Person的实例，然后就直接把它传入到<code>putExtra()</code>方法中。接下来获取这个对象也很简单：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Person person</span> = (Person)getIntent().getSerializable(<span class="string">"person_data"</span>);</span><br></pre></td></tr></table></figure></p><p>2、Parcelable方式，不同上面的方法，Parcelable实现原理是将一个完整的对象进行分解，而分解后的每一部分都是Intent所支持的数据类型，这样也就实现传递对象的功能了。<br>修改Person中的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">describeContents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeToParcel</span><span class="params">(Parcel dest, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">        dest.writeString(name);</span><br><span class="line">        dest.writeInt(age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Parcelable.Creator&lt;Person&gt; CREATOR = <span class="keyword">new</span> Parcelable.Creator&lt;Person&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">createFromParcel</span><span class="params">(Parcel source)</span> </span>&#123;</span><br><span class="line">            Person person = <span class="keyword">new</span> Person();</span><br><span class="line">            person.name = source.readString();</span><br><span class="line">            person.age = source.readInt();</span><br><span class="line">            <span class="keyword">return</span> person;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Person[] newArray(<span class="keyword">int</span> size) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person[size];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来在<code>FirstActivity</code>中我们仍然可以使用相同的代码来传递Person对象，在<code>SecondActivity</code>中获取对象的时候需要修改:<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Person person</span> = (Person)getIntent().getParcelableExtra(<span class="string">"person_data"</span>);</span><br></pre></td></tr></table></figure></p><p><b>以上</b></p><p>#####Serializable因为要把整个对象序列化，效率方面会比Parcelable方式低一点。</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>为Android Studio快速安装Gradle</title>
      <link href="/2015/08/06/%E4%B8%BAAndroid-Studio%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85Gradle/"/>
      <url>/2015/08/06/%E4%B8%BAAndroid-Studio%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85Gradle/</url>
      <content type="html"><![CDATA[<p>####如何为Android Studio 快速安装Gradle<br><a id="more"></a><br>1、从<a href="http://services.gradle.org/distributions" target="_blank" rel="noopener">Gradle</a>官网下载相应的包。<br><img src="/2015/08/06/为Android-Studio快速安装Gradle/2.jpg"><br>2、打开<code>C:\Android Studio\gradle</code>目录，具体看个人的安装情况<br><img src="/2015/08/06/为Android-Studio快速安装Gradle/1.jpg"><br>3、把下载下来的Gradle包解压到2所提到的目录下<br><img src="/2015/08/06/为Android-Studio快速安装Gradle/3.jpg"><br>4、打开Android Studio的<code>File/setting/Gradle</code>按图设置相应的目录<br><img src="/2015/08/06/为Android-Studio快速安装Gradle/4.jpg"></p>]]></content>
      
      <categories>
          
          <category> Android Studio </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>关于VM虚拟机的一些问题</title>
      <link href="/2015/07/30/%E5%85%B3%E4%BA%8EVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2015/07/30/%E5%85%B3%E4%BA%8EVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>在升级系统之后，VM虚拟机提示是否移动了虚拟机，然后网络不能连接上，应该是网络适配器没有正常工作。<br>可以在移除之后重新添加一个。<br><a id="more"></a><br><img src="/2015/07/30/关于VM虚拟机的一些问题/1.jpg"></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android Studio的一些错误</title>
      <link href="/2015/06/14/Android-Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF/"/>
      <url>/2015/06/14/Android-Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>###1、cannot resolve symbol R android studio<br><a id="more"></a><br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Click <span class="keyword">on</span> Build-&gt;Clean <span class="keyword">Project</span> <span class="keyword">and</span> that will perform a gradle clean</span><br></pre></td></tr></table></figure></p><p>###2、filed not resolve<br>问题如下：<br><img src="/2015/06/14/Android-Studio的一些错误/1.jpg"><br>是因为设置了Gradle的offline模式，解开即可：<br><img src="/2015/06/14/Android-Studio的一些错误/2.jpg"></p>]]></content>
      
      <categories>
          
          <category> Android Studio </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>关于GIT的一些错误</title>
      <link href="/2015/05/23/%E5%85%B3%E4%BA%8EGIT%E7%9A%84%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF/"/>
      <url>/2015/05/23/%E5%85%B3%E4%BA%8EGIT%E7%9A%84%E4%B8%80%E4%BA%9B%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>刚创建的github版本库，在push代码时出错：<br><a id="more"></a></p><p><code>$ git push -u origin master</code><br>提示如下错误<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class="line">error: failed <span class="built_in">to</span> push some refs <span class="built_in">to</span> <span class="string">'git@github.com:******/Demo.git'</span></span><br><span class="line">hint: Updates were rejected because <span class="keyword">the</span> tip <span class="keyword">of</span> your current branch is behind</span><br><span class="line">hint: its remote counterpart. Merge <span class="keyword">the</span> remote changes (e.g. <span class="string">'git pull'</span>)</span><br><span class="line">hint: <span class="keyword">before</span> pushing again.</span><br><span class="line">hint: See <span class="keyword">the</span> <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure></p><p>因为远程repository和本地的repository冲突导致的，而我在创建版本库后，在github的版本库页面点击了创建README.md文件的按钮创建了说明文档，但是却没有pull到本地。这样就产生了版本冲突的问题。</p><p>解决方案：<br>1.使用强制push的方法：<br><code>$ git push -u origin master -f</code><br>这样会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候。</p><p>2.push前先将远程repository修改pull下来<br><code>$ git pull origin master</code><br>再进行push<br><code>$ git push -u origin master</code></p><p>3.若不想merge远程和本地修改，可以先创建新的分支：<br><code>$ git branch [name]</code><br>然后push<br><code>$ git push -u origin [name]</code></p>]]></content>
      
      <categories>
          
          <category> GIT </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>adb shell 错误</title>
      <link href="/2015/05/16/adb-shell-%E9%94%99%E8%AF%AF/"/>
      <url>/2015/05/16/adb-shell-%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>使用adb shell提示<code>adb server is out of date. killing...?</code><br><a id="more"></a></p><p>#####是ADB端口被占用了</p><p>先执行<code>adb nodaemon server</code> ，查看adb server的端口是多少<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\xxxx&gt;adb nodaemon server  </span><br><span class="line">cannot bind 'tcp:<span class="number">5037</span>'</span><br></pre></td></tr></table></figure></p><p>再执行下<code>netstat -ano | findstr &quot;5037&quot;</code><br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">C:</span>\Users\xxxxxx&gt;netstat -ano | findstr <span class="string">"5037"</span>  </span><br><span class="line">  TCP    <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5037</span>         <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">0</span>              LISTENING       <span class="number">4236</span>  </span><br><span class="line">  TCP    <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5037</span>         <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">49422</span>        ESTABLISHED     搜索<span class="number">4236</span>  </span><br><span class="line">  TCP    <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">49422</span>        <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">5037</span>         ESTABLISHED     <span class="number">3840</span></span><br></pre></td></tr></table></figure></p><p>最后执行<code>tskill 4236</code>即可。</p>]]></content>
      
      <categories>
          
          <category> Study Class </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android关于TextView 点击的问题</title>
      <link href="/2015/05/13/Android%E5%85%B3%E4%BA%8ETextView-%E7%82%B9%E5%87%BB%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2015/05/13/Android%E5%85%B3%E4%BA%8ETextView-%E7%82%B9%E5%87%BB%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>在xml文件中定义一个<code>android:onClick=&quot;NextQuestion&quot;</code>之后在方法类中点击Textview进行操作没反应，需要在<code>onCreate</code>中定义<code>onClick</code>方法才可以。</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android hander错误及后续错误</title>
      <link href="/2015/05/12/Android-hander%E9%94%99%E8%AF%AF/"/>
      <url>/2015/05/12/Android-hander%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>在用Android Studio的时候用原生的Handler的时候，要手动导入<code>android.os.Handler</code>，否则会报错。</p><p>把一个对象实例化的时候，在一个类里面的实例化的话，只能在这个类里面调用。</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>购买域名设置DNS</title>
      <link href="/2015/05/09/%E8%B4%AD%E4%B9%B0%E5%9F%9F%E5%90%8D%E8%AE%BE%E7%BD%AEDNS/"/>
      <url>/2015/05/09/%E8%B4%AD%E4%B9%B0%E5%9F%9F%E5%90%8D%E8%AE%BE%E7%BD%AEDNS/</url>
      <content type="html"><![CDATA[<p>博客搭建好之后就一直想买个域名，这几天在考虑域名和后缀的选择问题。后缀好说，首选.com，次选.me或.net。</p><a id="more"></a><p>域名的购买，首选Goddady。原因如下：<br>1.在国外，不受国内各种干扰。<br>2.国外域名商中唯一支持支付宝付款的。<br>3.价格不高，还经常有优惠。<br>4.信誉好，口碑好，靠谱。</p><p>域名购买完成后就要在Goddady网站里设置dns服务商了。Goddady会默认提供两个国外的，对于国内网站和国内访问来说，最好使用国内的dns服务商，这里选择口碑最好使用最多的免费dns服务商dnspod.cn。这里解释下goddady和dnspod的关系。</p><p>Goddady是域名服务商，我们需要在这里选择由哪个dns服务商为我们的网站提供域名解析服务。</p><p>设置好之后，去dnspod.cn注册账号，添加<a href="zipperary.com">网站</a>，设置域名到ip的映射关系.</p>]]></content>
      
      <categories>
          
          <category> hexo教程 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>hexo 教程4:添加评论代码等优化</title>
      <link href="/2015/05/04/hexo-%E6%95%99%E7%A8%8B4%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E4%BB%A3%E7%A0%81%E7%AD%89%E4%BC%98%E5%8C%96/"/>
      <url>/2015/05/04/hexo-%E6%95%99%E7%A8%8B4%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E4%BB%A3%E7%A0%81%E7%AD%89%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>#####添加多说评论<br>hexo默认使用国外比较流行的disqus，不过，按照“因地制宜”的原则，我们修改为国内用的多又好用的“多说”评论系统。步骤非常简单：<br>1.在 <a href="http://duoshuo.com" target="_blank" rel="noopener">多说</a>进行注册，获得通用代码。<br>2.将通用代码粘贴到<code>themes\light\layout\_partial\comment.ejs</code>里面，如下：<br><a id="more"></a><br><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> ( page.comments)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"comment"</span>&gt;</span></span></span><br><span class="line"><span class="xml">通用代码</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure></p><!--more--><p>#####添加&lt;页面导航&gt;<br>在刚才添加「多说」评论的文件中，加入一段代码，如下：<br><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> ( page.comments)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">"pagination"</span> &gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (page.prev) &#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%-</span></span></span><span class="ruby"> config.root </span><span class="xml"><span class="tag"><span class="string">%&gt;&lt;%-</span></span></span><span class="ruby"> page.prev.path </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">class</span>=<span class="string">"alignleft prev"</span> &gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> _<span class="number">_</span>(<span class="string">'prev'</span>) </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> <span class="keyword">if</span> (page.<span class="keyword">next</span>) &#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%-</span></span></span><span class="ruby"> config.root </span><span class="xml"><span class="tag"><span class="string">%&gt;&lt;%-</span></span></span><span class="ruby"> page.<span class="keyword">next</span>.path </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">class</span>=<span class="string">"alignright next"</span> &gt;</span><span class="tag">&lt;<span class="name">%=</span></span></span><span class="ruby"> _<span class="number">_</span>(<span class="string">'next'</span>) </span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"comment"</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>#####添加小图标<br>在<code>themes/light/layout/_partial/head.ejs</code>里将<code>&lt;link href=&quot;&lt;%- config.root %&gt;favicon.png&quot; rel=&quot;icon&quot;&gt;</code>替换为<code>&lt;link href=&quot;&lt;%- config.root %&gt;favicon.ico&quot; rel=&quot;icon&quot; type=&quot;image/x-ico&quot;&gt;</code>。将favicon.ico图标文件放在source目录下。</p><p>#####导航栏添加”关于”<br>1.<code>hexo new page &quot;about&quot;</code><br>2.到<code>source/about/index.md</code>编辑内容。<br>3.在<code>themes/light/_config.yml</code>中，添加如下：<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">menu</span>:</span><br><span class="line">  关于: /<span class="keyword">about</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> hexo教程 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>hexo 教程3:博客的配置、使用</title>
      <link href="/2015/04/28/hexo%E6%95%99%E7%A8%8B3%EF%BC%9A%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%85%8D%E7%BD%AE%E3%80%81%E4%BD%BF%E7%94%A8/"/>
      <url>/2015/04/28/hexo%E6%95%99%E7%A8%8B3%EF%BC%9A%E5%8D%9A%E5%AE%A2%E7%9A%84%E9%85%8D%E7%BD%AE%E3%80%81%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>本地和github搭建起了自己的hexo博客站点，但是还未发表过文章，站点的配置还是原来的默认值。在本节，来进行个性化的设置，将站点打造成自己的个性化站点，并发表文章。</p><p>站点配置用到两个文件，一个是对整站的配置<code>\hexo\_config.yml</code>，另一个是对主题的配置<code>\hexo\themes\light_config.yml</code>，分别介绍。<br><a id="more"></a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://zespia.tw/hexo/docs/configure.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/tommy351/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Zippera's</span> <span class="string">blog</span> <span class="comment">#站点名，站点左上角</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">Walk</span> <span class="string">steps</span> <span class="string">step</span> <span class="string">by</span> <span class="string">step</span> <span class="comment">#副标题，站点左上角</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">Walk</span> <span class="string">steps</span> <span class="string">step</span> <span class="string">by</span> <span class="string">step</span> <span class="comment">#给搜索引擎看的，对站点的描述，可以自定义</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">zippera</span> <span class="comment">#在站点左下角可以看到</span></span><br><span class="line"><span class="attr">email:</span> <span class="comment">#你的联系邮箱</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment">#中文</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://zipperary.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing 文章布局、写作格式的定义，不修改</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">auto_spacing:</span> <span class="literal">false</span> <span class="comment"># Add spaces between asian characters and western characters</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">max_open_file:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  backtick_code_block:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Archives 默认值为2，这里都修改为1，相应页面就只会列出标题，而非全文</span></span><br><span class="line"><span class="comment">## 2: Enable pagination</span></span><br><span class="line"><span class="comment">## 1: Disable pagination</span></span><br><span class="line"><span class="comment">## 0: Fully Disable</span></span><br><span class="line"><span class="attr">archive:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">category:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">tag:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Server 不修改</span></span><br><span class="line"><span class="comment">## Hexo uses Connect as a server</span></span><br><span class="line"><span class="comment">## You can customize the logger format as defined in</span></span><br><span class="line"><span class="comment">## http://www.senchalabs.org/connect/logger.html</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">4000</span></span><br><span class="line"><span class="attr">logger:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">logger_format:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format 日期格式，不修改</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">MMM</span> <span class="string">D</span> <span class="string">YYYY</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">H:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination 每页显示文章数，可以自定义，将10改成了5</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disqus Disqus插件，会替换成“多说”，不修改</span></span><br><span class="line"><span class="attr">disqus_shortname:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions 这里配置站点所用主题和插件，暂默认</span></span><br><span class="line"><span class="comment">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span></span><br><span class="line"><span class="comment">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">light</span></span><br><span class="line"><span class="attr">exclude_generator:</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-sitemap</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment 站点部署到github要配置</span></span><br><span class="line"><span class="comment">## Docs: http://zespia.tw/hexo/docs/deploy.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">github</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/zippera/zippera.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>可以<code>hexo generate</code>，<code>hexo server</code>，打开<code>localhost:4000</code>查看效果了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span> <span class="comment">#站点右上角导航栏，暂时默认，后面介绍修改</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span></span><br><span class="line">  <span class="string">存档:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about</span></span><br><span class="line"><span class="attr">  ToDo:</span> <span class="string">/todolist</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">widgets:</span> <span class="comment">#站点右边栏，暂时默认，后面介绍修改和添加</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">search</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">category</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">tagcloud</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">weibo</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">blogroll</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">excerpt_link:</span> <span class="string">阅读全文</span> <span class="comment">#替换为中文</span></span><br><span class="line"></span><br><span class="line"><span class="attr">plugins:</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">twitter:</span> <span class="comment">#右边栏要显示twitter展示的话，需要在此设置</span></span><br><span class="line"><span class="attr">  username:</span> <span class="string">moxie198</span></span><br><span class="line"><span class="attr">  show_replies:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  tweet_count:</span> <span class="number">5</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">  addthis:</span> <span class="comment">#SNS分享，身在天朝，当然用“百度分享”，暂时默认，后面会介绍</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  pubid:</span></span><br><span class="line"><span class="attr">  facebook:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  twitter:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  google:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  pinterest:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span> <span class="comment">#图片效果，默认</span></span><br><span class="line"></span><br><span class="line"><span class="attr">google_analytics:</span> <span class="comment">#要使用google_analytics进行统计的话，这里需要配置ID，暂时默认，后面介绍</span></span><br><span class="line"><span class="attr">rss:</span>  <span class="comment">#生成RSS，需要配置路径，暂时默认，后面介绍</span></span><br></pre></td></tr></table></figure><p>好了，站点配置好了，我想发表一篇文章，怎么做呢？</p><ol><li>hexo new “my new post”</li><li>在<code>\hexo\source\_posts</code>中打开这个文件（打开方式用“记事本”即可），配置开头。</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">my</span> <span class="string">new</span> <span class="string">post</span> <span class="comment">#可以改成中文的，如“新文章”</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2013</span><span class="bullet">-05</span><span class="bullet">-29</span> <span class="number">07</span><span class="string">:56:29</span> <span class="comment">#发表日期，一般不改动</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">blog</span> <span class="comment">#文章文类</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[博客，文章]</span> <span class="comment">#文章标签，多于一项时用这种格式</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>#####下一节介绍优化</p>]]></content>
      
      <categories>
          
          <category> hexo教程 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android 从输入框获取信息</title>
      <link href="/2015/04/28/Android-%E4%BB%8E%E8%BE%93%E5%85%A5%E6%A1%86%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF/"/>
      <url>/2015/04/28/Android-%E4%BB%8E%E8%BE%93%E5%85%A5%E6%A1%86%E8%8E%B7%E5%8F%96%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>在<code>activity_main.xml</code>中加入以下代码<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">    android:<span class="attribute">id</span>=<span class="string">"@+id/button"</span></span><br><span class="line">    android:<span class="attribute">layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    android:<span class="attribute">layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="attribute">text</span>=<span class="string">"@string/button"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;EditText</span><br><span class="line">    android:<span class="attribute">id</span>=<span class="string">"@+id/edit_text"</span></span><br><span class="line">    android:<span class="attribute">layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    android:<span class="attribute">layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">    android:<span class="attribute">maxLines</span>=<span class="string">"2"</span></span><br><span class="line">    android:<span class="attribute">hint</span>=<span class="string">"Type something here"</span>/&gt;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>接着在<code>MainActivity.java</code>中添加逻辑控制程序<br>在<code>onCreate</code>之前定义<code>Button</code>和<code>EditText</code>，之后再在<code>onCreate</code>方法下添加代码<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> EditText editText;</span><br><span class="line"><span class="keyword">private</span> Button button;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    </span><br><span class="line">    button = (Button)findViewById(R.id.button);</span><br><span class="line">    editText = (EditText)findViewById(R.id.edit_text);</span><br><span class="line">    button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">                <span class="keyword">case</span> R.id.button:</span><br><span class="line">                    String inputText = editText.getText().toString();</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, inputText,Toast.LENGTH_SHORT).show();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果直接用<code>EditText editText</code>来定义会报错。</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Android 提示信息的乱码问题</title>
      <link href="/2015/04/25/Android-%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>/2015/04/25/Android-%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF%E7%9A%84%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>在使用Android Studio中，错误信息的提示有时会出现乱码。<br>这主要是因为Projiect Encoding的编码默认是UTF-16，只要将其改为UTF-8即可。<br><img src="/2015/04/25/Android-提示信息的乱码问题/1.jpg"><br><a id="more"></a><br>1.中文乱码显示解决：<br>Settings -&gt; Editor -&gt; Appearance -&gt; 选择Theme -&gt; 然后勾选上下面的Override default fonts by:在Name中选择一个支持中文字体的字体：比如微软雅黑，serif, sansSerif等，并设定Size，一般为15就可以了，自己可以调，这个设置主要是IDE的菜单标题栏字体和样式等，然后保存即可。<br>2.让编辑窗口支持Ctr+鼠标左键缩放修改字体大小<br>Settings -&gt; Editor -&gt; Mouse选项栏中勾选“Change font size(Zoom) with Ctrl+Mouse Wheel”<br>3.修改主题和字体 大小<br>Settings -&gt; Editor -&gt; Colors &amp; Fonts -&gt; Font -&gt; 在“Scheme name”选择一个主题样式并另存为：xx,xx自己起名，font size自己可以设置如15,17等，下面的左栏是可选字体列表，右侧为当前系统编辑器的字体，选择一个字体，并修改字体大小，保存即可。<br>4.Android Studio设置主题 和 不支持中文<br>File –&gt;  Settings –&gt; Appearance， 然后右边的 Override default fonts by 打上勾，然后选择一种支持中文的字体，如GB213即可</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>hexo 教程2：搭建hexo博客</title>
      <link href="/2015/04/25/hexo%E6%95%99%E7%A8%8B2%EF%BC%9A%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2015/04/25/hexo%E6%95%99%E7%A8%8B2%EF%BC%9A%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<img src="/2015/04/25/hexo教程2：搭建hexo博客/1.jpg"><p><b>注意:</b>本教程都是在Windows环境下操作的。</p><p>#####安装 Git<br><a href="http://git-scm.com/" target="_blank" rel="noopener">git下载</a></p><p>#####安装Node.js<br>在Windows下安装Node.js非常方便，只要下载安装执行文件就行。<a href="https://nodejs.org/download/" target="_blank" rel="noopener">Node.js的安装文件</a>根据系统版本进行选择下载。<br><a id="more"></a></p><p>#####安装hexo<br>利用 npm 命令即可安装。<strong>注意：</strong>在你想要的位置新建一个文件夹，然后右击选择<code>Git Bash</code><br>然后输入：<code>npm install -g hexo</code><br>之后初始化hexo:<code>hexo init</code></p><p>#####安装依赖包<br><code>npm install</code><br>Hexo 3.0把服务器独立成了个别模块，必须先安装hexo-server才能使用<br><code>npm install hexo-server --save</code></p><p>#####本地查看<br>现在已经搭建起本地的hexo博客了，执行以下命令，然后到浏览器输入localhost:4000就可以看到博客了。<br><code>hexo generate</code><br><code>hexo server</code></p><p>至此，本地的hexo博客就搭建起来了。下面部署到github或者gitcafe上。<br>注册一个github或者gitcafe的账户，然后新建一个repository，名字应该是<code>username.github.io</code></p><p>#####部署<br>编辑<code>_config.yml</code>(在博客文件夹下)。部署时，要把下面的username都换成本人的账号名。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repository</span>: <span class="attribute">https</span>:<span class="comment">//github.com/username/username.github.io.git</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></p><p>然后部署<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><p><strong>PS:</strong>每次修改任何文件都要<code>hexo generate</code>来保存<br>在浏览器输入username.githu.io就能看到博客了。</p><p>###如何配置博客，如何撰写和发表文章。下篇介绍。</p>]]></content>
      
      <categories>
          
          <category> hexo教程 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>hexo 教程1：hexo简介</title>
      <link href="/2015/04/24/hexo-%E6%95%99%E7%A8%8B1%EF%BC%9Ahexo%E7%AE%80%E4%BB%8B/"/>
      <url>/2015/04/24/hexo-%E6%95%99%E7%A8%8B1%EF%BC%9Ahexo%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>#####什么是hexo?</p><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a id="more"></a></p></blockquote><p>#####为什么要用hexo?</p><blockquote><p>不可思议的快速 ─ 只要一眨眼静态文件即生成完成<br>支持 Markdown<br>仅需一道指令即可部署到 GitHub Pages 和 Heroku<br>已移植 Octopress 插件<br>高扩展性、自订性<br>兼容于 Windows, Mac &amp; Linux</p></blockquote><p>个人感觉：<br>1.轻。文件不多，方便理解（虽然我折腾了好久，没办法，笨），容易自定义。<br>2.易用。如果平时就写点文章，差不多就用到，<code>hexo new “”</code> <code>hexo g -d</code>。<br>3.使用的用户还是蛮多的，大部分问题都能直接google解决。<br>4.有中文文档。虽然做的潦草，但是还是能解决不少问题的。</p><p><a href="http://http://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官网</a></p><p>###如何搭建一个hexo博客呢？下篇介绍。</p>]]></content>
      
      <categories>
          
          <category> hexo教程 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>hexo 添加多说教程</title>
      <link href="/2015/04/24/hexo-%E6%B7%BB%E5%8A%A0%E5%A4%9A%E8%AF%B4%E6%95%99%E7%A8%8B/"/>
      <url>/2015/04/24/hexo-%E6%B7%BB%E5%8A%A0%E5%A4%9A%E8%AF%B4%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><strong>在hexo中添加多说的使用模块，使用步骤如下：</strong><br>在<code>_config.yml</code>中添加多说的配置：</p><p>  <code>duoshuo_shortname:</code>你站点的<code>short_name</code><br>修改<code>themes\landscape\layout\_partial\article.ejs</code>模板<br><a id="more"></a><br>把<br><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> <span class="keyword">if</span> (!<span class="keyword">index</span> &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"disqus_thread"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>Please enable JavaScript to view the <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"//disqus.com/?ref_noscript"</span>&gt;</span>comments powered by Disqus.<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"> &#125; </span><span class="xml"><span class="tag">%&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>改为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span> &amp;&amp; <span class="attr">post.comments</span> &amp;&amp; <span class="attr">config.duoshuo_shortname</span>)&#123; %&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 多说评论框 start --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ds-thread"</span> <span class="attr">data-thread-key</span>=<span class="string">"&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;"</span> <span class="attr">data-title</span>=<span class="string">"&lt;%= post.title %&gt;"</span> <span class="attr">data-url</span>=<span class="string">"&lt;%= page.permalink %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 多说评论框 end --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> duoshuoQuery = &#123;short_name:<span class="string">'&lt;%= config.duoshuo_shortname %&gt;'</span>&#125;;</span></span><br><span class="line"><span class="actionscript">     (<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="actionscript">       ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">       ds.src = (<span class="built_in">document</span>.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.js'</span>;</span></span><br><span class="line"><span class="actionscript">       ds.charset = <span class="string">'UTF-8'</span>;</span></span><br><span class="line"><span class="javascript">       (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] </span></span><br><span class="line"><span class="javascript">        || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);</span></span><br><span class="line"><span class="undefined">     &#125;)();</span></span><br><span class="line"><span class="undefined">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 多说公共JS代码 end --&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> hexo教程 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
